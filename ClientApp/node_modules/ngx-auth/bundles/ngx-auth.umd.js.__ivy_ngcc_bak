(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('rxjs/operators'), require('@angular/common/http'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-auth', ['exports', '@angular/core', '@angular/common', '@angular/router', 'rxjs/operators', '@angular/common/http', 'rxjs'], factory) :
    (factory((global['ngx-auth'] = {}),global.ng.core,global.ng.common,global.ng.router,global.rxjs.operators,global.ng.common.http,global.rxjs));
}(this, (function (exports,core,common,router,operators,http,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Essential service for authentication
     * @abstract
     */
    var /**
     * Essential service for authentication
     * @abstract
     */ AuthService = /** @class */ (function () {
        function AuthService() {
        }
        return AuthService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var AUTH_SERVICE = new core.InjectionToken('AUTH_SERVICE');
    /** @type {?} */
    var PUBLIC_FALLBACK_PAGE_URI = new core.InjectionToken('PUBLIC_FALLBACK_PAGE_URI');
    /** @type {?} */
    var PROTECTED_FALLBACK_PAGE_URI = new core.InjectionToken('PROTECTED_FALLBACK_PAGE_URI');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Guard, checks access token availability and allows or disallows access to page,
     * and redirects out
     *
     * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }
     *
     * @export
     * \@dynamic
     */
    var PublicGuard = /** @class */ (function () {
        function PublicGuard(authService, protectedFallbackPageUri, document, router$$1) {
            this.authService = authService;
            this.protectedFallbackPageUri = protectedFallbackPageUri;
            this.document = document;
            this.router = router$$1;
        }
        /**
         * CanActivate handler
         */
        /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
        PublicGuard.prototype.canActivate = /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
            function (_route, state) {
                var _this = this;
                return this.authService.isAuthorized()
                    .pipe(operators.map(function (isAuthorized) {
                    if (isAuthorized && !_this.isProtectedPage(state)) {
                        _this.navigate(_this.protectedFallbackPageUri);
                        return false;
                    }
                    return true;
                }));
            };
        /**
         * CanActivateChild handler
         */
        /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        PublicGuard.prototype.canActivateChild = /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                return this.canActivate(route, state);
            };
        /**
         * Check, if current page is protected fallback page
         */
        /**
         * Check, if current page is protected fallback page
         * @param {?} state
         * @return {?}
         */
        PublicGuard.prototype.isProtectedPage = /**
         * Check, if current page is protected fallback page
         * @param {?} state
         * @return {?}
         */
            function (state) {
                return state.url === this.protectedFallbackPageUri;
            };
        /**
         * Navigate away from the app / path
         */
        /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
        PublicGuard.prototype.navigate = /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (url.startsWith('http')) {
                    this.document.location.href = url;
                }
                else {
                    this.router.navigateByUrl(url);
                }
            };
        PublicGuard.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PublicGuard.ctorParameters = function () {
            return [
                { type: AuthService, decorators: [{ type: core.Inject, args: [AUTH_SERVICE,] }] },
                { type: String, decorators: [{ type: core.Inject, args: [PROTECTED_FALLBACK_PAGE_URI,] }] },
                { type: Document, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
                { type: router.Router }
            ];
        };
        return PublicGuard;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Guard, checks access token availability and allows or disallows access to page,
     * and redirects out
     *
     * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }
     *
     * @export
     * \@dynamic
     */
    var ProtectedGuard = /** @class */ (function () {
        function ProtectedGuard(authService, publicFallbackPageUri, document, router$$1) {
            this.authService = authService;
            this.publicFallbackPageUri = publicFallbackPageUri;
            this.document = document;
            this.router = router$$1;
        }
        /**
         * CanActivate handler
         */
        /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
        ProtectedGuard.prototype.canActivate = /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
            function (_route, state) {
                var _this = this;
                return this.authService.isAuthorized()
                    .pipe(operators.map(function (isAuthorized) {
                    if (!isAuthorized && !_this.isPublicPage(state)) {
                        if (_this.authService.setInterruptedUrl) {
                            _this.authService.setInterruptedUrl(state.url);
                        }
                        _this.navigate(_this.publicFallbackPageUri);
                        return false;
                    }
                    return true;
                }));
            };
        /**
         * CanActivateChild handler
         */
        /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        ProtectedGuard.prototype.canActivateChild = /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                return this.canActivate(route, state);
            };
        /**
         * Check, if current page is public fallback page
         */
        /**
         * Check, if current page is public fallback page
         * @param {?} state
         * @return {?}
         */
        ProtectedGuard.prototype.isPublicPage = /**
         * Check, if current page is public fallback page
         * @param {?} state
         * @return {?}
         */
            function (state) {
                return state.url === this.publicFallbackPageUri;
            };
        /**
         * Navigate away from the app / path
         */
        /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
        ProtectedGuard.prototype.navigate = /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (url.startsWith('http')) {
                    this.document.location.href = url;
                }
                else {
                    this.router.navigateByUrl(url);
                }
            };
        ProtectedGuard.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProtectedGuard.ctorParameters = function () {
            return [
                { type: AuthService, decorators: [{ type: core.Inject, args: [AUTH_SERVICE,] }] },
                { type: String, decorators: [{ type: core.Inject, args: [PUBLIC_FALLBACK_PAGE_URI,] }] },
                { type: Document, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
                { type: router.Router }
            ];
        };
        return ProtectedGuard;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AuthInterceptor = /** @class */ (function () {
        function AuthInterceptor(injector) {
            this.injector = injector;
            /**
             * Is refresh token is being executed
             */
            this.refreshInProgress = false;
            /**
             * Notify all outstanding requests through this subject
             */
            this.refreshSubject = new rxjs.Subject();
        }
        /**
         * Intercept an outgoing `HttpRequest`
         */
        /**
         * Intercept an outgoing `HttpRequest`
         * @param {?} req
         * @param {?} delegate
         * @return {?}
         */
        AuthInterceptor.prototype.intercept = /**
         * Intercept an outgoing `HttpRequest`
         * @param {?} req
         * @param {?} delegate
         * @return {?}
         */
            function (req, delegate) {
                if (this.skipRequest(req)) {
                    return delegate.handle(req);
                }
                return this.processIntercept(req, delegate);
            };
        /**
         * Process all the requests via custom interceptors.
         */
        /**
         * Process all the requests via custom interceptors.
         * @param {?} original
         * @param {?} delegate
         * @return {?}
         */
        AuthInterceptor.prototype.processIntercept = /**
         * Process all the requests via custom interceptors.
         * @param {?} original
         * @param {?} delegate
         * @return {?}
         */
            function (original, delegate) {
                var _this = this;
                /** @type {?} */
                var clone = original.clone();
                return this.request(clone)
                    .pipe(operators.switchMap(function (req) { return delegate.handle(req); }), operators.catchError(function (res) { return _this.responseError(clone, res); }));
            };
        /**
         * Request interceptor. Delays request if refresh is in progress
         * otherwise adds token to the headers
         */
        /**
         * Request interceptor. Delays request if refresh is in progress
         * otherwise adds token to the headers
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.request = /**
         * Request interceptor. Delays request if refresh is in progress
         * otherwise adds token to the headers
         * @param {?} req
         * @return {?}
         */
            function (req) {
                if (this.refreshInProgress) {
                    return this.delayRequest(req);
                }
                return this.addToken(req);
            };
        /**
         * Failed request interceptor, check if it has to be processed with refresh
         */
        /**
         * Failed request interceptor, check if it has to be processed with refresh
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
        AuthInterceptor.prototype.responseError = /**
         * Failed request interceptor, check if it has to be processed with refresh
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
            function (req, res) {
                var _this = this;
                /** @type {?} */
                var authService = this.injector.get(AUTH_SERVICE);
                /** @type {?} */
                var refreshShouldHappen = authService.refreshShouldHappen(res, req);
                if (refreshShouldHappen && !this.refreshInProgress) {
                    this.refreshInProgress = true;
                    authService
                        .refreshToken()
                        .subscribe(function () {
                        _this.refreshInProgress = false;
                        _this.refreshSubject.next(true);
                    }, function () {
                        _this.refreshInProgress = false;
                        _this.refreshSubject.next(false);
                    });
                }
                if (refreshShouldHappen && this.refreshInProgress) {
                    return this.retryRequest(req, res);
                }
                return rxjs.throwError(res);
            };
        /**
         * Add access token to headers or the request
         */
        /**
         * Add access token to headers or the request
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.addToken = /**
         * Add access token to headers or the request
         * @param {?} req
         * @return {?}
         */
            function (req) {
                /** @type {?} */
                var authService = this.injector.get(AUTH_SERVICE);
                return authService.getAccessToken()
                    .pipe(operators.map(function (token) {
                    if (token) {
                        /** @type {?} */
                        var setHeaders = void 0;
                        if (typeof authService.getHeaders === 'function') {
                            setHeaders = authService.getHeaders(token);
                        }
                        else {
                            setHeaders = { Authorization: "Bearer " + token };
                        }
                        return req.clone({ setHeaders: setHeaders });
                    }
                    return req;
                }), operators.first());
            };
        /**
         * Delay request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         */
        /**
         * Delay request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.delayRequest = /**
         * Delay request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @return {?}
         */
            function (req) {
                var _this = this;
                return this.refreshSubject.pipe(operators.first(), operators.switchMap(function (status) {
                    return status ? _this.addToken(req) : rxjs.throwError(req);
                }));
            };
        /**
         * Retry request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         */
        /**
         * Retry request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
        AuthInterceptor.prototype.retryRequest = /**
         * Retry request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
            function (req, res) {
                /** @type {?} */
                var http$$1 = this.injector.get(http.HttpClient);
                return this.refreshSubject.pipe(operators.first(), operators.switchMap(function (status) {
                    return status ? http$$1.request(req) : rxjs.throwError(res || req);
                }));
            };
        /**
         * Checks if request must be skipped by interceptor.
         */
        /**
         * Checks if request must be skipped by interceptor.
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.skipRequest = /**
         * Checks if request must be skipped by interceptor.
         * @param {?} req
         * @return {?}
         */
            function (req) {
                /** @type {?} */
                var skipRequest = this.exec('skipRequest', req);
                /** @type {?} */
                var verifyRefreshToken = this.exec('verifyRefreshToken', req);
                // deprecated, will be removed soon
                /** @type {?} */
                var verifyTokenRequest = this.exec('verifyTokenRequest', req.url);
                return skipRequest || verifyRefreshToken || verifyTokenRequest;
            };
        /**
         * Exec optional method, will be removed in upcoming updates.
         * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
         */
        /**
         * Exec optional method, will be removed in upcoming updates.
         * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
         * @param {?} method
         * @param {...?} args
         * @return {?}
         */
        AuthInterceptor.prototype.exec = /**
         * Exec optional method, will be removed in upcoming updates.
         * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
         * @param {?} method
         * @param {...?} args
         * @return {?}
         */
            function (method) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                /** @type {?} */
                var authService = this.injector.get(AUTH_SERVICE);
                if (typeof authService[method] === 'function') {
                    return authService[method].apply(authService, __spread(args));
                }
            };
        AuthInterceptor.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AuthInterceptor.ctorParameters = function () {
            return [
                { type: core.Injector }
            ];
        };
        return AuthInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AuthModule = /** @class */ (function () {
        function AuthModule() {
        }
        AuthModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            PublicGuard,
                            ProtectedGuard,
                            AuthInterceptor,
                            {
                                provide: http.HTTP_INTERCEPTORS,
                                useClass: AuthInterceptor,
                                multi: true,
                            }
                        ]
                    },] }
        ];
        return AuthModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AuthService = AuthService;
    exports.PublicGuard = PublicGuard;
    exports.ProtectedGuard = ProtectedGuard;
    exports.AUTH_SERVICE = AUTH_SERVICE;
    exports.PUBLIC_FALLBACK_PAGE_URI = PUBLIC_FALLBACK_PAGE_URI;
    exports.PROTECTED_FALLBACK_PAGE_URI = PROTECTED_FALLBACK_PAGE_URI;
    exports.AuthModule = AuthModule;
    exports.ɵa = AuthInterceptor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,