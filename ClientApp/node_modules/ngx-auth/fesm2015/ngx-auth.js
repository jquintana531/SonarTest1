import { InjectionToken, Injectable, Inject, Injector, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Router } from '@angular/router';
import { map, first, switchMap, catchError } from 'rxjs/operators';
import { HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';
import { Subject, throwError } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Essential service for authentication
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
class AuthService {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');
/** @type {?} */
const PUBLIC_FALLBACK_PAGE_URI = new InjectionToken('PUBLIC_FALLBACK_PAGE_URI');
/** @type {?} */
const PROTECTED_FALLBACK_PAGE_URI = new InjectionToken('PROTECTED_FALLBACK_PAGE_URI');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 *
 * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }
 *
 * @export
 * \@dynamic
 */
class PublicGuard {
    /**
     * @param {?} authService
     * @param {?} protectedFallbackPageUri
     * @param {?} document
     * @param {?} router
     */
    constructor(authService, protectedFallbackPageUri, document, router) {
        this.authService = authService;
        this.protectedFallbackPageUri = protectedFallbackPageUri;
        this.document = document;
        this.router = router;
    }
    /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    canActivate(_route, state) {
        return this.authService.isAuthorized()
            .pipe(map((isAuthorized) => {
            if (isAuthorized && !this.isProtectedPage(state)) {
                this.navigate(this.protectedFallbackPageUri);
                return false;
            }
            return true;
        }));
    }
    /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
    /**
     * Check, if current page is protected fallback page
     * @param {?} state
     * @return {?}
     */
    isProtectedPage(state) {
        return state.url === this.protectedFallbackPageUri;
    }
    /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    navigate(url) {
        if (url.startsWith('http')) {
            this.document.location.href = url;
        }
        else {
            this.router.navigateByUrl(url);
        }
    }
}
PublicGuard.ɵfac = function PublicGuard_Factory(t) { return new (t || PublicGuard)(ɵngcc0.ɵɵinject(AUTH_SERVICE), ɵngcc0.ɵɵinject(PROTECTED_FALLBACK_PAGE_URI), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
PublicGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PublicGuard, factory: PublicGuard.ɵfac });
/** @nocollapse */
PublicGuard.ctorParameters = () => [
    { type: AuthService, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: String, decorators: [{ type: Inject, args: [PROTECTED_FALLBACK_PAGE_URI,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PublicGuard, [{
        type: Injectable
    }], function () { return [{ type: AuthService, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [PROTECTED_FALLBACK_PAGE_URI]
            }] }, { type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.Router }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 *
 * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }
 *
 * @export
 * \@dynamic
 */
class ProtectedGuard {
    /**
     * @param {?} authService
     * @param {?} publicFallbackPageUri
     * @param {?} document
     * @param {?} router
     */
    constructor(authService, publicFallbackPageUri, document, router) {
        this.authService = authService;
        this.publicFallbackPageUri = publicFallbackPageUri;
        this.document = document;
        this.router = router;
    }
    /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    canActivate(_route, state) {
        return this.authService.isAuthorized()
            .pipe(map((isAuthorized) => {
            if (!isAuthorized && !this.isPublicPage(state)) {
                if (this.authService.setInterruptedUrl) {
                    this.authService.setInterruptedUrl(state.url);
                }
                this.navigate(this.publicFallbackPageUri);
                return false;
            }
            return true;
        }));
    }
    /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
    /**
     * Check, if current page is public fallback page
     * @param {?} state
     * @return {?}
     */
    isPublicPage(state) {
        return state.url === this.publicFallbackPageUri;
    }
    /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    navigate(url) {
        if (url.startsWith('http')) {
            this.document.location.href = url;
        }
        else {
            this.router.navigateByUrl(url);
        }
    }
}
ProtectedGuard.ɵfac = function ProtectedGuard_Factory(t) { return new (t || ProtectedGuard)(ɵngcc0.ɵɵinject(AUTH_SERVICE), ɵngcc0.ɵɵinject(PUBLIC_FALLBACK_PAGE_URI), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
ProtectedGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProtectedGuard, factory: ProtectedGuard.ɵfac });
/** @nocollapse */
ProtectedGuard.ctorParameters = () => [
    { type: AuthService, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: String, decorators: [{ type: Inject, args: [PUBLIC_FALLBACK_PAGE_URI,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProtectedGuard, [{
        type: Injectable
    }], function () { return [{ type: AuthService, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [PUBLIC_FALLBACK_PAGE_URI]
            }] }, { type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.Router }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AuthInterceptor {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        /**
         * Is refresh token is being executed
         */
        this.refreshInProgress = false;
        /**
         * Notify all outstanding requests through this subject
         */
        this.refreshSubject = new Subject();
    }
    /**
     * Intercept an outgoing `HttpRequest`
     * @param {?} req
     * @param {?} delegate
     * @return {?}
     */
    intercept(req, delegate) {
        if (this.skipRequest(req)) {
            return delegate.handle(req);
        }
        return this.processIntercept(req, delegate);
    }
    /**
     * Process all the requests via custom interceptors.
     * @param {?} original
     * @param {?} delegate
     * @return {?}
     */
    processIntercept(original, delegate) {
        /** @type {?} */
        const clone = original.clone();
        return this.request(clone)
            .pipe(switchMap((req) => delegate.handle(req)), catchError((res) => this.responseError(clone, res)));
    }
    /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     * @param {?} req
     * @return {?}
     */
    request(req) {
        if (this.refreshInProgress) {
            return this.delayRequest(req);
        }
        return this.addToken(req);
    }
    /**
     * Failed request interceptor, check if it has to be processed with refresh
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    responseError(req, res) {
        /** @type {?} */
        const authService = this.injector.get(AUTH_SERVICE);
        /** @type {?} */
        const refreshShouldHappen = authService.refreshShouldHappen(res, req);
        if (refreshShouldHappen && !this.refreshInProgress) {
            this.refreshInProgress = true;
            authService
                .refreshToken()
                .subscribe(() => {
                this.refreshInProgress = false;
                this.refreshSubject.next(true);
            }, () => {
                this.refreshInProgress = false;
                this.refreshSubject.next(false);
            });
        }
        if (refreshShouldHappen && this.refreshInProgress) {
            return this.retryRequest(req, res);
        }
        return throwError(res);
    }
    /**
     * Add access token to headers or the request
     * @param {?} req
     * @return {?}
     */
    addToken(req) {
        /** @type {?} */
        const authService = this.injector.get(AUTH_SERVICE);
        return authService.getAccessToken()
            .pipe(map((token) => {
            if (token) {
                /** @type {?} */
                let setHeaders;
                if (typeof authService.getHeaders === 'function') {
                    setHeaders = authService.getHeaders(token);
                }
                else {
                    setHeaders = { Authorization: `Bearer ${token}` };
                }
                return req.clone({ setHeaders });
            }
            return req;
        }), first());
    }
    /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @return {?}
     */
    delayRequest(req) {
        return this.refreshSubject.pipe(first(), switchMap((status) => status ? this.addToken(req) : throwError(req)));
    }
    /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    retryRequest(req, res) {
        /** @type {?} */
        const http = this.injector.get(HttpClient);
        return this.refreshSubject.pipe(first(), switchMap((status) => status ? http.request(req) : throwError(res || req)));
    }
    /**
     * Checks if request must be skipped by interceptor.
     * @param {?} req
     * @return {?}
     */
    skipRequest(req) {
        /** @type {?} */
        const skipRequest = this.exec('skipRequest', req);
        /** @type {?} */
        const verifyRefreshToken = this.exec('verifyRefreshToken', req);
        // deprecated, will be removed soon
        /** @type {?} */
        const verifyTokenRequest = this.exec('verifyTokenRequest', req.url);
        return skipRequest || verifyRefreshToken || verifyTokenRequest;
    }
    /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     * @param {?} method
     * @param {...?} args
     * @return {?}
     */
    exec(method, ...args) {
        /** @type {?} */
        const authService = this.injector.get(AUTH_SERVICE);
        if (typeof authService[method] === 'function') {
            return authService[method](...args);
        }
    }
}
AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) { return new (t || AuthInterceptor)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
AuthInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AuthInterceptor, factory: AuthInterceptor.ɵfac });
/** @nocollapse */
AuthInterceptor.ctorParameters = () => [
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AuthModule {
}
AuthModule.ɵfac = function AuthModule_Factory(t) { return new (t || AuthModule)(); };
AuthModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AuthModule });
AuthModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        PublicGuard,
        ProtectedGuard,
        AuthInterceptor,
        {
            provide: HTTP_INTERCEPTORS,
            useClass: AuthInterceptor,
            multi: true
        }
    ] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthModule, [{
        type: NgModule,
        args: [{
                providers: [
                    PublicGuard,
                    ProtectedGuard,
                    AuthInterceptor,
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: AuthInterceptor,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { AuthService, PublicGuard, ProtectedGuard, AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI, PROTECTED_FALLBACK_PAGE_URI, AuthModule, AuthInterceptor as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,