/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Subject, throwError } from 'rxjs';
import { map, first, switchMap, catchError } from 'rxjs/operators';
import { AUTH_SERVICE } from './tokens';
import * as ɵngcc0 from '@angular/core';
export class AuthInterceptor {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        /**
         * Is refresh token is being executed
         */
        this.refreshInProgress = false;
        /**
         * Notify all outstanding requests through this subject
         */
        this.refreshSubject = new Subject();
    }
    /**
     * Intercept an outgoing `HttpRequest`
     * @param {?} req
     * @param {?} delegate
     * @return {?}
     */
    intercept(req, delegate) {
        if (this.skipRequest(req)) {
            return delegate.handle(req);
        }
        return this.processIntercept(req, delegate);
    }
    /**
     * Process all the requests via custom interceptors.
     * @param {?} original
     * @param {?} delegate
     * @return {?}
     */
    processIntercept(original, delegate) {
        /** @type {?} */
        const clone = original.clone();
        return this.request(clone)
            .pipe(switchMap((req) => delegate.handle(req)), catchError((res) => this.responseError(clone, res)));
    }
    /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     * @param {?} req
     * @return {?}
     */
    request(req) {
        if (this.refreshInProgress) {
            return this.delayRequest(req);
        }
        return this.addToken(req);
    }
    /**
     * Failed request interceptor, check if it has to be processed with refresh
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    responseError(req, res) {
        /** @type {?} */
        const authService = this.injector.get(AUTH_SERVICE);
        /** @type {?} */
        const refreshShouldHappen = authService.refreshShouldHappen(res, req);
        if (refreshShouldHappen && !this.refreshInProgress) {
            this.refreshInProgress = true;
            authService
                .refreshToken()
                .subscribe(() => {
                this.refreshInProgress = false;
                this.refreshSubject.next(true);
            }, () => {
                this.refreshInProgress = false;
                this.refreshSubject.next(false);
            });
        }
        if (refreshShouldHappen && this.refreshInProgress) {
            return this.retryRequest(req, res);
        }
        return throwError(res);
    }
    /**
     * Add access token to headers or the request
     * @param {?} req
     * @return {?}
     */
    addToken(req) {
        /** @type {?} */
        const authService = this.injector.get(AUTH_SERVICE);
        return authService.getAccessToken()
            .pipe(map((token) => {
            if (token) {
                /** @type {?} */
                let setHeaders;
                if (typeof authService.getHeaders === 'function') {
                    setHeaders = authService.getHeaders(token);
                }
                else {
                    setHeaders = { Authorization: `Bearer ${token}` };
                }
                return req.clone({ setHeaders });
            }
            return req;
        }), first());
    }
    /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @return {?}
     */
    delayRequest(req) {
        return this.refreshSubject.pipe(first(), switchMap((status) => status ? this.addToken(req) : throwError(req)));
    }
    /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    retryRequest(req, res) {
        /** @type {?} */
        const http = this.injector.get(HttpClient);
        return this.refreshSubject.pipe(first(), switchMap((status) => status ? http.request(req) : throwError(res || req)));
    }
    /**
     * Checks if request must be skipped by interceptor.
     * @param {?} req
     * @return {?}
     */
    skipRequest(req) {
        /** @type {?} */
        const skipRequest = this.exec('skipRequest', req);
        /** @type {?} */
        const verifyRefreshToken = this.exec('verifyRefreshToken', req);
        // deprecated, will be removed soon
        /** @type {?} */
        const verifyTokenRequest = this.exec('verifyTokenRequest', req.url);
        return skipRequest || verifyRefreshToken || verifyTokenRequest;
    }
    /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     * @param {?} method
     * @param {...?} args
     * @return {?}
     */
    exec(method, ...args) {
        /** @type {?} */
        const authService = this.injector.get(AUTH_SERVICE);
        if (typeof authService[method] === 'function') {
            return authService[method](...args);
        }
    }
}
AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) { return new (t || AuthInterceptor)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
AuthInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AuthInterceptor, factory: AuthInterceptor.ɵfac });
/** @nocollapse */
AuthInterceptor.ctorParameters = () => [
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();
if (false) {
    /**
     * Is refresh token is being executed
     * @type {?}
     */
    AuthInterceptor.prototype.refreshInProgress;
    /**
     * Notify all outstanding requests through this subject
     * @type {?}
     */
    AuthInterceptor.prototype.refreshSubject;
    /** @type {?} */
    AuthInterceptor.prototype.injector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,