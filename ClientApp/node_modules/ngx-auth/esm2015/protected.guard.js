/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Injectable, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { AuthService } from './auth.service';
import { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 *
 * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }
 *
 * @export
 * \@dynamic
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './auth.service';
export class ProtectedGuard {
    /**
     * @param {?} authService
     * @param {?} publicFallbackPageUri
     * @param {?} document
     * @param {?} router
     */
    constructor(authService, publicFallbackPageUri, document, router) {
        this.authService = authService;
        this.publicFallbackPageUri = publicFallbackPageUri;
        this.document = document;
        this.router = router;
    }
    /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    canActivate(_route, state) {
        return this.authService.isAuthorized()
            .pipe(map((isAuthorized) => {
            if (!isAuthorized && !this.isPublicPage(state)) {
                if (this.authService.setInterruptedUrl) {
                    this.authService.setInterruptedUrl(state.url);
                }
                this.navigate(this.publicFallbackPageUri);
                return false;
            }
            return true;
        }));
    }
    /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
    /**
     * Check, if current page is public fallback page
     * @param {?} state
     * @return {?}
     */
    isPublicPage(state) {
        return state.url === this.publicFallbackPageUri;
    }
    /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    navigate(url) {
        if (url.startsWith('http')) {
            this.document.location.href = url;
        }
        else {
            this.router.navigateByUrl(url);
        }
    }
}
ProtectedGuard.ɵfac = function ProtectedGuard_Factory(t) { return new (t || ProtectedGuard)(ɵngcc0.ɵɵinject(AUTH_SERVICE), ɵngcc0.ɵɵinject(PUBLIC_FALLBACK_PAGE_URI), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
ProtectedGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProtectedGuard, factory: ProtectedGuard.ɵfac });
/** @nocollapse */
ProtectedGuard.ctorParameters = () => [
    { type: AuthService, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: String, decorators: [{ type: Inject, args: [PUBLIC_FALLBACK_PAGE_URI,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProtectedGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.AuthService, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [PUBLIC_FALLBACK_PAGE_URI]
            }] }, { type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.Router }]; }, null); })();
if (false) {
    /** @type {?} */
    ProtectedGuard.prototype.authService;
    /** @type {?} */
    ProtectedGuard.prototype.publicFallbackPageUri;
    /** @type {?} */
    ProtectedGuard.prototype.document;
    /** @type {?} */
    ProtectedGuard.prototype.router;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdGVjdGVkLmd1YXJkLmpzIiwic291cmNlcyI6WyJuZ3gtYXV0aC9wcm90ZWN0ZWQuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQ0wsTUFBTSxFQUtQLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xFO0FBQ0c7QUFDK0U7QUFDOUQ7QUFDbEI7QUFDOEU7QUFDOUU7QUFDUTtBQUVWOzs7O0FBRUEsTUFBTSxPQUFPLGNBQWM7QUFBRztBQUFRO0FBQThCO0FBRy9DO0FBQTJCO0FBQ2xDO0FBQVEsSUFGcEIsWUFDK0IsV0FBd0IsRUFDWCxxQkFBNkIsRUFDcEMsUUFBa0IsRUFDN0MsTUFBYztBQUN2QixRQUo4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtBQUFDLFFBQ1osMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFRO0FBQUMsUUFDckMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtBQUFDLFFBQzlDLFdBQU0sR0FBTixNQUFNLENBQVE7QUFDMUIsSUFBSyxDQUFDO0FBQ047QUFFQztBQUNFO0FBRUg7QUFBd0I7QUFDakI7QUFBUSxJQUZOLFdBQVcsQ0FDaEIsTUFBOEIsRUFDOUIsS0FBMEI7QUFDM0IsUUFDQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFO0FBQzFDLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQXFCLEVBQUUsRUFBRTtBQUMxQyxZQUFRLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3hELGdCQUFVLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRTtBQUNsRCxvQkFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxRCxpQkFBVztBQUNYLGdCQUNVLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDcEQsZ0JBQ1UsT0FBTyxLQUFLLENBQUM7QUFDdkIsYUFBUztBQUNULFlBQ1EsT0FBTyxJQUFJLENBQUM7QUFDcEIsUUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsSUFBRSxDQUFDO0FBQ0g7QUFFQztBQUNFO0FBQ2tCO0FBQ0g7QUFDaEI7QUFBUSxJQUZELGdCQUFnQixDQUNyQixLQUE2QixFQUM3QixLQUEwQjtBQUMzQixRQUNDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUMsSUFBRSxDQUFDO0FBQ0g7QUFFQztBQUNFO0FBQ2tCO0FBQW1CO0FBQVEsSUFBdEMsWUFBWSxDQUFDLEtBQTBCO0FBQUksUUFDakQsT0FBTyxLQUFLLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztBQUNwRCxJQUFFLENBQUM7QUFDSDtBQUVDO0FBQ0U7QUFDZ0I7QUFBbUI7QUFDaEMsSUFESSxRQUFRLENBQUMsR0FBVztBQUFJLFFBQzlCLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUNoQyxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7QUFDeEMsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDswQ0E1REMsVUFBVTt3SEFDVDtBQUFDO0FBQW1CO0FBQXdDLFlBYnJELFdBQVcsdUJBZ0JmLE1BQU0sU0FBQyxZQUFZO0FBQVMseUNBQzVCLE1BQU0sU0FBQyx3QkFBd0I7QUFBUyxZQUNJLFFBQVEsdUJBQXBELE1BQU0sU0FBQyxRQUFRO0FBQVMsWUEzQjNCLE1BQU07QUFDUDs7Ozs7Ozs7Ozs7OzJEQUFFO0FBQUM7QUFDRjtBQUNDLElBc0JDLHFDQUFxRDtBQUFDO0FBQ3RDLElBQWhCLCtDQUF1RTtBQUFDO0FBQ3hELElBQWhCLGtDQUFxRDtBQUFDO0FBQ3RDLElBQWhCLGdDQUFzQjtBQUMxQjtBQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBSb3V0ZXIsXG4gIENhbkFjdGl2YXRlLFxuICBDYW5BY3RpdmF0ZUNoaWxkLFxuICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90XG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgQVVUSF9TRVJWSUNFLCBQVUJMSUNfRkFMTEJBQ0tfUEFHRV9VUkkgfSBmcm9tICcuL3Rva2Vucyc7XG5cbi8qKlxuICogR3VhcmQsIGNoZWNrcyBhY2Nlc3MgdG9rZW4gYXZhaWxhYmlsaXR5IGFuZCBhbGxvd3Mgb3IgZGlzYWxsb3dzIGFjY2VzcyB0byBwYWdlLFxuICogYW5kIHJlZGlyZWN0cyBvdXRcbiAqXG4gKiB1c2FnZTogeyBwYXRoOiAndGVzdCcsIGNvbXBvbmVudDogVGVzdENvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFsgQXV0aEd1YXJkIF0gfVxuICpcbiAqIEBleHBvcnRcbiAqIEBkeW5hbWljXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm90ZWN0ZWRHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEFVVEhfU0VSVklDRSlwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSxcbiAgICBASW5qZWN0KFBVQkxJQ19GQUxMQkFDS19QQUdFX1VSSSkgcHJpdmF0ZSBwdWJsaWNGYWxsYmFja1BhZ2VVcmk6IHN0cmluZyxcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50OiBEb2N1bWVudCxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyXG4gICkge31cblxuICAvKipcbiAgICogQ2FuQWN0aXZhdGUgaGFuZGxlclxuICAgKi9cbiAgcHVibGljIGNhbkFjdGl2YXRlKFxuICAgIF9yb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5hdXRoU2VydmljZS5pc0F1dGhvcml6ZWQoKVxuICAgICAgLnBpcGUobWFwKChpc0F1dGhvcml6ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgaWYgKCFpc0F1dGhvcml6ZWQgJiYgIXRoaXMuaXNQdWJsaWNQYWdlKHN0YXRlKSkge1xuICAgICAgICAgIGlmICh0aGlzLmF1dGhTZXJ2aWNlLnNldEludGVycnVwdGVkVXJsKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlLnNldEludGVycnVwdGVkVXJsKHN0YXRlLnVybCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5uYXZpZ2F0ZSh0aGlzLnB1YmxpY0ZhbGxiYWNrUGFnZVVyaSk7XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5BY3RpdmF0ZUNoaWxkIGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBjYW5BY3RpdmF0ZUNoaWxkKFxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmNhbkFjdGl2YXRlKHJvdXRlLCBzdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2ssIGlmIGN1cnJlbnQgcGFnZSBpcyBwdWJsaWMgZmFsbGJhY2sgcGFnZVxuICAgKi9cbiAgcHJpdmF0ZSBpc1B1YmxpY1BhZ2Uoc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc3RhdGUudXJsID09PSB0aGlzLnB1YmxpY0ZhbGxiYWNrUGFnZVVyaTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOYXZpZ2F0ZSBhd2F5IGZyb20gdGhlIGFwcCAvIHBhdGhcbiAgICovXG4gIHByaXZhdGUgbmF2aWdhdGUodXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgdGhpcy5kb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHVybCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==