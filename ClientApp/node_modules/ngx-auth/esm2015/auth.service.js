/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Essential service for authentication
 * @abstract
 */
export class AuthService {
}
if (false) {
    /**
     * Check, if user already authorized.
     * Should return Observable with true or false values
     * @abstract
     * @return {?}
     */
    AuthService.prototype.isAuthorized = function () { };
    /**
     * Get access token
     * Should return access token in Observable from e.g.
     * localStorage
     * @abstract
     * @return {?}
     */
    AuthService.prototype.getAccessToken = function () { };
    /**
     * Function, that should perform refresh token
     * Should be successfully completed so interceptor
     * can execute pending requests or retry original one
     * @abstract
     * @return {?}
     */
    AuthService.prototype.refreshToken = function () { };
    /**
     * Function, checks response of failed request to determine,
     * whether token be refreshed or not.
     *
     * Essentially checks status
     * @abstract
     * @param {?} response
     * @param {?=} request
     * @return {?}
     */
    AuthService.prototype.refreshShouldHappen = function (response, request) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.verifyRefreshToken = function (request) { };
    /**
     * Checks if request must be skipped by interceptor.
     * Useful for requests such as request token which doesn't require token in headers
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.skipRequest = function (request) { };
    /**
     * Add token to headers, dependent on server
     * set-up, by default adds a bearer token.
     * Called by interceptor.
     * To change behavior, override this method.
     * @abstract
     * @param {?} token
     * @return {?}
     */
    AuthService.prototype.getHeaders = function (token) { };
    /**
     * Saves last interrupted url inside of the service for further reusage,
     * e.g. restoring interrupted page after logging in
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.setInterruptedUrl = function (url) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @deprecated Due to illogical meaning/functionality this method is deprecated
     * @see verifyRefreshToken
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.verifyTokenRequest = function (url) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgvIiwic291cmNlcyI6WyJhdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNQSxNQUFNLE9BQWdCLFdBQVc7Q0ErRGhDOzs7Ozs7OztJQXpEQyxxREFBb0Q7Ozs7Ozs7O0lBT3BELHVEQUFxRDs7Ozs7Ozs7SUFPckQscURBQWdEOzs7Ozs7Ozs7OztJQVFoRCw2RUFBc0c7Ozs7Ozs7O0lBTXRHLGtFQUF3RTs7Ozs7Ozs7SUFNeEUsMkRBQWlFOzs7Ozs7Ozs7O0lBUWpFLHdEQUFrRjs7Ozs7Ozs7SUFNbEYsNkRBQXNEOzs7Ozs7Ozs7O0lBUXRELDhEQUEwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBFc3NlbnRpYWwgc2VydmljZSBmb3IgYXV0aGVudGljYXRpb25cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEF1dGhTZXJ2aWNlIHtcblxuICAvKipcbiAgICogQ2hlY2ssIGlmIHVzZXIgYWxyZWFkeSBhdXRob3JpemVkLlxuICAgKiBTaG91bGQgcmV0dXJuIE9ic2VydmFibGUgd2l0aCB0cnVlIG9yIGZhbHNlIHZhbHVlc1xuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGlzQXV0aG9yaXplZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBHZXQgYWNjZXNzIHRva2VuXG4gICAqIFNob3VsZCByZXR1cm4gYWNjZXNzIHRva2VuIGluIE9ic2VydmFibGUgZnJvbSBlLmcuXG4gICAqIGxvY2FsU3RvcmFnZVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEFjY2Vzc1Rva2VuKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcblxuICAvKipcbiAgICogRnVuY3Rpb24sIHRoYXQgc2hvdWxkIHBlcmZvcm0gcmVmcmVzaCB0b2tlblxuICAgKiBTaG91bGQgYmUgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZCBzbyBpbnRlcmNlcHRvclxuICAgKiBjYW4gZXhlY3V0ZSBwZW5kaW5nIHJlcXVlc3RzIG9yIHJldHJ5IG9yaWdpbmFsIG9uZVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlZnJlc2hUb2tlbigpOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uLCBjaGVja3MgcmVzcG9uc2Ugb2YgZmFpbGVkIHJlcXVlc3QgdG8gZGV0ZXJtaW5lLFxuICAgKiB3aGV0aGVyIHRva2VuIGJlIHJlZnJlc2hlZCBvciBub3QuXG4gICAqXG4gICAqIEVzc2VudGlhbGx5IGNoZWNrcyBzdGF0dXNcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWZyZXNoU2hvdWxkSGFwcGVuKHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSwgcmVxdWVzdD86IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBWZXJpZnkgdGhhdCBvdXRnb2luZyByZXF1ZXN0IGlzIHJlZnJlc2gtdG9rZW4sXG4gICAqIHNvIGludGVyY2VwdG9yIHdvbid0IGludGVyY2VwdCB0aGlzIHJlcXVlc3RcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB2ZXJpZnlSZWZyZXNoVG9rZW4/KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcmVxdWVzdCBtdXN0IGJlIHNraXBwZWQgYnkgaW50ZXJjZXB0b3IuXG4gICAqIFVzZWZ1bCBmb3IgcmVxdWVzdHMgc3VjaCBhcyByZXF1ZXN0IHRva2VuIHdoaWNoIGRvZXNuJ3QgcmVxdWlyZSB0b2tlbiBpbiBoZWFkZXJzXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3Qgc2tpcFJlcXVlc3Q/KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBZGQgdG9rZW4gdG8gaGVhZGVycywgZGVwZW5kZW50IG9uIHNlcnZlclxuICAgKiBzZXQtdXAsIGJ5IGRlZmF1bHQgYWRkcyBhIGJlYXJlciB0b2tlbi5cbiAgICogQ2FsbGVkIGJ5IGludGVyY2VwdG9yLlxuICAgKiBUbyBjaGFuZ2UgYmVoYXZpb3IsIG92ZXJyaWRlIHRoaXMgbWV0aG9kLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEhlYWRlcnM/KHRva2VuOiBzdHJpbmcpOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9O1xuXG4gIC8qKlxuICAgKiBTYXZlcyBsYXN0IGludGVycnVwdGVkIHVybCBpbnNpZGUgb2YgdGhlIHNlcnZpY2UgZm9yIGZ1cnRoZXIgcmV1c2FnZSxcbiAgICogZS5nLiByZXN0b3JpbmcgaW50ZXJydXB0ZWQgcGFnZSBhZnRlciBsb2dnaW5nIGluXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3Qgc2V0SW50ZXJydXB0ZWRVcmw/KHVybDogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogVmVyaWZ5IHRoYXQgb3V0Z29pbmcgcmVxdWVzdCBpcyByZWZyZXNoLXRva2VuLFxuICAgKiBzbyBpbnRlcmNlcHRvciB3b24ndCBpbnRlcmNlcHQgdGhpcyByZXF1ZXN0XG4gICAqIEBkZXByZWNhdGVkIER1ZSB0byBpbGxvZ2ljYWwgbWVhbmluZy9mdW5jdGlvbmFsaXR5IHRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWRcbiAgICogQHNlZSB2ZXJpZnlSZWZyZXNoVG9rZW5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB2ZXJpZnlUb2tlblJlcXVlc3Q/KHVybDogc3RyaW5nKTogYm9vbGVhbjtcbn1cbiJdfQ==