/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Subject, throwError } from 'rxjs';
import { map, first, switchMap, catchError } from 'rxjs/operators';
import { AUTH_SERVICE } from './tokens';
import * as ɵngcc0 from '@angular/core';
var AuthInterceptor = /** @class */ (function () {
    function AuthInterceptor(injector) {
        this.injector = injector;
        /**
         * Is refresh token is being executed
         */
        this.refreshInProgress = false;
        /**
         * Notify all outstanding requests through this subject
         */
        this.refreshSubject = new Subject();
    }
    /**
     * Intercept an outgoing `HttpRequest`
     */
    /**
     * Intercept an outgoing `HttpRequest`
     * @param {?} req
     * @param {?} delegate
     * @return {?}
     */
    AuthInterceptor.prototype.intercept = /**
     * Intercept an outgoing `HttpRequest`
     * @param {?} req
     * @param {?} delegate
     * @return {?}
     */
    function (req, delegate) {
        if (this.skipRequest(req)) {
            return delegate.handle(req);
        }
        return this.processIntercept(req, delegate);
    };
    /**
     * Process all the requests via custom interceptors.
     */
    /**
     * Process all the requests via custom interceptors.
     * @param {?} original
     * @param {?} delegate
     * @return {?}
     */
    AuthInterceptor.prototype.processIntercept = /**
     * Process all the requests via custom interceptors.
     * @param {?} original
     * @param {?} delegate
     * @return {?}
     */
    function (original, delegate) {
        var _this = this;
        /** @type {?} */
        var clone = original.clone();
        return this.request(clone)
            .pipe(switchMap(function (req) { return delegate.handle(req); }), catchError(function (res) { return _this.responseError(clone, res); }));
    };
    /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     */
    /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.request = /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     * @param {?} req
     * @return {?}
     */
    function (req) {
        if (this.refreshInProgress) {
            return this.delayRequest(req);
        }
        return this.addToken(req);
    };
    /**
     * Failed request interceptor, check if it has to be processed with refresh
     */
    /**
     * Failed request interceptor, check if it has to be processed with refresh
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    AuthInterceptor.prototype.responseError = /**
     * Failed request interceptor, check if it has to be processed with refresh
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    function (req, res) {
        var _this = this;
        /** @type {?} */
        var authService = this.injector.get(AUTH_SERVICE);
        /** @type {?} */
        var refreshShouldHappen = authService.refreshShouldHappen(res, req);
        if (refreshShouldHappen && !this.refreshInProgress) {
            this.refreshInProgress = true;
            authService
                .refreshToken()
                .subscribe(function () {
                _this.refreshInProgress = false;
                _this.refreshSubject.next(true);
            }, function () {
                _this.refreshInProgress = false;
                _this.refreshSubject.next(false);
            });
        }
        if (refreshShouldHappen && this.refreshInProgress) {
            return this.retryRequest(req, res);
        }
        return throwError(res);
    };
    /**
     * Add access token to headers or the request
     */
    /**
     * Add access token to headers or the request
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.addToken = /**
     * Add access token to headers or the request
     * @param {?} req
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var authService = this.injector.get(AUTH_SERVICE);
        return authService.getAccessToken()
            .pipe(map(function (token) {
            if (token) {
                /** @type {?} */
                var setHeaders = void 0;
                if (typeof authService.getHeaders === 'function') {
                    setHeaders = authService.getHeaders(token);
                }
                else {
                    setHeaders = { Authorization: "Bearer " + token };
                }
                return req.clone({ setHeaders: setHeaders });
            }
            return req;
        }), first());
    };
    /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     */
    /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.delayRequest = /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var _this = this;
        return this.refreshSubject.pipe(first(), switchMap(function (status) {
            return status ? _this.addToken(req) : throwError(req);
        }));
    };
    /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     */
    /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    AuthInterceptor.prototype.retryRequest = /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    function (req, res) {
        /** @type {?} */
        var http = this.injector.get(HttpClient);
        return this.refreshSubject.pipe(first(), switchMap(function (status) {
            return status ? http.request(req) : throwError(res || req);
        }));
    };
    /**
     * Checks if request must be skipped by interceptor.
     */
    /**
     * Checks if request must be skipped by interceptor.
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.skipRequest = /**
     * Checks if request must be skipped by interceptor.
     * @param {?} req
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var skipRequest = this.exec('skipRequest', req);
        /** @type {?} */
        var verifyRefreshToken = this.exec('verifyRefreshToken', req);
        // deprecated, will be removed soon
        /** @type {?} */
        var verifyTokenRequest = this.exec('verifyTokenRequest', req.url);
        return skipRequest || verifyRefreshToken || verifyTokenRequest;
    };
    /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     */
    /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     * @param {?} method
     * @param {...?} args
     * @return {?}
     */
    AuthInterceptor.prototype.exec = /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     * @param {?} method
     * @param {...?} args
     * @return {?}
     */
    function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var authService = this.injector.get(AUTH_SERVICE);
        if (typeof authService[method] === 'function') {
            return authService[method].apply(authService, tslib_1.__spread(args));
        }
    };
    /** @nocollapse */
    AuthInterceptor.ctorParameters = function () { return [
        { type: Injector }
    ]; };
AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) { return new (t || AuthInterceptor)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
AuthInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AuthInterceptor, factory: function (t) { return AuthInterceptor.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();
    return AuthInterceptor;
}());
export { AuthInterceptor };
if (false) {
    /**
     * Is refresh token is being executed
     * @type {?}
     */
    AuthInterceptor.prototype.refreshInProgress;
    /**
     * Notify all outstanding requests through this subject
     * @type {?}
     */
    AuthInterceptor.prototype.refreshSubject;
    /** @type {?} */
    AuthInterceptor.prototype.injector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZXMiOlsibmd4LWF1dGgvYXV0aC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFDTCxVQUFVLEVBTVgsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFFeEM7QUFDcUMsSUFZbkMseUJBQW9CLFFBQWtCO0FBQUksUUFBdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtBQUFDO0FBR3hDO0FBRUQ7QUFBWSxRQVpGLHNCQUFpQixHQUFHLEtBQUssQ0FBQztBQUNwQztBQUVLO0FBRUE7QUFBWSxRQUFQLG1CQUFjLEdBQXFCLElBQUksT0FBTyxFQUFXLENBQUM7QUFDcEUsSUFDMkMsQ0FBQztBQUM1QyxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0w7QUFBUTtBQUVKO0FBQ0o7QUFBMkI7QUFDZjtBQUFRLElBSlgsbUNBQVM7QUFDYjtBQUNnQjtBQUNKO0FBQ1A7QUFBbUI7QUFDekIsSUFMRixVQUNFLEdBQXFCLEVBQ3JCLFFBQXFCO0FBQ3RCLFFBQ0MsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQy9CLFlBQU0sT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLFNBQUs7QUFDTCxRQUNJLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRCxJQUFFLENBQUM7QUFFSCxJQUFFO0FBQ0Y7QUFD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QjtBQUMzQjtBQUN4QjtBQUNFLElBUFEsOEJBQUk7QUFBTztBQUVwQjtBQUVzQztBQUM1QjtBQUEwQjtBQUtyQztBQUFRLElBVk4sVUFBYSxNQUFjO0FBQUksUUFBRixjQUFjO0FBQUMsYUFBZixVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO0FBQzdDLFlBRCtCLDZCQUFjO0FBQUM7QUFDdkM7QUFBeUIsWUFBdEIsV0FBVyxHQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFjLFlBQVksQ0FBQztBQUNsRCxRQUNJLElBQUksT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ25ELFlBQU0sT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQW5CLFdBQVcsbUJBQVksSUFBSSxHQUFFO0FBQzFDLFNBQUs7QUFDTCxJQUFFLENBQUMsQ0FoTEc7QUFBQzs0QkFETixVQUFVLHRDQUNtQjtBQUdMLGdCQW5CSixRQUFRO0FBQUc7Ozs7O3lFQUFTO0FBQUMsSUFrTTFDLHNCQUFDO0FBQ0EsQ0FEQSxBQW5MRCxJQW1MQztBQUNELFNBbkxhLGVBQWU7QUFBSTtBQUFhO0FBQVE7QUFHdkI7QUFFN0I7QUFBUSxJQUFQLDRDQUFrQztBQUNwQztBQUVDO0FBQ0U7QUFDVztBQUFRLElBQXBCLHlDQUFrRTtBQUNwRTtBQUNvQixJQUFOLG1DQUEwQjtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgSHR0cENsaWVudCxcbiAgSHR0cEV2ZW50LFxuICBIdHRwSW50ZXJjZXB0b3IsXG4gIEh0dHBIYW5kbGVyLFxuICBIdHRwUmVxdWVzdCxcbiAgSHR0cEVycm9yUmVzcG9uc2Vcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBmaXJzdCwgc3dpdGNoTWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4vYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IEFVVEhfU0VSVklDRSB9IGZyb20gJy4vdG9rZW5zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgLyoqXG4gICAqIElzIHJlZnJlc2ggdG9rZW4gaXMgYmVpbmcgZXhlY3V0ZWRcbiAgICovXG4gIHByaXZhdGUgcmVmcmVzaEluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAvKipcbiAgICogTm90aWZ5IGFsbCBvdXRzdGFuZGluZyByZXF1ZXN0cyB0aHJvdWdoIHRoaXMgc3ViamVjdFxuICAgKi9cbiAgcHJpdmF0ZSByZWZyZXNoU3ViamVjdDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XG5cbiAgLyoqXG4gICAqIEludGVyY2VwdCBhbiBvdXRnb2luZyBgSHR0cFJlcXVlc3RgXG4gICAqL1xuICBwdWJsaWMgaW50ZXJjZXB0KFxuICAgIHJlcTogSHR0cFJlcXVlc3Q8YW55PixcbiAgICBkZWxlZ2F0ZTogSHR0cEhhbmRsZXJcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGlmICh0aGlzLnNraXBSZXF1ZXN0KHJlcSkpIHtcbiAgICAgIHJldHVybiBkZWxlZ2F0ZS5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzSW50ZXJjZXB0KHJlcSwgZGVsZWdhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgYWxsIHRoZSByZXF1ZXN0cyB2aWEgY3VzdG9tIGludGVyY2VwdG9ycy5cbiAgICovXG4gIHByaXZhdGUgcHJvY2Vzc0ludGVyY2VwdChcbiAgICBvcmlnaW5hbDogSHR0cFJlcXVlc3Q8YW55PixcbiAgICBkZWxlZ2F0ZTogSHR0cEhhbmRsZXJcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGNvbnN0IGNsb25lOiBIdHRwUmVxdWVzdDxhbnk+ID0gb3JpZ2luYWwuY2xvbmUoKTtcblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoY2xvbmUpXG4gICAgICAucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pID0+IGRlbGVnYXRlLmhhbmRsZShyZXEpKSxcbiAgICAgICAgY2F0Y2hFcnJvcigocmVzOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4gdGhpcy5yZXNwb25zZUVycm9yKGNsb25lLCByZXMpKVxuICAgICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IGludGVyY2VwdG9yLiBEZWxheXMgcmVxdWVzdCBpZiByZWZyZXNoIGlzIGluIHByb2dyZXNzXG4gICAqIG90aGVyd2lzZSBhZGRzIHRva2VuIHRvIHRoZSBoZWFkZXJzXG4gICAqL1xuICBwcml2YXRlIHJlcXVlc3QocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogT2JzZXJ2YWJsZTxIdHRwUmVxdWVzdDxhbnk+PiB7XG4gICAgaWYgKHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGF5UmVxdWVzdChyZXEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmFkZFRva2VuKHJlcSk7XG4gIH1cblxuICAvKipcbiAgICogRmFpbGVkIHJlcXVlc3QgaW50ZXJjZXB0b3IsIGNoZWNrIGlmIGl0IGhhcyB0byBiZSBwcm9jZXNzZWQgd2l0aCByZWZyZXNoXG4gICAqL1xuICBwcml2YXRlIHJlc3BvbnNlRXJyb3IoXG4gICAgcmVxOiBIdHRwUmVxdWVzdDxhbnk+LFxuICAgIHJlczogSHR0cEVycm9yUmVzcG9uc2VcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGNvbnN0IGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldDxBdXRoU2VydmljZT4oQVVUSF9TRVJWSUNFKTtcbiAgICBjb25zdCByZWZyZXNoU2hvdWxkSGFwcGVuOiBib29sZWFuID1cbiAgICAgIGF1dGhTZXJ2aWNlLnJlZnJlc2hTaG91bGRIYXBwZW4ocmVzLCByZXEpO1xuXG4gICAgaWYgKHJlZnJlc2hTaG91bGRIYXBwZW4gJiYgIXRoaXMucmVmcmVzaEluUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MgPSB0cnVlO1xuXG4gICAgICBhdXRoU2VydmljZVxuICAgICAgICAucmVmcmVzaFRva2VuKClcbiAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hTdWJqZWN0Lm5leHQoZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAocmVmcmVzaFNob3VsZEhhcHBlbiAmJiB0aGlzLnJlZnJlc2hJblByb2dyZXNzKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXRyeVJlcXVlc3QocmVxLCByZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aHJvd0Vycm9yKHJlcyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFjY2VzcyB0b2tlbiB0byBoZWFkZXJzIG9yIHRoZSByZXF1ZXN0XG4gICAqL1xuICBwcml2YXRlIGFkZFRva2VuKHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cFJlcXVlc3Q8YW55Pj4ge1xuICAgIGNvbnN0IGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldDxBdXRoU2VydmljZT4oQVVUSF9TRVJWSUNFKTtcblxuICAgIHJldHVybiBhdXRoU2VydmljZS5nZXRBY2Nlc3NUb2tlbigpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKCh0b2tlbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBsZXQgc2V0SGVhZGVyczogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW10gfTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhdXRoU2VydmljZS5nZXRIZWFkZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHNldEhlYWRlcnMgPSBhdXRoU2VydmljZS5nZXRIZWFkZXJzKHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNldEhlYWRlcnMgPSB7IEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbn1gIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXEuY2xvbmUoeyBzZXRIZWFkZXJzIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXE7XG4gICAgICAgIH0pLFxuICAgICAgICBmaXJzdCgpXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGF5IHJlcXVlc3QsIGJ5IHN1YnNjcmliaW5nIG9uIHJlZnJlc2ggZXZlbnQsIG9uY2UgaXQgZmluaXNoZWQsIHByb2Nlc3MgaXRcbiAgICogb3RoZXJ3aXNlIHRocm93IGVycm9yXG4gICAqL1xuICBwcml2YXRlIGRlbGF5UmVxdWVzdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBPYnNlcnZhYmxlPEh0dHBSZXF1ZXN0PGFueT4+IHtcbiAgICByZXR1cm4gdGhpcy5yZWZyZXNoU3ViamVjdC5waXBlKFxuICAgICAgZmlyc3QoKSxcbiAgICAgIHN3aXRjaE1hcCgoc3RhdHVzOiBib29sZWFuKSA9PlxuICAgICAgICBzdGF0dXMgPyB0aGlzLmFkZFRva2VuKHJlcSkgOiB0aHJvd0Vycm9yKHJlcSlcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJ5IHJlcXVlc3QsIGJ5IHN1YnNjcmliaW5nIG9uIHJlZnJlc2ggZXZlbnQsIG9uY2UgaXQgZmluaXNoZWQsIHByb2Nlc3MgaXRcbiAgICogb3RoZXJ3aXNlIHRocm93IGVycm9yXG4gICAqL1xuICBwcml2YXRlIHJldHJ5UmVxdWVzdChcbiAgICByZXE6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgcmVzOiBIdHRwRXJyb3JSZXNwb25zZVxuICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgY29uc3QgaHR0cDogSHR0cENsaWVudCA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldDxIdHRwQ2xpZW50PihIdHRwQ2xpZW50KTtcblxuICAgIHJldHVybiB0aGlzLnJlZnJlc2hTdWJqZWN0LnBpcGUoXG4gICAgICBmaXJzdCgpLFxuICAgICAgc3dpdGNoTWFwKChzdGF0dXM6IGJvb2xlYW4pID0+XG4gICAgICAgIHN0YXR1cyA/IGh0dHAucmVxdWVzdChyZXEpIDogdGhyb3dFcnJvcihyZXMgfHwgcmVxKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHJlcXVlc3QgbXVzdCBiZSBza2lwcGVkIGJ5IGludGVyY2VwdG9yLlxuICAgKi9cbiAgcHJpdmF0ZSBza2lwUmVxdWVzdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pIHtcbiAgICBjb25zdCBza2lwUmVxdWVzdCA9IHRoaXMuZXhlYygnc2tpcFJlcXVlc3QnLCByZXEpO1xuICAgIGNvbnN0IHZlcmlmeVJlZnJlc2hUb2tlbiA9IHRoaXMuZXhlYygndmVyaWZ5UmVmcmVzaFRva2VuJywgcmVxKTtcblxuICAgIC8vIGRlcHJlY2F0ZWQsIHdpbGwgYmUgcmVtb3ZlZCBzb29uXG4gICAgY29uc3QgdmVyaWZ5VG9rZW5SZXF1ZXN0ID0gdGhpcy5leGVjKCd2ZXJpZnlUb2tlblJlcXVlc3QnLCByZXEudXJsKTtcblxuICAgIHJldHVybiBza2lwUmVxdWVzdCB8fCB2ZXJpZnlSZWZyZXNoVG9rZW4gfHwgdmVyaWZ5VG9rZW5SZXF1ZXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWMgb3B0aW9uYWwgbWV0aG9kLCB3aWxsIGJlIHJlbW92ZWQgaW4gdXBjb21pbmcgdXBkYXRlcy5cbiAgICogVGVtcCBtZXRob2QgdW50aWwgYHZlcmlmeVRva2VuUmVxdWVzdGAgd2lsbCBiZSBjb21wbGV0ZWx5IHJlcGxhY2VkIHdpdGggc2tpcFJlcXVlc3RcbiAgICovXG4gIHByaXZhdGUgZXhlYyhtZXRob2Q6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UgPVxuICAgICAgdGhpcy5pbmplY3Rvci5nZXQ8QXV0aFNlcnZpY2U+KEFVVEhfU0VSVklDRSk7XG5cbiAgICBpZiAodHlwZW9mIGF1dGhTZXJ2aWNlW21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBhdXRoU2VydmljZVttZXRob2RdKC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=