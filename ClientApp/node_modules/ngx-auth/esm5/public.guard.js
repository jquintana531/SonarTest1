/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Injectable, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { AuthService } from './auth.service';
import { AUTH_SERVICE, PROTECTED_FALLBACK_PAGE_URI } from './tokens';
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 *
 * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }
 *
 * @export
 * \@dynamic
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './auth.service';
var PublicGuard = /** @class */ (function () {
    function PublicGuard(authService, protectedFallbackPageUri, document, router) {
        this.authService = authService;
        this.protectedFallbackPageUri = protectedFallbackPageUri;
        this.document = document;
        this.router = router;
    }
    /**
     * CanActivate handler
     */
    /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    PublicGuard.prototype.canActivate = /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    function (_route, state) {
        var _this = this;
        return this.authService.isAuthorized()
            .pipe(map(function (isAuthorized) {
            if (isAuthorized && !_this.isProtectedPage(state)) {
                _this.navigate(_this.protectedFallbackPageUri);
                return false;
            }
            return true;
        }));
    };
    /**
     * CanActivateChild handler
     */
    /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    PublicGuard.prototype.canActivateChild = /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.canActivate(route, state);
    };
    /**
     * Check, if current page is protected fallback page
     */
    /**
     * Check, if current page is protected fallback page
     * @param {?} state
     * @return {?}
     */
    PublicGuard.prototype.isProtectedPage = /**
     * Check, if current page is protected fallback page
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.url === this.protectedFallbackPageUri;
    };
    /**
     * Navigate away from the app / path
     */
    /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    PublicGuard.prototype.navigate = /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url.startsWith('http')) {
            this.document.location.href = url;
        }
        else {
            this.router.navigateByUrl(url);
        }
    };
    /** @nocollapse */
    PublicGuard.ctorParameters = function () { return [
        { type: AuthService, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
        { type: String, decorators: [{ type: Inject, args: [PROTECTED_FALLBACK_PAGE_URI,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Router }
    ]; };
PublicGuard.ɵfac = function PublicGuard_Factory(t) { return new (t || PublicGuard)(ɵngcc0.ɵɵinject(AUTH_SERVICE), ɵngcc0.ɵɵinject(PROTECTED_FALLBACK_PAGE_URI), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
PublicGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PublicGuard, factory: function (t) { return PublicGuard.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PublicGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.AuthService, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [PROTECTED_FALLBACK_PAGE_URI]
            }] }, { type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.Router }]; }, null); })();
    return PublicGuard;
}());
export { PublicGuard };
if (false) {
    /** @type {?} */
    PublicGuard.prototype.authService;
    /** @type {?} */
    PublicGuard.prototype.protectedFallbackPageUri;
    /** @type {?} */
    PublicGuard.prototype.document;
    /** @type {?} */
    PublicGuard.prototype.router;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLmd1YXJkLmpzIiwic291cmNlcyI6WyJuZ3gtYXV0aC9wdWJsaWMuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBR0wsTUFBTSxFQUdQLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLDJCQUEyQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3JFO0FBQ0c7QUFDK0U7QUFDOUQ7QUFDbEI7QUFDZ0Y7QUFDaEY7QUFDUTtBQUVWOzs7O0FBQ0E7QUFDaUMsSUFFL0IscUJBQ2dDLFdBQXdCLEVBQ1Qsd0JBQWdDLEVBQzFDLFFBQWtCLEVBQzdDLE1BQWM7QUFDdkIsUUFKK0IsZ0JBQVcsR0FBWCxXQUFXLENBQWE7QUFBQyxRQUNWLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBUTtBQUFDLFFBQzNDLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBQyxRQUM5QyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQzFCLElBQUssQ0FBQztBQUNOLElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTDtBQUFRO0FBQ0s7QUFDWDtBQUF3QjtBQUNaO0FBQVEsSUFIYixpQ0FBVztBQUNmO0FBQTJCO0FBQ1g7QUFDUDtBQUNSO0FBQVEsSUFKWixVQUNFLE1BQThCLEVBQzlCLEtBQTBCO0FBQzNCLFFBSEQsaUJBY0M7QUFDSCxRQVhJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUU7QUFDMUMsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsWUFBcUI7QUFBSSxZQUNsQyxJQUFJLFlBQVksSUFBSSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUQsZ0JBQVUsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUN2RCxnQkFDVSxPQUFPLEtBQUssQ0FBQztBQUN2QixhQUFTO0FBQ1QsWUFDUSxPQUFPLElBQUksQ0FBQztBQUNwQixRQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDVixJQUFFLENBQUM7QUFFSCxJQUFFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0w7QUFBUTtBQUNLO0FBQ1g7QUFBd0I7QUFDWjtBQUFRLElBSGIsc0NBQWdCO0FBQ3BCO0FBQ0g7QUFBd0I7QUFDUDtBQUNSO0FBQVEsSUFKakIsVUFDRSxLQUE2QixFQUM3QixLQUEwQjtBQUMzQixRQUNDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUMsSUFBRSxDQUFDO0FBRUgsSUFBRTtBQUNGO0FBQ0UsT0FBRztBQUNMO0FBQVE7QUFDUjtBQUF3QjtBQUFtQjtBQUFRLElBRHpDLHFDQUFlO0FBQU87QUFDUjtBQUF3QjtBQUloRDtBQUFRLElBTE4sVUFBd0IsS0FBMEI7QUFBSSxRQUNwRCxPQUFPLEtBQUssQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLHdCQUF3QixDQUFDO0FBQ3ZELElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFLE9BQUc7QUFDTDtBQUFRO0FBQ0M7QUFBc0I7QUFDZjtBQUFRLElBRmQsOEJBQVE7QUFBTztBQUNDO0FBQ1o7QUFBbUI7QUFDakMsSUFIRSxVQUFpQixHQUFXO0FBQUksUUFDOUIsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ2hDLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUN4QyxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckMsU0FBSztBQUNMLElBQUUsQ0FBQyxDQXRERztBQUFDO3dCQUROLFVBQVUsbENBQ21CO0FBRzVCLGdCQWhCTyxXQUFXLHVCQWdCZixNQUFNLFNBQUMsWUFBWTtBQUFTLDZDQUM1QixNQUFNLFNBQUMsMkJBQTJCO0FBQVMsZ0JBQ0MsUUFBUSx1QkFBcEQsTUFBTSxTQUFDLFFBQVE7QUFBUyxnQkF6QjNCLE1BQU07QUFDUDs7Ozs7Ozs7Ozs7Ozs7MkRBQVM7QUFBQyxJQTJFWCxrQkFBQztBQUNBLENBREEsQUF6REQsSUF5REM7QUFDRCxTQXpEYSxXQUFXO0FBQUk7QUFBYTtBQUFxQixJQUcxRCxrQ0FBc0Q7QUFBQztBQUN2QyxJQUFoQiwrQ0FBNkU7QUFBQztBQUM5RCxJQUFoQiwrQkFBcUQ7QUFBQztBQUN0QyxJQUFoQiw2QkFBc0I7QUFDMUI7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ2FuQWN0aXZhdGUsXG4gIENhbkFjdGl2YXRlQ2hpbGQsXG4gIFJvdXRlcixcbiAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgUm91dGVyU3RhdGVTbmFwc2hvdFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4vYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IEFVVEhfU0VSVklDRSwgUFJPVEVDVEVEX0ZBTExCQUNLX1BBR0VfVVJJIH0gZnJvbSAnLi90b2tlbnMnO1xuXG4vKipcbiAqIEd1YXJkLCBjaGVja3MgYWNjZXNzIHRva2VuIGF2YWlsYWJpbGl0eSBhbmQgYWxsb3dzIG9yIGRpc2FsbG93cyBhY2Nlc3MgdG8gcGFnZSxcbiAqIGFuZCByZWRpcmVjdHMgb3V0XG4gKlxuICogdXNhZ2U6IHsgcGF0aDogJ3Rlc3QnLCBjb21wb25lbnQ6IFRlc3RDb21wb25lbnQsIGNhbkFjdGl2YXRlOiBbIFB1YmxpY0d1YXJkIF0gfVxuICpcbiAqIEBleHBvcnRcbiAqIEBkeW5hbWljXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQdWJsaWNHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEFVVEhfU0VSVklDRSkgcHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgQEluamVjdChQUk9URUNURURfRkFMTEJBQ0tfUEFHRV9VUkkpIHByaXZhdGUgcHJvdGVjdGVkRmFsbGJhY2tQYWdlVXJpOiBzdHJpbmcsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudDogRG9jdW1lbnQsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHt9XG5cbiAgLyoqXG4gICAqIENhbkFjdGl2YXRlIGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBjYW5BY3RpdmF0ZShcbiAgICBfcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aFNlcnZpY2UuaXNBdXRob3JpemVkKClcbiAgICAgIC5waXBlKG1hcCgoaXNBdXRob3JpemVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgIGlmIChpc0F1dGhvcml6ZWQgJiYgIXRoaXMuaXNQcm90ZWN0ZWRQYWdlKHN0YXRlKSkge1xuICAgICAgICAgIHRoaXMubmF2aWdhdGUodGhpcy5wcm90ZWN0ZWRGYWxsYmFja1BhZ2VVcmkpO1xuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuQWN0aXZhdGVDaGlsZCBoYW5kbGVyXG4gICAqL1xuICBwdWJsaWMgY2FuQWN0aXZhdGVDaGlsZChcbiAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jYW5BY3RpdmF0ZShyb3V0ZSwgc3RhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrLCBpZiBjdXJyZW50IHBhZ2UgaXMgcHJvdGVjdGVkIGZhbGxiYWNrIHBhZ2VcbiAgICovXG4gIHByaXZhdGUgaXNQcm90ZWN0ZWRQYWdlKHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0YXRlLnVybCA9PT0gdGhpcy5wcm90ZWN0ZWRGYWxsYmFja1BhZ2VVcmk7XG4gIH1cblxuICAvKipcbiAgICogTmF2aWdhdGUgYXdheSBmcm9tIHRoZSBhcHAgLyBwYXRoXG4gICAqL1xuICBwcml2YXRlIG5hdmlnYXRlKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHVybC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh1cmwpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=