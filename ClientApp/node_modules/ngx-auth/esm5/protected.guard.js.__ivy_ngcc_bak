/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Injectable, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { AuthService } from './auth.service';
import { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 *
 * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }
 *
 * @export
 * \@dynamic
 */
var ProtectedGuard = /** @class */ (function () {
    function ProtectedGuard(authService, publicFallbackPageUri, document, router) {
        this.authService = authService;
        this.publicFallbackPageUri = publicFallbackPageUri;
        this.document = document;
        this.router = router;
    }
    /**
     * CanActivate handler
     */
    /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    ProtectedGuard.prototype.canActivate = /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    function (_route, state) {
        var _this = this;
        return this.authService.isAuthorized()
            .pipe(map(function (isAuthorized) {
            if (!isAuthorized && !_this.isPublicPage(state)) {
                if (_this.authService.setInterruptedUrl) {
                    _this.authService.setInterruptedUrl(state.url);
                }
                _this.navigate(_this.publicFallbackPageUri);
                return false;
            }
            return true;
        }));
    };
    /**
     * CanActivateChild handler
     */
    /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    ProtectedGuard.prototype.canActivateChild = /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.canActivate(route, state);
    };
    /**
     * Check, if current page is public fallback page
     */
    /**
     * Check, if current page is public fallback page
     * @param {?} state
     * @return {?}
     */
    ProtectedGuard.prototype.isPublicPage = /**
     * Check, if current page is public fallback page
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state.url === this.publicFallbackPageUri;
    };
    /**
     * Navigate away from the app / path
     */
    /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    ProtectedGuard.prototype.navigate = /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url.startsWith('http')) {
            this.document.location.href = url;
        }
        else {
            this.router.navigateByUrl(url);
        }
    };
    ProtectedGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProtectedGuard.ctorParameters = function () { return [
        { type: AuthService, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
        { type: String, decorators: [{ type: Inject, args: [PUBLIC_FALLBACK_PAGE_URI,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Router }
    ]; };
    return ProtectedGuard;
}());
export { ProtectedGuard };
if (false) {
    /** @type {?} */
    ProtectedGuard.prototype.authService;
    /** @type {?} */
    ProtectedGuard.prototype.publicFallbackPageUri;
    /** @type {?} */
    ProtectedGuard.prototype.document;
    /** @type {?} */
    ProtectedGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdGVjdGVkLmd1YXJkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgvIiwic291cmNlcyI6WyJwcm90ZWN0ZWQuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQ0wsTUFBTSxFQUtQLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sVUFBVSxDQUFDOzs7Ozs7Ozs7O0FBV2xFO0lBR0Usd0JBQytCLFdBQXdCLEVBQ1gscUJBQTZCLEVBQ3BDLFFBQWtCLEVBQzdDLE1BQWM7UUFITyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUNYLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBUTtRQUNwQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQzdDLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDckIsQ0FBQztJQUVKOztPQUVHOzs7Ozs7O0lBQ0ksb0NBQVc7Ozs7OztJQUFsQixVQUNFLE1BQThCLEVBQzlCLEtBQTBCO1FBRjVCLGlCQWtCQztRQWRDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUU7YUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLFlBQXFCO1lBQzlCLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM5QyxJQUFJLEtBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUU7b0JBQ3RDLEtBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUMvQztnQkFFRCxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2dCQUUxQyxPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUVEOztPQUVHOzs7Ozs7O0lBQ0kseUNBQWdCOzs7Ozs7SUFBdkIsVUFDRSxLQUE2QixFQUM3QixLQUEwQjtRQUUxQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0sscUNBQVk7Ozs7O0lBQXBCLFVBQXFCLEtBQTBCO1FBQzdDLE9BQU8sS0FBSyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMscUJBQXFCLENBQUM7SUFDbEQsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSyxpQ0FBUTs7Ozs7SUFBaEIsVUFBaUIsR0FBVztRQUMxQixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUNuQzthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDOztnQkEzREYsVUFBVTs7OztnQkFaRixXQUFXLHVCQWdCZixNQUFNLFNBQUMsWUFBWTs2Q0FDbkIsTUFBTSxTQUFDLHdCQUF3QjtnQkFDYSxRQUFRLHVCQUFwRCxNQUFNLFNBQUMsUUFBUTtnQkEzQmxCLE1BQU07O0lBa0ZSLHFCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E1RFksY0FBYzs7O0lBR3ZCLHFDQUFxRDs7SUFDckQsK0NBQXVFOztJQUN2RSxrQ0FBcUQ7O0lBQ3JELGdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgUm91dGVyLFxuICBDYW5BY3RpdmF0ZSxcbiAgQ2FuQWN0aXZhdGVDaGlsZCxcbiAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgUm91dGVyU3RhdGVTbmFwc2hvdFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4vYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IEFVVEhfU0VSVklDRSwgUFVCTElDX0ZBTExCQUNLX1BBR0VfVVJJIH0gZnJvbSAnLi90b2tlbnMnO1xuXG4vKipcbiAqIEd1YXJkLCBjaGVja3MgYWNjZXNzIHRva2VuIGF2YWlsYWJpbGl0eSBhbmQgYWxsb3dzIG9yIGRpc2FsbG93cyBhY2Nlc3MgdG8gcGFnZSxcbiAqIGFuZCByZWRpcmVjdHMgb3V0XG4gKlxuICogdXNhZ2U6IHsgcGF0aDogJ3Rlc3QnLCBjb21wb25lbnQ6IFRlc3RDb21wb25lbnQsIGNhbkFjdGl2YXRlOiBbIEF1dGhHdWFyZCBdIH1cbiAqXG4gKiBAZXhwb3J0XG4gKiBAZHluYW1pY1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvdGVjdGVkR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSwgQ2FuQWN0aXZhdGVDaGlsZCB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChBVVRIX1NFUlZJQ0UpcHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgQEluamVjdChQVUJMSUNfRkFMTEJBQ0tfUEFHRV9VUkkpIHByaXZhdGUgcHVibGljRmFsbGJhY2tQYWdlVXJpOiBzdHJpbmcsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudDogRG9jdW1lbnQsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHt9XG5cbiAgLyoqXG4gICAqIENhbkFjdGl2YXRlIGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBjYW5BY3RpdmF0ZShcbiAgICBfcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aFNlcnZpY2UuaXNBdXRob3JpemVkKClcbiAgICAgIC5waXBlKG1hcCgoaXNBdXRob3JpemVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgIGlmICghaXNBdXRob3JpemVkICYmICF0aGlzLmlzUHVibGljUGFnZShzdGF0ZSkpIHtcbiAgICAgICAgICBpZiAodGhpcy5hdXRoU2VydmljZS5zZXRJbnRlcnJ1cHRlZFVybCkge1xuICAgICAgICAgICAgdGhpcy5hdXRoU2VydmljZS5zZXRJbnRlcnJ1cHRlZFVybChzdGF0ZS51cmwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubmF2aWdhdGUodGhpcy5wdWJsaWNGYWxsYmFja1BhZ2VVcmkpO1xuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuQWN0aXZhdGVDaGlsZCBoYW5kbGVyXG4gICAqL1xuICBwdWJsaWMgY2FuQWN0aXZhdGVDaGlsZChcbiAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jYW5BY3RpdmF0ZShyb3V0ZSwgc3RhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrLCBpZiBjdXJyZW50IHBhZ2UgaXMgcHVibGljIGZhbGxiYWNrIHBhZ2VcbiAgICovXG4gIHByaXZhdGUgaXNQdWJsaWNQYWdlKHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0YXRlLnVybCA9PT0gdGhpcy5wdWJsaWNGYWxsYmFja1BhZ2VVcmk7XG4gIH1cblxuICAvKipcbiAgICogTmF2aWdhdGUgYXdheSBmcm9tIHRoZSBhcHAgLyBwYXRoXG4gICAqL1xuICBwcml2YXRlIG5hdmlnYXRlKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHVybC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh1cmwpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=