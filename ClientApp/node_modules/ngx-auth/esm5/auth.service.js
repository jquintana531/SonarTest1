/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Essential service for authentication
 * @abstract
 */
var /**
 * Essential service for authentication
 * @abstract
 */
AuthService = /** @class */ (function () {
    function AuthService() {
    }
    return AuthService;
}());
/**
 * Essential service for authentication
 * @abstract
 */
export { AuthService };
if (false) {
    /**
     * Check, if user already authorized.
     * Should return Observable with true or false values
     * @abstract
     * @return {?}
     */
    AuthService.prototype.isAuthorized = function () { };
    /**
     * Get access token
     * Should return access token in Observable from e.g.
     * localStorage
     * @abstract
     * @return {?}
     */
    AuthService.prototype.getAccessToken = function () { };
    /**
     * Function, that should perform refresh token
     * Should be successfully completed so interceptor
     * can execute pending requests or retry original one
     * @abstract
     * @return {?}
     */
    AuthService.prototype.refreshToken = function () { };
    /**
     * Function, checks response of failed request to determine,
     * whether token be refreshed or not.
     *
     * Essentially checks status
     * @abstract
     * @param {?} response
     * @param {?=} request
     * @return {?}
     */
    AuthService.prototype.refreshShouldHappen = function (response, request) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.verifyRefreshToken = function (request) { };
    /**
     * Checks if request must be skipped by interceptor.
     * Useful for requests such as request token which doesn't require token in headers
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.skipRequest = function (request) { };
    /**
     * Add token to headers, dependent on server
     * set-up, by default adds a bearer token.
     * Called by interceptor.
     * To change behavior, override this method.
     * @abstract
     * @param {?} token
     * @return {?}
     */
    AuthService.prototype.getHeaders = function (token) { };
    /**
     * Saves last interrupted url inside of the service for further reusage,
     * e.g. restoring interrupted page after logging in
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.setInterruptedUrl = function (url) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @deprecated Due to illogical meaning/functionality this method is deprecated
     * @see verifyRefreshToken
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.verifyTokenRequest = function (url) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgvIiwic291cmNlcyI6WyJhdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNQTs7Ozs7SUFBQTtJQStEQSxDQUFDO0lBQUQsa0JBQUM7QUFBRCxDQUFDLEFBL0RELElBK0RDOzs7Ozs7Ozs7Ozs7O0lBekRDLHFEQUFvRDs7Ozs7Ozs7SUFPcEQsdURBQXFEOzs7Ozs7OztJQU9yRCxxREFBZ0Q7Ozs7Ozs7Ozs7O0lBUWhELDZFQUFzRzs7Ozs7Ozs7SUFNdEcsa0VBQXdFOzs7Ozs7OztJQU14RSwyREFBaUU7Ozs7Ozs7Ozs7SUFRakUsd0RBQWtGOzs7Ozs7OztJQU1sRiw2REFBc0Q7Ozs7Ozs7Ozs7SUFRdEQsOERBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEVzc2VudGlhbCBzZXJ2aWNlIGZvciBhdXRoZW50aWNhdGlvblxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXV0aFNlcnZpY2Uge1xuXG4gIC8qKlxuICAgKiBDaGVjaywgaWYgdXNlciBhbHJlYWR5IGF1dGhvcml6ZWQuXG4gICAqIFNob3VsZCByZXR1cm4gT2JzZXJ2YWJsZSB3aXRoIHRydWUgb3IgZmFsc2UgdmFsdWVzXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgaXNBdXRob3JpemVkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIEdldCBhY2Nlc3MgdG9rZW5cbiAgICogU2hvdWxkIHJldHVybiBhY2Nlc3MgdG9rZW4gaW4gT2JzZXJ2YWJsZSBmcm9tIGUuZy5cbiAgICogbG9jYWxTdG9yYWdlXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0QWNjZXNzVG9rZW4oKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiwgdGhhdCBzaG91bGQgcGVyZm9ybSByZWZyZXNoIHRva2VuXG4gICAqIFNob3VsZCBiZSBzdWNjZXNzZnVsbHkgY29tcGxldGVkIHNvIGludGVyY2VwdG9yXG4gICAqIGNhbiBleGVjdXRlIHBlbmRpbmcgcmVxdWVzdHMgb3IgcmV0cnkgb3JpZ2luYWwgb25lXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVmcmVzaFRva2VuKCk6IE9ic2VydmFibGU8YW55PjtcblxuICAvKipcbiAgICogRnVuY3Rpb24sIGNoZWNrcyByZXNwb25zZSBvZiBmYWlsZWQgcmVxdWVzdCB0byBkZXRlcm1pbmUsXG4gICAqIHdoZXRoZXIgdG9rZW4gYmUgcmVmcmVzaGVkIG9yIG5vdC5cbiAgICpcbiAgICogRXNzZW50aWFsbHkgY2hlY2tzIHN0YXR1c1xuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlZnJlc2hTaG91bGRIYXBwZW4ocmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlLCByZXF1ZXN0PzogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFZlcmlmeSB0aGF0IG91dGdvaW5nIHJlcXVlc3QgaXMgcmVmcmVzaC10b2tlbixcbiAgICogc28gaW50ZXJjZXB0b3Igd29uJ3QgaW50ZXJjZXB0IHRoaXMgcmVxdWVzdFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHZlcmlmeVJlZnJlc2hUb2tlbj8ocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiByZXF1ZXN0IG11c3QgYmUgc2tpcHBlZCBieSBpbnRlcmNlcHRvci5cbiAgICogVXNlZnVsIGZvciByZXF1ZXN0cyBzdWNoIGFzIHJlcXVlc3QgdG9rZW4gd2hpY2ggZG9lc24ndCByZXF1aXJlIHRva2VuIGluIGhlYWRlcnNcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBza2lwUmVxdWVzdD8ocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFkZCB0b2tlbiB0byBoZWFkZXJzLCBkZXBlbmRlbnQgb24gc2VydmVyXG4gICAqIHNldC11cCwgYnkgZGVmYXVsdCBhZGRzIGEgYmVhcmVyIHRva2VuLlxuICAgKiBDYWxsZWQgYnkgaW50ZXJjZXB0b3IuXG4gICAqIFRvIGNoYW5nZSBiZWhhdmlvciwgb3ZlcnJpZGUgdGhpcyBtZXRob2QuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGVhZGVycz8odG9rZW46IHN0cmluZyk6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdIH07XG5cbiAgLyoqXG4gICAqIFNhdmVzIGxhc3QgaW50ZXJydXB0ZWQgdXJsIGluc2lkZSBvZiB0aGUgc2VydmljZSBmb3IgZnVydGhlciByZXVzYWdlLFxuICAgKiBlLmcuIHJlc3RvcmluZyBpbnRlcnJ1cHRlZCBwYWdlIGFmdGVyIGxvZ2dpbmcgaW5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBzZXRJbnRlcnJ1cHRlZFVybD8odXJsOiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBWZXJpZnkgdGhhdCBvdXRnb2luZyByZXF1ZXN0IGlzIHJlZnJlc2gtdG9rZW4sXG4gICAqIHNvIGludGVyY2VwdG9yIHdvbid0IGludGVyY2VwdCB0aGlzIHJlcXVlc3RcbiAgICogQGRlcHJlY2F0ZWQgRHVlIHRvIGlsbG9naWNhbCBtZWFuaW5nL2Z1bmN0aW9uYWxpdHkgdGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZFxuICAgKiBAc2VlIHZlcmlmeVJlZnJlc2hUb2tlblxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHZlcmlmeVRva2VuUmVxdWVzdD8odXJsOiBzdHJpbmcpOiBib29sZWFuO1xufVxuIl19