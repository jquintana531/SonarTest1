/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Subject, throwError } from 'rxjs';
import { map, first, switchMap, catchError } from 'rxjs/operators';
import { AUTH_SERVICE } from './tokens';
var AuthInterceptor = /** @class */ (function () {
    function AuthInterceptor(injector) {
        this.injector = injector;
        /**
         * Is refresh token is being executed
         */
        this.refreshInProgress = false;
        /**
         * Notify all outstanding requests through this subject
         */
        this.refreshSubject = new Subject();
    }
    /**
     * Intercept an outgoing `HttpRequest`
     */
    /**
     * Intercept an outgoing `HttpRequest`
     * @param {?} req
     * @param {?} delegate
     * @return {?}
     */
    AuthInterceptor.prototype.intercept = /**
     * Intercept an outgoing `HttpRequest`
     * @param {?} req
     * @param {?} delegate
     * @return {?}
     */
    function (req, delegate) {
        if (this.skipRequest(req)) {
            return delegate.handle(req);
        }
        return this.processIntercept(req, delegate);
    };
    /**
     * Process all the requests via custom interceptors.
     */
    /**
     * Process all the requests via custom interceptors.
     * @param {?} original
     * @param {?} delegate
     * @return {?}
     */
    AuthInterceptor.prototype.processIntercept = /**
     * Process all the requests via custom interceptors.
     * @param {?} original
     * @param {?} delegate
     * @return {?}
     */
    function (original, delegate) {
        var _this = this;
        /** @type {?} */
        var clone = original.clone();
        return this.request(clone)
            .pipe(switchMap(function (req) { return delegate.handle(req); }), catchError(function (res) { return _this.responseError(clone, res); }));
    };
    /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     */
    /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.request = /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     * @param {?} req
     * @return {?}
     */
    function (req) {
        if (this.refreshInProgress) {
            return this.delayRequest(req);
        }
        return this.addToken(req);
    };
    /**
     * Failed request interceptor, check if it has to be processed with refresh
     */
    /**
     * Failed request interceptor, check if it has to be processed with refresh
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    AuthInterceptor.prototype.responseError = /**
     * Failed request interceptor, check if it has to be processed with refresh
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    function (req, res) {
        var _this = this;
        /** @type {?} */
        var authService = this.injector.get(AUTH_SERVICE);
        /** @type {?} */
        var refreshShouldHappen = authService.refreshShouldHappen(res, req);
        if (refreshShouldHappen && !this.refreshInProgress) {
            this.refreshInProgress = true;
            authService
                .refreshToken()
                .subscribe(function () {
                _this.refreshInProgress = false;
                _this.refreshSubject.next(true);
            }, function () {
                _this.refreshInProgress = false;
                _this.refreshSubject.next(false);
            });
        }
        if (refreshShouldHappen && this.refreshInProgress) {
            return this.retryRequest(req, res);
        }
        return throwError(res);
    };
    /**
     * Add access token to headers or the request
     */
    /**
     * Add access token to headers or the request
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.addToken = /**
     * Add access token to headers or the request
     * @param {?} req
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var authService = this.injector.get(AUTH_SERVICE);
        return authService.getAccessToken()
            .pipe(map(function (token) {
            if (token) {
                /** @type {?} */
                var setHeaders = void 0;
                if (typeof authService.getHeaders === 'function') {
                    setHeaders = authService.getHeaders(token);
                }
                else {
                    setHeaders = { Authorization: "Bearer " + token };
                }
                return req.clone({ setHeaders: setHeaders });
            }
            return req;
        }), first());
    };
    /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     */
    /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.delayRequest = /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var _this = this;
        return this.refreshSubject.pipe(first(), switchMap(function (status) {
            return status ? _this.addToken(req) : throwError(req);
        }));
    };
    /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     */
    /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    AuthInterceptor.prototype.retryRequest = /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     * @param {?} req
     * @param {?} res
     * @return {?}
     */
    function (req, res) {
        /** @type {?} */
        var http = this.injector.get(HttpClient);
        return this.refreshSubject.pipe(first(), switchMap(function (status) {
            return status ? http.request(req) : throwError(res || req);
        }));
    };
    /**
     * Checks if request must be skipped by interceptor.
     */
    /**
     * Checks if request must be skipped by interceptor.
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.skipRequest = /**
     * Checks if request must be skipped by interceptor.
     * @param {?} req
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var skipRequest = this.exec('skipRequest', req);
        /** @type {?} */
        var verifyRefreshToken = this.exec('verifyRefreshToken', req);
        // deprecated, will be removed soon
        /** @type {?} */
        var verifyTokenRequest = this.exec('verifyTokenRequest', req.url);
        return skipRequest || verifyRefreshToken || verifyTokenRequest;
    };
    /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     */
    /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     * @param {?} method
     * @param {...?} args
     * @return {?}
     */
    AuthInterceptor.prototype.exec = /**
     * Exec optional method, will be removed in upcoming updates.
     * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
     * @param {?} method
     * @param {...?} args
     * @return {?}
     */
    function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var authService = this.injector.get(AUTH_SERVICE);
        if (typeof authService[method] === 'function') {
            return authService[method].apply(authService, tslib_1.__spread(args));
        }
    };
    AuthInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthInterceptor.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return AuthInterceptor;
}());
export { AuthInterceptor };
if (false) {
    /**
     * Is refresh token is being executed
     * @type {?}
     */
    AuthInterceptor.prototype.refreshInProgress;
    /**
     * Notify all outstanding requests through this subject
     * @type {?}
     */
    AuthInterceptor.prototype.refreshSubject;
    /** @type {?} */
    AuthInterceptor.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hdXRoLyIsInNvdXJjZXMiOlsiYXV0aC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFDTCxVQUFVLEVBTVgsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV4QztJQWFFLHlCQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVOzs7O1FBUDlCLHNCQUFpQixHQUFHLEtBQUssQ0FBQzs7OztRQUsxQixtQkFBYyxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDO0lBRXpCLENBQUM7SUFFMUM7O09BRUc7Ozs7Ozs7SUFDSSxtQ0FBUzs7Ozs7O0lBQWhCLFVBQ0UsR0FBcUIsRUFDckIsUUFBcUI7UUFFckIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtRQUVELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDSywwQ0FBZ0I7Ozs7OztJQUF4QixVQUNFLFFBQTBCLEVBQzFCLFFBQXFCO1FBRnZCLGlCQVdDOztZQVBPLEtBQUssR0FBcUIsUUFBUSxDQUFDLEtBQUssRUFBRTtRQUVoRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ3ZCLElBQUksQ0FDSCxTQUFTLENBQUMsVUFBQyxHQUFxQixJQUFLLE9BQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQyxFQUMxRCxVQUFVLENBQUMsVUFBQyxHQUFzQixJQUFLLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FDdkUsQ0FBQztJQUNOLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7SUFDSyxpQ0FBTzs7Ozs7O0lBQWYsVUFBZ0IsR0FBcUI7UUFDbkMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7T0FFRzs7Ozs7OztJQUNLLHVDQUFhOzs7Ozs7SUFBckIsVUFDRSxHQUFxQixFQUNyQixHQUFzQjtRQUZ4QixpQkErQkM7O1lBM0JPLFdBQVcsR0FDZixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBYyxZQUFZLENBQUM7O1lBQ3hDLG1CQUFtQixHQUN2QixXQUFXLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztRQUUzQyxJQUFJLG1CQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2xELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7WUFFOUIsV0FBVztpQkFDUixZQUFZLEVBQUU7aUJBQ2QsU0FBUyxDQUNSO2dCQUNFLEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7Z0JBQy9CLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFDRDtnQkFDRSxLQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO2dCQUMvQixLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxDQUFDLENBQ0YsQ0FBQztTQUNMO1FBRUQsSUFBSSxtQkFBbUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDakQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNwQztRQUVELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0ssa0NBQVE7Ozs7O0lBQWhCLFVBQWlCLEdBQXFCOztZQUM5QixXQUFXLEdBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQWMsWUFBWSxDQUFDO1FBRTlDLE9BQU8sV0FBVyxDQUFDLGNBQWMsRUFBRTthQUNoQyxJQUFJLENBQ0gsR0FBRyxDQUFDLFVBQUMsS0FBYTtZQUNoQixJQUFJLEtBQUssRUFBRTs7b0JBQ0wsVUFBVSxTQUF1QztnQkFFckQsSUFBSSxPQUFPLFdBQVcsQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO29CQUNoRCxVQUFVLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDNUM7cUJBQU07b0JBQ0wsVUFBVSxHQUFHLEVBQUUsYUFBYSxFQUFFLFlBQVUsS0FBTyxFQUFFLENBQUM7aUJBQ25EO2dCQUVELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsWUFBQSxFQUFFLENBQUMsQ0FBQzthQUNsQztZQUVELE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxDQUFDLEVBQ0YsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNOLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7SUFDSyxzQ0FBWTs7Ozs7O0lBQXBCLFVBQXFCLEdBQXFCO1FBQTFDLGlCQU9DO1FBTkMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDN0IsS0FBSyxFQUFFLEVBQ1AsU0FBUyxDQUFDLFVBQUMsTUFBZTtZQUN4QixPQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUE3QyxDQUE2QyxDQUM5QyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7OztJQUNLLHNDQUFZOzs7Ozs7O0lBQXBCLFVBQ0UsR0FBcUIsRUFDckIsR0FBc0I7O1lBRWhCLElBQUksR0FDUixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBYSxVQUFVLENBQUM7UUFFM0MsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDN0IsS0FBSyxFQUFFLEVBQ1AsU0FBUyxDQUFDLFVBQUMsTUFBZTtZQUN4QixPQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFBbkQsQ0FBbUQsQ0FDcEQsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSyxxQ0FBVzs7Ozs7SUFBbkIsVUFBb0IsR0FBcUI7O1lBQ2pDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUM7O1lBQzNDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDOzs7WUFHekQsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDO1FBRW5FLE9BQU8sV0FBVyxJQUFJLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDO0lBQ2pFLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7O0lBQ0ssOEJBQUk7Ozs7Ozs7SUFBWixVQUFhLE1BQWM7UUFBRSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLDZCQUFjOzs7WUFDbkMsV0FBVyxHQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFjLFlBQVksQ0FBQztRQUU5QyxJQUFJLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsRUFBRTtZQUM3QyxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBbkIsV0FBVyxtQkFBWSxJQUFJLEdBQUU7U0FDckM7SUFDSCxDQUFDOztnQkFqTEYsVUFBVTs7OztnQkFmVSxRQUFROztJQWtNN0Isc0JBQUM7Q0FBQSxBQW5MRCxJQW1MQztTQWxMWSxlQUFlOzs7Ozs7SUFLMUIsNENBQWtDOzs7OztJQUtsQyx5Q0FBa0U7O0lBRXRELG1DQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwQ2xpZW50LFxuICBIdHRwRXZlbnQsXG4gIEh0dHBJbnRlcmNlcHRvcixcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwRXJyb3JSZXNwb25zZVxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIGZpcnN0LCBzd2l0Y2hNYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgQVVUSF9TRVJWSUNFIH0gZnJvbSAnLi90b2tlbnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXV0aEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICAvKipcbiAgICogSXMgcmVmcmVzaCB0b2tlbiBpcyBiZWluZyBleGVjdXRlZFxuICAgKi9cbiAgcHJpdmF0ZSByZWZyZXNoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBOb3RpZnkgYWxsIG91dHN0YW5kaW5nIHJlcXVlc3RzIHRocm91Z2ggdGhpcyBzdWJqZWN0XG4gICAqL1xuICBwcml2YXRlIHJlZnJlc2hTdWJqZWN0OiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge31cblxuICAvKipcbiAgICogSW50ZXJjZXB0IGFuIG91dGdvaW5nIGBIdHRwUmVxdWVzdGBcbiAgICovXG4gIHB1YmxpYyBpbnRlcmNlcHQoXG4gICAgcmVxOiBIdHRwUmVxdWVzdDxhbnk+LFxuICAgIGRlbGVnYXRlOiBIdHRwSGFuZGxlclxuICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKHRoaXMuc2tpcFJlcXVlc3QocmVxKSkge1xuICAgICAgcmV0dXJuIGRlbGVnYXRlLmhhbmRsZShyZXEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnByb2Nlc3NJbnRlcmNlcHQocmVxLCBkZWxlZ2F0ZSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhbGwgdGhlIHJlcXVlc3RzIHZpYSBjdXN0b20gaW50ZXJjZXB0b3JzLlxuICAgKi9cbiAgcHJpdmF0ZSBwcm9jZXNzSW50ZXJjZXB0KFxuICAgIG9yaWdpbmFsOiBIdHRwUmVxdWVzdDxhbnk+LFxuICAgIGRlbGVnYXRlOiBIdHRwSGFuZGxlclxuICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgY29uc3QgY2xvbmU6IEh0dHBSZXF1ZXN0PGFueT4gPSBvcmlnaW5hbC5jbG9uZSgpO1xuXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChjbG9uZSlcbiAgICAgIC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKHJlcTogSHR0cFJlcXVlc3Q8YW55PikgPT4gZGVsZWdhdGUuaGFuZGxlKHJlcSkpLFxuICAgICAgICBjYXRjaEVycm9yKChyZXM6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB0aGlzLnJlc3BvbnNlRXJyb3IoY2xvbmUsIHJlcykpXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgaW50ZXJjZXB0b3IuIERlbGF5cyByZXF1ZXN0IGlmIHJlZnJlc2ggaXMgaW4gcHJvZ3Jlc3NcbiAgICogb3RoZXJ3aXNlIGFkZHMgdG9rZW4gdG8gdGhlIGhlYWRlcnNcbiAgICovXG4gIHByaXZhdGUgcmVxdWVzdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBPYnNlcnZhYmxlPEh0dHBSZXF1ZXN0PGFueT4+IHtcbiAgICBpZiAodGhpcy5yZWZyZXNoSW5Qcm9ncmVzcykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsYXlSZXF1ZXN0KHJlcSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYWRkVG9rZW4ocmVxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGYWlsZWQgcmVxdWVzdCBpbnRlcmNlcHRvciwgY2hlY2sgaWYgaXQgaGFzIHRvIGJlIHByb2Nlc3NlZCB3aXRoIHJlZnJlc2hcbiAgICovXG4gIHByaXZhdGUgcmVzcG9uc2VFcnJvcihcbiAgICByZXE6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgcmVzOiBIdHRwRXJyb3JSZXNwb25zZVxuICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgY29uc3QgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0PEF1dGhTZXJ2aWNlPihBVVRIX1NFUlZJQ0UpO1xuICAgIGNvbnN0IHJlZnJlc2hTaG91bGRIYXBwZW46IGJvb2xlYW4gPVxuICAgICAgYXV0aFNlcnZpY2UucmVmcmVzaFNob3VsZEhhcHBlbihyZXMsIHJlcSk7XG5cbiAgICBpZiAocmVmcmVzaFNob3VsZEhhcHBlbiAmJiAhdGhpcy5yZWZyZXNoSW5Qcm9ncmVzcykge1xuICAgICAgdGhpcy5yZWZyZXNoSW5Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICAgIGF1dGhTZXJ2aWNlXG4gICAgICAgIC5yZWZyZXNoVG9rZW4oKVxuICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFN1YmplY3QubmV4dCh0cnVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFN1YmplY3QubmV4dChmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChyZWZyZXNoU2hvdWxkSGFwcGVuICYmIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldHJ5UmVxdWVzdChyZXEsIHJlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRocm93RXJyb3IocmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYWNjZXNzIHRva2VuIHRvIGhlYWRlcnMgb3IgdGhlIHJlcXVlc3RcbiAgICovXG4gIHByaXZhdGUgYWRkVG9rZW4ocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogT2JzZXJ2YWJsZTxIdHRwUmVxdWVzdDxhbnk+PiB7XG4gICAgY29uc3QgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0PEF1dGhTZXJ2aWNlPihBVVRIX1NFUlZJQ0UpO1xuXG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmdldEFjY2Vzc1Rva2VuKClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoKHRva2VuOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGxldCBzZXRIZWFkZXJzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGF1dGhTZXJ2aWNlLmdldEhlYWRlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgc2V0SGVhZGVycyA9IGF1dGhTZXJ2aWNlLmdldEhlYWRlcnModG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0SGVhZGVycyA9IHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlcS5jbG9uZSh7IHNldEhlYWRlcnMgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlcTtcbiAgICAgICAgfSksXG4gICAgICAgIGZpcnN0KClcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRGVsYXkgcmVxdWVzdCwgYnkgc3Vic2NyaWJpbmcgb24gcmVmcmVzaCBldmVudCwgb25jZSBpdCBmaW5pc2hlZCwgcHJvY2VzcyBpdFxuICAgKiBvdGhlcndpc2UgdGhyb3cgZXJyb3JcbiAgICovXG4gIHByaXZhdGUgZGVsYXlSZXF1ZXN0KHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cFJlcXVlc3Q8YW55Pj4ge1xuICAgIHJldHVybiB0aGlzLnJlZnJlc2hTdWJqZWN0LnBpcGUoXG4gICAgICBmaXJzdCgpLFxuICAgICAgc3dpdGNoTWFwKChzdGF0dXM6IGJvb2xlYW4pID0+XG4gICAgICAgIHN0YXR1cyA/IHRoaXMuYWRkVG9rZW4ocmVxKSA6IHRocm93RXJyb3IocmVxKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cnkgcmVxdWVzdCwgYnkgc3Vic2NyaWJpbmcgb24gcmVmcmVzaCBldmVudCwgb25jZSBpdCBmaW5pc2hlZCwgcHJvY2VzcyBpdFxuICAgKiBvdGhlcndpc2UgdGhyb3cgZXJyb3JcbiAgICovXG4gIHByaXZhdGUgcmV0cnlSZXF1ZXN0KFxuICAgIHJlcTogSHR0cFJlcXVlc3Q8YW55PixcbiAgICByZXM6IEh0dHBFcnJvclJlc3BvbnNlXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCBodHRwOiBIdHRwQ2xpZW50ID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0PEh0dHBDbGllbnQ+KEh0dHBDbGllbnQpO1xuXG4gICAgcmV0dXJuIHRoaXMucmVmcmVzaFN1YmplY3QucGlwZShcbiAgICAgIGZpcnN0KCksXG4gICAgICBzd2l0Y2hNYXAoKHN0YXR1czogYm9vbGVhbikgPT5cbiAgICAgICAgc3RhdHVzID8gaHR0cC5yZXF1ZXN0KHJlcSkgOiB0aHJvd0Vycm9yKHJlcyB8fCByZXEpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcmVxdWVzdCBtdXN0IGJlIHNraXBwZWQgYnkgaW50ZXJjZXB0b3IuXG4gICAqL1xuICBwcml2YXRlIHNraXBSZXF1ZXN0KHJlcTogSHR0cFJlcXVlc3Q8YW55Pikge1xuICAgIGNvbnN0IHNraXBSZXF1ZXN0ID0gdGhpcy5leGVjKCdza2lwUmVxdWVzdCcsIHJlcSk7XG4gICAgY29uc3QgdmVyaWZ5UmVmcmVzaFRva2VuID0gdGhpcy5leGVjKCd2ZXJpZnlSZWZyZXNoVG9rZW4nLCByZXEpO1xuXG4gICAgLy8gZGVwcmVjYXRlZCwgd2lsbCBiZSByZW1vdmVkIHNvb25cbiAgICBjb25zdCB2ZXJpZnlUb2tlblJlcXVlc3QgPSB0aGlzLmV4ZWMoJ3ZlcmlmeVRva2VuUmVxdWVzdCcsIHJlcS51cmwpO1xuXG4gICAgcmV0dXJuIHNraXBSZXF1ZXN0IHx8IHZlcmlmeVJlZnJlc2hUb2tlbiB8fCB2ZXJpZnlUb2tlblJlcXVlc3Q7XG4gIH1cblxuICAvKipcbiAgICogRXhlYyBvcHRpb25hbCBtZXRob2QsIHdpbGwgYmUgcmVtb3ZlZCBpbiB1cGNvbWluZyB1cGRhdGVzLlxuICAgKiBUZW1wIG1ldGhvZCB1bnRpbCBgdmVyaWZ5VG9rZW5SZXF1ZXN0YCB3aWxsIGJlIGNvbXBsZXRlbHkgcmVwbGFjZWQgd2l0aCBza2lwUmVxdWVzdFxuICAgKi9cbiAgcHJpdmF0ZSBleGVjKG1ldGhvZDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldDxBdXRoU2VydmljZT4oQVVUSF9TRVJWSUNFKTtcblxuICAgIGlmICh0eXBlb2YgYXV0aFNlcnZpY2VbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGF1dGhTZXJ2aWNlW21ldGhvZF0oLi4uYXJncyk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==