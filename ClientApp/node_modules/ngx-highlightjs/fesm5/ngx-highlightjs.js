import { InjectionToken, Injectable, Inject, Optional, NgModule, Directive, ElementRef, Renderer2, Input, Output, EventEmitter, defineInjectable, inject } from '@angular/core';
import { __assign } from 'tslib';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, from, of } from 'rxjs';
import { take, filter, tap, switchMap, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var OPTIONS = new InjectionToken('OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var HighlightJS = /** @class */ (function () {
    function HighlightJS(options, _document) {
        this._document = _document;
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = __assign({}, this.options, options);
        this._hljsLoader().subscribe();
    }
    Object.defineProperty(HighlightJS.prototype, "isReady", {
        // Stream that emits when highlightjs is loaded
        get: 
        // Stream that emits when highlightjs is loaded
        /**
         * @return {?}
         */
        function () {
            return this._isReady$.pipe(filter(function (isReady) { return isReady; }), take(1));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    HighlightJS.prototype.highlight = /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    function (name, value, ignore_illegals, continuation) {
        if (this.hljs) {
            return this.hljs.highlight(name, value, ignore_illegals, continuation);
        }
    };
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    HighlightJS.prototype.highlightAuto = /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    function (value, languageSubset) {
        if (this.hljs) {
            return this.hljs.highlightAuto(value, languageSubset);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    HighlightJS.prototype.fixMarkup = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.hljs) {
            return this.hljs.fixMarkup(value);
        }
    };
    /**
     * @param {?} block
     * @return {?}
     */
    HighlightJS.prototype.highlightBlock = /**
     * @param {?} block
     * @return {?}
     */
    function (block) {
        if (this.hljs) {
            this.hljs.highlightBlock(block);
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    HighlightJS.prototype.configure = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.hljs) {
            this.hljs.configure(config);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlighting = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlighting();
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlightingOnLoad = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlightingOnLoad();
        }
    };
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    HighlightJS.prototype.registerLanguage = /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    function (name, language) {
        if (this.hljs) {
            this.hljs.registerLanguage(name, language);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.listLanguages = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            return this.hljs.listLanguages();
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    HighlightJS.prototype.getLanguage = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.hljs) {
            return this.hljs.getLanguage(name);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype._hljsLoader = /**
     * @return {?}
     */
    function () {
        if (this._document.defaultView.hljs) {
            return this._initHLJS();
        }
        else {
            this._themeLoader().subscribe();
            return this._loadScript();
        }
    };
    /**
     * Load hljs script
     */
    /**
     * Load hljs script
     * @return {?}
     */
    HighlightJS.prototype._loadScript = /**
     * Load hljs script
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var script = _this._document.createElement('script');
            script.async = true;
            script.type = 'text/javascript';
            script.onload = resolve;
            script.src = _this.options.path + "/highlight.pack.js";
            _this._document.head.appendChild(script);
        });
        return from(promise).pipe(switchMap(function () { return _this._initHLJS(); }));
    };
    /**
     * Load hljs theme
     */
    /**
     * Load hljs theme
     * @return {?}
     */
    HighlightJS.prototype._themeLoader = /**
     * Load hljs theme
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var style = _this._document.createElement('link');
            style.rel = 'stylesheet';
            style.type = 'text/css';
            style.onload = resolve;
            style.href = _this.options.path + "/styles/" + _this.options.theme + ".css";
            _this._document.head.appendChild(style);
        });
        return from(promise);
    };
    /**
     * Initialize hljs on load
     */
    /**
     * Initialize hljs on load
     * @return {?}
     */
    HighlightJS.prototype._initHLJS = /**
     * Initialize hljs on load
     * @return {?}
     */
    function () {
        var _this = this;
        return of({}).pipe(tap(function () {
            _this.hljs = _this._document.defaultView.hljs;
            _this.hljs.configure(_this.options.config);
            _this._isReady$.next(true);
        }));
    };
    /** @nocollapse */
    HighlightJS.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ HighlightJS.ngInjectableDef = defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(inject(OPTIONS, 8), inject(DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.ɵfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(ɵngcc0.ɵɵinject(OPTIONS, 8), ɵngcc0.ɵɵinject(DOCUMENT)); };
HighlightJS.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HighlightJS, factory: function (t) { return HighlightJS.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
    return HighlightJS;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * There are 2 ways to higlight a code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
var HighlightDirective = /** @class */ (function () {
    function HighlightDirective(el, renderer, hljs) {
        this.renderer = renderer;
        this.hljs = hljs;
        this.highlighted = new EventEmitter();
        this.el = el.nativeElement;
    }
    Object.defineProperty(HighlightDirective.prototype, "setCode", {
        set: /**
         * @param {?} code
         * @return {?}
         */
        function (code) {
            var _this = this;
            this.code = code;
            this.hljs.isReady.subscribe(function () { return _this.highlightElement(_this.el, code); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
         * This will highlight using the text content */
        if (!this.code && this.hljs.options.auto) {
            this.hljs.isReady.subscribe(function () {
                _this.highlightTextContent();
                /** Highlight when text content changes */
                _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                _this.domObs.observe(_this.el, { childList: true, subtree: true });
            });
        }
    };
    /** Highlight using element text content */
    /**
     * Highlight using element text content
     * @return {?}
     */
    HighlightDirective.prototype.highlightTextContent = /**
     * Highlight using element text content
     * @return {?}
     */
    function () {
        if (!this.highlight) {
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn("[HighlightDirective]: Use 'highlight' on <code> element only");
            }
        }
        else if (this.highlight === 'all') {
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            this.highlightChildren(this.el, this.highlight);
        }
    };
    /** Highlight a code block */
    /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    HighlightDirective.prototype.highlightElement = /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    function (el, code) {
        /** @type {?} */
        var res = this.hljs.highlightAuto(code, this.language);
        if (res.value !== el.innerHTML) {
            this.renderer.addClass(el, 'hljs');
            this.renderer.setProperty(el, 'innerHTML', res.value);
            this.highlighted.emit(res);
        }
    };
    /** Highlight multiple code blocks */
    /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    HighlightDirective.prototype.highlightChildren = /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    function (el, selector) {
        var _this = this;
        /** @type {?} */
        var codeElements = el.querySelectorAll(selector);
        /** highlight children with the same selector */
        from(codeElements).pipe(filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), take(1)).subscribe();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** Disconnect MutationObserver */
        if (!this.code && this.hljs.options.auto) {
            this.domObs.disconnect();
        }
    };
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HighlightJS }
    ]; };
    HighlightDirective.propDecorators = {
        highlight: [{ type: Input }],
        language: [{ type: Input }],
        setCode: [{ type: Input, args: ['code',] }],
        highlighted: [{ type: Output }]
    };
HighlightDirective.ɵfac = function HighlightDirective_Factory(t) { return new (t || HighlightDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(HighlightJS)); };
HighlightDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HighlightDirective, selectors: [["", "highlight", ""]], inputs: { setCode: ["code", "setCode"], highlight: "highlight", language: "language" }, outputs: { highlighted: "highlighted" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightDirective, [{
        type: Directive,
        args: [{
                selector: '[highlight]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: HighlightJS }]; }, { highlighted: [{
            type: Output
        }], setCode: [{
            type: Input,
            args: ['code']
        }], highlight: [{
            type: Input
        }], language: [{
            type: Input
        }] }); })();
    return HighlightDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var HighlightModule = /** @class */ (function () {
    function HighlightModule() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    HighlightModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: HighlightModule,
            providers: [
                { provide: OPTIONS, useValue: options }
            ]
        };
    };
HighlightModule.ɵfac = function HighlightModule_Factory(t) { return new (t || HighlightModule)(); };
HighlightModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HighlightModule });
HighlightModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightModule, [{
        type: NgModule,
        args: [{
                declarations: [HighlightDirective],
                exports: [HighlightDirective]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightModule, { declarations: [HighlightDirective], exports: [HighlightDirective] }); })();
    return HighlightModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { HighlightModule, HighlightJS, HighlightDirective, OPTIONS as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodGpzLmpzIiwic291cmNlcyI6WyJuZ3gtaGlnaGxpZ2h0anMvbGliL2hpZ2hsaWdodC50b2tlbi50cyIsIm5neC1oaWdobGlnaHRqcy9saWIvaGlnaGxpZ2h0LnNlcnZpY2UudHMiLCJuZ3gtaGlnaGxpZ2h0anMvbGliL2hpZ2hsaWdodC5kaXJlY3RpdmUudHMiLCJuZ3gtaGlnaGxpZ2h0anMvbGliL2hpZ2hsaWdodC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUdBLElBQWEsT0FBTyxHQUFHLElBQUksY0FBYyxDQUFtQixTQUFTLENBQUM7QUFBRTtBQUN4RTtBQUFLO0FBQW1DO0FBQWlGO0FBQUs7QUFBZ0QsSUMwQjVLLHFCQUF5QyxPQUF5QixFQUM1QixTQUFjO0FBQ3RELFFBRHdDLGNBQVMsR0FBVCxTQUFTLENBQUs7QUFBRSxRQWpCdEQsWUFBTyxHQUFxQjtBQUM5QixZQUFJLEtBQUssRUFBRSxRQUFRO0FBQ25CLFlBQUksSUFBSSxFQUFFLGlCQUFpQjtBQUMzQixZQUFJLElBQUksRUFBRSxJQUFJO0FBQ2QsU0FBRyxDQUFDO0FBQ0osUUFDVSxjQUFTLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsUUFXSSxJQUFJLENBQUMsT0FBTyxnQkFBUSxJQUFJLENBQUMsT0FBTyxFQUFLLE9BQU8sQ0FBRSxDQUFDO0FBQ25ELFFBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ25DLEtBQUc7QUFDSCxJQVpFLHNCQUFJLGdDQUFPO0FBQUs7QUFFaEI7QUFBZTtBQUtSO0FBQWE7QUFBd0I7QUFBYSxRQVB6RDtBQUFlLFlBQ2IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDeEIsTUFBTSxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsT0FBTyxHQUFBLENBQUMsRUFDMUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7QUFDTixTQUFHO0FBQ0Y7QUFDeUI7QUFBNEIsT0FGbkQ7QUFDSDtBQUNPO0FBQXdCO0FBQXlCO0FBQ3BDO0FBQWlDO0FBQ3ZDO0FBQVMsSUFJckIsK0JBQVM7QUFBUTtBQUF3QjtBQUF5QjtBQUFtQztBQUVoRztBQUFvQjtBQUFTLElBRmxDLFVBQVUsSUFBWSxFQUFFLEtBQWEsRUFBRSxlQUF3QixFQUFFLFlBQWtCO0FBQUssUUFDdEYsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQU0sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUM3RSxTQUFLO0FBQ0wsS0FBRztBQUNGO0FBQ087QUFBeUI7QUFBa0M7QUFDekQ7QUFBUyxJQURqQixtQ0FBYTtBQUFRO0FBQXlCO0FBQzNDO0FBQ0Y7QUFBUyxJQUZWLFVBQWMsS0FBYSxFQUFFLGNBQXdCO0FBQUssUUFDeEQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQU0sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDNUQsU0FBSztBQUNMLEtBQUc7QUFDRjtBQUNPO0FBQXlCO0FBQ2xCO0FBQ2IsSUFGQSwrQkFBUztBQUFRO0FBQ2I7QUFDRjtBQUFTLElBRlgsVUFBVSxLQUFhO0FBQUssUUFDMUIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQU0sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxTQUFLO0FBQ0wsS0FBRztBQUNGO0FBQ087QUFBeUI7QUFDcEI7QUFDYixJQUZFLG9DQUFjO0FBQVE7QUFDZjtBQUNGO0FBQVMsSUFGZCxVQUFlLEtBQWtCO0FBQ25DLFFBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEMsU0FBSztBQUNMLEtBQUc7QUFDRjtBQUNPO0FBQTBCO0FBQ3BCO0FBQ2IsSUFGQywrQkFBUztBQUFRO0FBQ2Q7QUFDRjtBQUFTLElBRlYsVUFBVSxNQUF1QjtBQUNuQyxRQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNuQixZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLFNBQUs7QUFDTCxLQUFHO0FBQ0Y7QUFDTztBQUNKO0FBQVMsSUFEWCxzQ0FBZ0I7QUFDaEI7QUFDRjtBQUFTLElBRlA7QUFBZSxRQUNiLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNuQixZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUNuQyxTQUFLO0FBQ0wsS0FBRztBQUNGO0FBQ087QUFBb0I7QUFDckIsSUFETCw0Q0FBc0I7QUFDdEI7QUFDRjtBQUFTLElBRlA7QUFBZSxRQUNiLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNuQixZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztBQUN6QyxTQUFLO0FBQ0wsS0FBRztBQUNGO0FBQ087QUFBd0I7QUFDNUI7QUFDRjtBQUFTLElBRlQsc0NBQWdCO0FBQVE7QUFBd0I7QUFFbEQ7QUFBb0I7QUFBUyxJQUYzQixVQUFpQixJQUFZLEVBQUUsUUFBa0I7QUFDbkQsUUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDbkIsWUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNqRCxTQUFLO0FBQ0wsS0FBRztBQUNGO0FBQ087QUFBb0I7QUFDdEIsSUFESixtQ0FBYTtBQUFRO0FBQ1g7QUFBUyxJQURuQjtBQUFlLFFBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQU0sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3ZDLFNBQUs7QUFDTCxLQUFHO0FBQ0Y7QUFDTztBQUF3QjtBQUNoQjtBQUNiLElBRkQsaUNBQVc7QUFBUTtBQUNaO0FBQ0Y7QUFBUyxJQUZkLFVBQVksSUFBWTtBQUFLLFFBQzNCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNuQixZQUFNLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsU0FBSztBQUNMLEtBQUc7QUFDRjtBQUNPO0FBQW9CO0FBQVMsSUFBM0IsaUNBQVc7QUFBUTtBQUN4QjtBQUFTLElBRFo7QUFBZSxRQUNiLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQ3pDLFlBQU0sT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDOUIsU0FBSztBQUFFLGFBQUk7QUFDWCxZQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN0QyxZQUFNLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2hDLFNBQUs7QUFDTCxLQUFHO0FBQ0Y7QUFFQTtBQUNFO0FBQ0U7QUFBUztBQUF5QjtBQUN4QjtBQUFTLElBRGQsaUNBQVc7QUFBUTtBQUNuQjtBQUFvQjtBQUFTLElBRHJDO0FBQWUsUUFBZixpQkFZQztBQUNIO0FBRWlCLFlBZFAsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTztBQUFLO0FBQ2xCLGdCQUFmLE1BQU0sR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7QUFDM0QsWUFBTSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUMxQixZQUFNLE1BQU0sQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7QUFDdEMsWUFBTSxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUM5QixZQUFNLE1BQU0sQ0FBQyxHQUFHLEdBQU0sS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLHVCQUFvQixDQUFDO0FBQzVELFlBQU0sS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN2QixTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxTQUFTLEVBQUUsR0FBQSxDQUFDLENBQ2xDLENBQUM7QUFDTixLQUFHO0FBQ0Y7QUFFQTtBQUNFO0FBQ0U7QUFBUztBQUF3QjtBQUN6QjtBQUFTLElBRFosa0NBQVk7QUFBUTtBQUNyQjtBQUFvQjtBQUFTLElBRHBDO0FBQWUsUUFBZixpQkFVQztBQUNIO0FBRWlCLFlBWlAsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTztBQUFLO0FBQ2xCLGdCQUFmLEtBQUssR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7QUFDeEQsWUFBTSxLQUFLLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQztBQUMvQixZQUFNLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO0FBQzlCLFlBQU0sS0FBSyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDN0IsWUFBTSxLQUFLLENBQUMsSUFBSSxHQUFNLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxnQkFBVyxLQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssU0FBTSxDQUFDO0FBQzNFLFlBQU0sS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekIsS0FBRztBQUNGO0FBRUE7QUFDRTtBQUNFO0FBQVM7QUFDTztBQUNMO0FBQ1YsSUFISSwrQkFBUztBQUNqQjtBQUNPO0FBQ0M7QUFBUyxJQUhqQjtBQUFlLFFBQWYsaUJBUUM7QUFDSCxRQVJJLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDaEIsR0FBRyxDQUFDO0FBQ0osWUFBRSxLQUFJLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztBQUNwRCxZQUFRLEtBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsWUFBUSxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxTQUFPLENBQUMsQ0FDSCxDQUFDO0FBQ04sS0FBRyxDQTFJTTtBQUFFO3dCQUhWLFVBQVUsU0FBQywzQ0FLUDtTQUpILFVBQVUsRUFBRSxNQUFNLG1CQUNuQiw5Q0FNWSxnREFlRSxRQUFRLFlBQUksTUFBTSxTQUFDLE9BQU87QUFBVSxnREFDcEMsTUFBTSxTQUFDLFFBQVE7QUFBUztBQUFXOzs7Ozs7Ozs7Ozs7Ozs7O2tDQU0xQztBQUFFLHNCQXJDVjtBQUFHLENBT0g7QUFBSztBQUFDO0FBQUs7QUFHTjtBQUtFO0FDZlA7QUFBSztBQUF3QztBQUMvQjtBQUNrQztBQVNoRDtBQUdVLElBZVIsNEJBQVksRUFBYyxFQUFVLFFBQW1CLEVBQVUsSUFBaUI7QUFDcEYsUUFEc0MsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFFLFFBQVEsU0FBSSxHQUFKLElBQUksQ0FBYTtBQUFFLFFBRjFFLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQW1CLENBQUM7QUFDOUQsUUFFSSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDL0IsS0FBRztBQUNILElBWEUsc0JBQ0ksdUNBQU87QUFBSztBQUNiO0FBQ0s7QUFBd0I7QUFBYSxRQUg3QyxVQUNZLElBQVk7QUFDMUIsWUFGRSxpQkFJQztBQUNILFlBSEksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDckIsWUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFBLENBQUMsQ0FBQztBQUM1RSxTQUFHO0FBQ0Y7QUFDeUI7QUFBNEIsT0FGbkQ7QUFDSDtBQUNPO0FBQW9CO0FBQVMsSUFNbEMscUNBQVE7QUFFVjtBQUFvQjtBQUFTLElBRjNCO0FBQ0QsUUFEQyxpQkFjQztBQUNIO0FBR2tCO0FBQzhCLFFBZjVDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtBQUM5QyxZQUNNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUM1QixnQkFBRSxLQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUNwQztBQUVNLGdCQUFFLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLG9CQUFvQixFQUFFLEdBQUEsQ0FBQyxDQUFDO0FBQzlFLGdCQUFRLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3pFLGFBQU8sQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLEtBQUc7QUFDRjtBQUVBO0FBQVM7QUFDaUI7QUFDUjtBQUFTLElBRjFCLGlEQUFvQjtBQUNwQjtBQUNpQjtBQUFvQjtBQUFTLElBRjlDO0FBQWUsUUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUN6QixZQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxFQUFFO0FBQ3BELGdCQUFRLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDakUsYUFBTztBQUFFLGlCQUFJO0FBQ2IsZ0JBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0FBQ3JGLGFBQU87QUFDUCxTQUFLO0FBQUUsYUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFO0FBQ3pDLFlBQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbEQsU0FBSztBQUFFLGFBQUk7QUFDWCxZQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0RCxTQUFLO0FBQ0wsS0FBRztBQUNGO0FBRUE7QUFBUztBQUErQjtBQUVqQztBQUF3QjtBQUFvQjtBQUFTLElBRjNELDZDQUFnQjtBQUFRO0FBRXhCO0FBQXNCO0FBQXdCO0FBQW9CO0FBQVMsSUFGM0UsVUFBaUIsRUFBZSxFQUFFLElBQVk7QUFDaEQ7QUFDd0IsWUFBZCxHQUFHLEdBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQzdFLFFBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUU7QUFDcEMsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekMsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1RCxZQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLFNBQUs7QUFDTCxLQUFHO0FBQ0Y7QUFFQTtBQUFTO0FBQXVDO0FBRXRDO0FBQTRCO0FBRXZDO0FBQVMsSUFKUCw4Q0FBaUI7QUFBUTtBQUVyQjtBQUFzQjtBQUE0QjtBQUV2QztBQUFTLElBSnhCLFVBQWtCLEVBQWUsRUFBRSxRQUFnQjtBQUNyRCxRQURFLGlCQVVDO0FBQ0g7QUFFSyxZQVhLLFlBQVksR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO0FBQ3REO0FBRUUsUUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNyQixNQUFNLENBQUMsVUFBQyxJQUFpQixJQUFLLE9BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLE9BQU8sR0FBQSxDQUFDLEVBQ3RHLEdBQUcsQ0FBQyxVQUFDLFdBQXdCLElBQUssT0FBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBQSxDQUFDLEVBQ25HLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUixDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2xCLEtBQUc7QUFDRjtBQUNPO0FBQ0M7QUFBUyxJQURoQix3Q0FBVztBQUNYO0FBQW9CO0FBQVMsSUFEN0I7QUFBZTtBQUVmLFFBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQzlDLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUMvQixTQUFLO0FBQ0wsS0FBRyxDQS9FTTtBQUFFOytCQUhWLFNBQVMsU0FBQyxqREFHd0I7UUFGakMsUUFBUSxFQUFFLGxCQUtDLGdCQWpCTyxVQUFVO0FBWUwsbUJBQ3hCLG5CQWJrQyxnQkFBSCxTQUFTO0FBQUssZ0JBR3JDLFdBQVc7QUFBSTtBQUFXO0FBQ1QsNEJBZXZCLEtBQUs7QUFBTSwyQkFDWCxLQUFLO0FBQU0sMEJBQ1gsS0FBSyxTQUFDLE1BQU07QUFDViw4QkFLRixNQUFNO0FBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUUsSUFtRXRCLHlCQUFDO0FBQ0EsQ0FwRkQ7QUFBSztBQUFDO0FBQUs7QUFHVjtBQUVlO0FDaEJoQjtBQUFvRCxJQUtwRDtBQUNpQixLQVloQjtBQUNEO0FBQVM7QUFBNEI7QUFBb0I7QUFBUyxJQVR6RCx1QkFBTztBQUFRO0FBQTRCO0FBQ2pEO0FBQVMsSUFEVixVQUFlLE9BQTBCO0FBQUssUUFDNUMsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGVBQWU7QUFDL0IsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUM7QUFDN0MsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLEtBQUc7cURBWkYsUUFBUSxTQUFDLHVCQUNSO0lBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDLHVCQUNsQyxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztRQUM5Qjs7Ozs7Ozs7MExBQ1E7QUFBRSxJQVNYLHNCQUFDO0FBQ0EsQ0FkRDtBQUFLO0FBQUM7QUFBSztBQUNzQjtBQUkzQjtBQUFJO0FBQUM7QUFBSztBQUFtQztBQUdwQztBQUFJO0FBQ25COztBSGRBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFDMkJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBakJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVhBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQVhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFVQSxBQVRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQTdJQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBcUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBL0JBLEFBT0EsQUNQQSxBQVdBLEFBa0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBVkEsQUFDQSxBQUFBLEFBREEsQUFDQSxBQUFBLEFBREEsQUFJQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBY0EsQUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFVQSxBQVJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFsRkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQWJBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQWdCQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQW1FQSxBQUFBLEFBbkZBLEFDWEEsQUFLQSxBQWFBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFaQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVVBLEFBQUEsQUFiQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhpZ2hsaWdodE9wdGlvbnMgfSBmcm9tICcuL2hpZ2hsaWdodC5tb2RlbCc7XHJcblxyXG5leHBvcnQgY29uc3QgT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIaWdobGlnaHRPcHRpb25zPignT1BUSU9OUycpO1xyXG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YWtlLCBmaWx0ZXIsIHRhcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRDb25maWcsIEhpZ2hsaWdodE9wdGlvbnMsIEhpZ2hsaWdodFJlc3VsdCB9IGZyb20gJy4vaGlnaGxpZ2h0Lm1vZGVsJztcclxuaW1wb3J0IHsgT1BUSU9OUyB9IGZyb20gJy4vaGlnaGxpZ2h0LnRva2VuJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodEpTIHtcclxuXHJcbiAgaGxqczogYW55O1xyXG5cclxuICBvcHRpb25zOiBIaWdobGlnaHRPcHRpb25zID0ge1xyXG4gICAgdGhlbWU6ICdnaXRodWInLFxyXG4gICAgcGF0aDogJ2Fzc2V0cy9saWIvaGxqcycsXHJcbiAgICBhdXRvOiB0cnVlXHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBfaXNSZWFkeSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcclxuXHJcbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBoaWdobGlnaHRqcyBpcyBsb2FkZWRcclxuICBnZXQgaXNSZWFkeSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLl9pc1JlYWR5JC5waXBlKFxyXG4gICAgICBmaWx0ZXIoaXNSZWFkeSA9PiBpc1JlYWR5KSxcclxuICAgICAgdGFrZSgxKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoT1BUSU9OUykgb3B0aW9uczogSGlnaGxpZ2h0T3B0aW9ucyxcclxuICAgICAgICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIF9kb2N1bWVudDogYW55KSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9ucyB9O1xyXG4gICAgdGhpcy5faGxqc0xvYWRlcigpLnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgaGlnaGxpZ2h0KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgaWdub3JlX2lsbGVnYWxzOiBib29sZWFuLCBjb250aW51YXRpb24/OiBhbnkpOiBIaWdobGlnaHRSZXN1bHQge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5obGpzLmhpZ2hsaWdodChuYW1lLCB2YWx1ZSwgaWdub3JlX2lsbGVnYWxzLCBjb250aW51YXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGlnaGxpZ2h0QXV0byh2YWx1ZTogc3RyaW5nLCBsYW5ndWFnZVN1YnNldDogc3RyaW5nW10pOiBIaWdobGlnaHRSZXN1bHQge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5obGpzLmhpZ2hsaWdodEF1dG8odmFsdWUsIGxhbmd1YWdlU3Vic2V0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpeE1hcmt1cCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaGxqcy5maXhNYXJrdXAodmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGlnaGxpZ2h0QmxvY2soYmxvY2s6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHRoaXMuaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25maWd1cmUoY29uZmlnOiBIaWdobGlnaHRDb25maWcpIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgdGhpcy5obGpzLmNvbmZpZ3VyZShjb25maWcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdEhpZ2hsaWdodGluZygpIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgdGhpcy5obGpzLmluaXRIaWdobGlnaHRpbmcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXRIaWdobGlnaHRpbmdPbkxvYWQoKSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHRoaXMuaGxqcy5pbml0SGlnaGxpZ2h0aW5nT25Mb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlckxhbmd1YWdlKG5hbWU6IHN0cmluZywgbGFuZ3VhZ2U6IEZ1bmN0aW9uKSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHRoaXMuaGxqcy5yZWdpc3Rlckxhbmd1YWdlKG5hbWUsIGxhbmd1YWdlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxpc3RMYW5ndWFnZXMoKTogc3RyaW5nW10ge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5obGpzLmxpc3RMYW5ndWFnZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldExhbmd1YWdlKG5hbWU6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmhsanMuZ2V0TGFuZ3VhZ2UobmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9obGpzTG9hZGVyKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAodGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5faW5pdEhMSlMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3RoZW1lTG9hZGVyKCkuc3Vic2NyaWJlKCk7XHJcbiAgICAgIHJldHVybiB0aGlzLl9sb2FkU2NyaXB0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2FkIGhsanMgc2NyaXB0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfbG9hZFNjcmlwdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICBzY3JpcHQub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgc2NyaXB0LnNyYyA9IGAke3RoaXMub3B0aW9ucy5wYXRofS9oaWdobGlnaHQucGFjay5qc2A7XHJcbiAgICAgIHRoaXMuX2RvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZyb20ocHJvbWlzZSkucGlwZShcclxuICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuX2luaXRITEpTKCkpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZCBobGpzIHRoZW1lXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfdGhlbWVMb2FkZXIoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBjb25zdCBzdHlsZSA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICAgICAgc3R5bGUucmVsID0gJ3N0eWxlc2hlZXQnO1xyXG4gICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcclxuICAgICAgc3R5bGUub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgc3R5bGUuaHJlZiA9IGAke3RoaXMub3B0aW9ucy5wYXRofS9zdHlsZXMvJHt0aGlzLm9wdGlvbnMudGhlbWV9LmNzc2A7XHJcbiAgICAgIHRoaXMuX2RvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZnJvbShwcm9taXNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgaGxqcyBvbiBsb2FkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfaW5pdEhMSlMoKSB7XHJcbiAgICByZXR1cm4gb2Yoe30pLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5obGpzID0gdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcuaGxqcztcclxuICAgICAgICB0aGlzLmhsanMuY29uZmlndXJlKHRoaXMub3B0aW9ucy5jb25maWcpO1xyXG4gICAgICAgIHRoaXMuX2lzUmVhZHkkLm5leHQodHJ1ZSk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25EZXN0cm95LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgdGFrZSwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRKUyB9IGZyb20gJy4vaGlnaGxpZ2h0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRSZXN1bHQgfSBmcm9tICcuL2hpZ2hsaWdodC5tb2RlbCc7XHJcblxyXG4vKiogVGhlcmUgYXJlIDIgd2F5cyB0byBoaWdsaWdodCBhIGNvZGVcclxuICogIDEgLSB1c2luZyB0aGUgW2NvZGVdIGlucHV0IChkZWZhdWx0KSA8Y29kZSBoaWdobGlnaHQgW2NvZGVdPVwieW91ckNvZGVcIj48L2NvZGU+XHJcbiAqICAyIC0gdXNpbmcgZWxlbWVudCB0ZXh0IGNvbnRlbnQgPGNvZGU+IHt7eW91ckNvZGV9fSA8L2NvZGU+XHJcbiAqL1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbaGlnaGxpZ2h0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgZWw6IEhUTUxFbGVtZW50O1xyXG4gIGRvbU9iczogTXV0YXRpb25PYnNlcnZlcjtcclxuICBjb2RlOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgaGlnaGxpZ2h0OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbGFuZ3VhZ2U6IHN0cmluZ1tdO1xyXG4gIEBJbnB1dCgnY29kZScpXHJcbiAgc2V0IHNldENvZGUoY29kZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgdGhpcy5obGpzLmlzUmVhZHkuc3Vic2NyaWJlKCgpID0+IHRoaXMuaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsLCBjb2RlKSk7XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgaGlnaGxpZ2h0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEhpZ2hsaWdodFJlc3VsdD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBobGpzOiBIaWdobGlnaHRKUykge1xyXG4gICAgdGhpcy5lbCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICAvKiogQWNpdHZhdGUgTXV0YXRpb25PYnNlcnZlciBpZiBgYXV0b2Agb3B0aW9uIGlzIHRydWUgYW5kIGBbY29kZV1gIGlucHV0IGlzIG5vdCB1c2VkXHJcbiAgICAgKiBUaGlzIHdpbGwgaGlnaGxpZ2h0IHVzaW5nIHRoZSB0ZXh0IGNvbnRlbnQgKi9cclxuICAgIGlmICghdGhpcy5jb2RlICYmIHRoaXMuaGxqcy5vcHRpb25zLmF1dG8pIHtcclxuXHJcbiAgICAgIHRoaXMuaGxqcy5pc1JlYWR5LnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRUZXh0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAvKiogSGlnaGxpZ2h0IHdoZW4gdGV4dCBjb250ZW50IGNoYW5nZXMgKi9cclxuICAgICAgICB0aGlzLmRvbU9icyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMuaGlnaGxpZ2h0VGV4dENvbnRlbnQoKSk7XHJcbiAgICAgICAgdGhpcy5kb21PYnMub2JzZXJ2ZSh0aGlzLmVsLCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogSGlnaGxpZ2h0IHVzaW5nIGVsZW1lbnQgdGV4dCBjb250ZW50ICovXHJcbiAgaGlnaGxpZ2h0VGV4dENvbnRlbnQoKSB7XHJcbiAgICBpZiAoIXRoaXMuaGlnaGxpZ2h0KSB7XHJcbiAgICAgIGlmICh0aGlzLmVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2NvZGUnKSB7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRFbGVtZW50KHRoaXMuZWwsIHRoaXMuZWwuaW5uZXJUZXh0LnRyaW0oKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBbSGlnaGxpZ2h0RGlyZWN0aXZlXTogVXNlICdoaWdobGlnaHQnIG9uIDxjb2RlPiBlbGVtZW50IG9ubHlgKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhpZ2hsaWdodCA9PT0gJ2FsbCcpIHtcclxuICAgICAgdGhpcy5oaWdobGlnaHRDaGlsZHJlbih0aGlzLmVsLCAncHJlIGNvZGUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuaGlnaGxpZ2h0Q2hpbGRyZW4odGhpcy5lbCwgdGhpcy5oaWdobGlnaHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEhpZ2hsaWdodCBhIGNvZGUgYmxvY2sgKi9cclxuICBoaWdobGlnaHRFbGVtZW50KGVsOiBIVE1MRWxlbWVudCwgY29kZTogc3RyaW5nKSB7XHJcblxyXG4gICAgY29uc3QgcmVzOiBIaWdobGlnaHRSZXN1bHQgPSB0aGlzLmhsanMuaGlnaGxpZ2h0QXV0byhjb2RlLCB0aGlzLmxhbmd1YWdlKTtcclxuICAgIGlmIChyZXMudmFsdWUgIT09IGVsLmlubmVySFRNTCkge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGVsLCAnaGxqcycpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KGVsLCAnaW5uZXJIVE1MJywgcmVzLnZhbHVlKTtcclxuICAgICAgdGhpcy5oaWdobGlnaHRlZC5lbWl0KHJlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogSGlnaGxpZ2h0IG11bHRpcGxlIGNvZGUgYmxvY2tzICovXHJcbiAgaGlnaGxpZ2h0Q2hpbGRyZW4oZWw6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nKSB7XHJcblxyXG4gICAgY29uc3QgY29kZUVsZW1lbnRzID0gZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblxyXG4gICAgLyoqIGhpZ2hsaWdodCBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIHNlbGVjdG9yICovXHJcbiAgICBmcm9tKGNvZGVFbGVtZW50cykucGlwZShcclxuICAgICAgZmlsdGVyKChjb2RlOiBIVE1MRWxlbWVudCkgPT4gY29kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiBjb2RlLmNoaWxkTm9kZXNbMF0ubm9kZU5hbWUgPT09ICcjdGV4dCcpLFxyXG4gICAgICBtYXAoKGNvZGVFbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdGhpcy5oaWdobGlnaHRFbGVtZW50KGNvZGVFbGVtZW50LCBjb2RlRWxlbWVudC5pbm5lclRleHQudHJpbSgpKSksXHJcbiAgICAgIHRha2UoMSlcclxuICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIC8qKiBEaXNjb25uZWN0IE11dGF0aW9uT2JzZXJ2ZXIgKi9cclxuICAgIGlmICghdGhpcy5jb2RlICYmIHRoaXMuaGxqcy5vcHRpb25zLmF1dG8pIHtcclxuICAgICAgdGhpcy5kb21PYnMuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHREaXJlY3RpdmUgfSBmcm9tICcuL2hpZ2hsaWdodC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRPcHRpb25zIH0gZnJvbSAnLi9oaWdobGlnaHQubW9kZWwnO1xyXG5pbXBvcnQgeyBPUFRJT05TIH0gZnJvbSAnLi9oaWdobGlnaHQudG9rZW4nO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtIaWdobGlnaHREaXJlY3RpdmVdLFxyXG4gIGV4cG9ydHM6IFtIaWdobGlnaHREaXJlY3RpdmVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM/OiBIaWdobGlnaHRPcHRpb25zKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogSGlnaGxpZ2h0TW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7cHJvdmlkZTogT1BUSU9OUywgdXNlVmFsdWU6IG9wdGlvbnN9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==