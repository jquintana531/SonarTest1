/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter } from '@angular/core';
import { from } from 'rxjs';
import { map, take, filter } from 'rxjs/operators';
import { HighlightJS } from './highlight.service';
/**
 * There are 2 ways to higlight a code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './highlight.service';
var HighlightDirective = /** @class */ (function () {
    function HighlightDirective(el, renderer, hljs) {
        this.renderer = renderer;
        this.hljs = hljs;
        this.highlighted = new EventEmitter();
        this.el = el.nativeElement;
    }
    Object.defineProperty(HighlightDirective.prototype, "setCode", {
        set: /**
         * @param {?} code
         * @return {?}
         */
        function (code) {
            var _this = this;
            this.code = code;
            this.hljs.isReady.subscribe(function () { return _this.highlightElement(_this.el, code); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
         * This will highlight using the text content */
        if (!this.code && this.hljs.options.auto) {
            this.hljs.isReady.subscribe(function () {
                _this.highlightTextContent();
                /** Highlight when text content changes */
                _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                _this.domObs.observe(_this.el, { childList: true, subtree: true });
            });
        }
    };
    /** Highlight using element text content */
    /**
     * Highlight using element text content
     * @return {?}
     */
    HighlightDirective.prototype.highlightTextContent = /**
     * Highlight using element text content
     * @return {?}
     */
    function () {
        if (!this.highlight) {
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn("[HighlightDirective]: Use 'highlight' on <code> element only");
            }
        }
        else if (this.highlight === 'all') {
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            this.highlightChildren(this.el, this.highlight);
        }
    };
    /** Highlight a code block */
    /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    HighlightDirective.prototype.highlightElement = /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    function (el, code) {
        /** @type {?} */
        var res = this.hljs.highlightAuto(code, this.language);
        if (res.value !== el.innerHTML) {
            this.renderer.addClass(el, 'hljs');
            this.renderer.setProperty(el, 'innerHTML', res.value);
            this.highlighted.emit(res);
        }
    };
    /** Highlight multiple code blocks */
    /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    HighlightDirective.prototype.highlightChildren = /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    function (el, selector) {
        var _this = this;
        /** @type {?} */
        var codeElements = el.querySelectorAll(selector);
        /** highlight children with the same selector */
        from(codeElements).pipe(filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), take(1)).subscribe();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** Disconnect MutationObserver */
        if (!this.code && this.hljs.options.auto) {
            this.domObs.disconnect();
        }
    };
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HighlightJS }
    ]; };
    HighlightDirective.propDecorators = {
        highlight: [{ type: Input }],
        language: [{ type: Input }],
        setCode: [{ type: Input, args: ['code',] }],
        highlighted: [{ type: Output }]
    };
HighlightDirective.ɵfac = function HighlightDirective_Factory(t) { return new (t || HighlightDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HighlightJS)); };
HighlightDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HighlightDirective, selectors: [["", "highlight", ""]], inputs: { setCode: ["code", "setCode"], highlight: "highlight", language: "language" }, outputs: { highlighted: "highlighted" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightDirective, [{
        type: Directive,
        args: [{
                selector: '[highlight]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.HighlightJS }]; }, { highlighted: [{
            type: Output
        }], setCode: [{
            type: Input,
            args: ['code']
        }], highlight: [{
            type: Input
        }], language: [{
            type: Input
        }] }); })();
    return HighlightDirective;
}());
export { HighlightDirective };
if (false) {
    /** @type {?} */
    HighlightDirective.prototype.el;
    /** @type {?} */
    HighlightDirective.prototype.domObs;
    /** @type {?} */
    HighlightDirective.prototype.code;
    /** @type {?} */
    HighlightDirective.prototype.highlight;
    /** @type {?} */
    HighlightDirective.prototype.language;
    /** @type {?} */
    HighlightDirective.prototype.highlighted;
    /** @type {?} */
    HighlightDirective.prototype.renderer;
    /** @type {?} */
    HighlightDirective.prototype.hljs;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmd4LWhpZ2hsaWdodGpzL2xpYi9oaWdobGlnaHQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWEsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QixPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQ7QUFBSztBQUF3QztBQUdiO0FBQ3BCOzs7QUFHWjtBQUdVLElBZVIsNEJBQVksRUFBYyxFQUFVLFFBQW1CLEVBQVUsSUFBaUI7QUFDcEYsUUFEc0MsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFFLFFBQVEsU0FBSSxHQUFKLElBQUksQ0FBYTtBQUFFLFFBRjFFLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQW1CLENBQUM7QUFDOUQsUUFFSSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDL0IsSUFBRSxDQUFDO0FBQ0gsSUFYRSxzQkFDSSx1Q0FBTztBQUFLO0FBQ2I7QUFDSztBQUF3QjtBQUFhLFFBSDdDLFVBQ1ksSUFBWTtBQUMxQixZQUZFLGlCQUlDO0FBQ0gsWUFISSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNyQixZQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQXBDLENBQW9DLENBQUMsQ0FBQztBQUM1RSxRQUFFLENBQUM7QUFDRjtBQUN5QjtB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LEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFjQSxBQVpBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFsRkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQWJBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQWdCQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQW1FQSxBQUFBLEFBQUEsQUFuRkEsQUFtRkEsQUFoRkEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBT0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIE9uRGVzdHJveSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHRha2UsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0SlMgfSBmcm9tICcuL2hpZ2hsaWdodC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0UmVzdWx0IH0gZnJvbSAnLi9oaWdobGlnaHQubW9kZWwnO1xyXG5cclxuLyoqIFRoZXJlIGFyZSAyIHdheXMgdG8gaGlnbGlnaHQgYSBjb2RlXHJcbiAqICAxIC0gdXNpbmcgdGhlIFtjb2RlXSBpbnB1dCAoZGVmYXVsdCkgPGNvZGUgaGlnaGxpZ2h0IFtjb2RlXT1cInlvdXJDb2RlXCI+PC9jb2RlPlxyXG4gKiAgMiAtIHVzaW5nIGVsZW1lbnQgdGV4dCBjb250ZW50IDxjb2RlPiB7e3lvdXJDb2RlfX0gPC9jb2RlPlxyXG4gKi9cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2hpZ2hsaWdodF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIGVsOiBIVE1MRWxlbWVudDtcclxuICBkb21PYnM6IE11dGF0aW9uT2JzZXJ2ZXI7XHJcbiAgY29kZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGhpZ2hsaWdodDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGxhbmd1YWdlOiBzdHJpbmdbXTtcclxuICBASW5wdXQoJ2NvZGUnKVxyXG4gIHNldCBzZXRDb2RlKGNvZGU6IHN0cmluZykge1xyXG4gICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgIHRoaXMuaGxqcy5pc1JlYWR5LnN1YnNjcmliZSgoKSA9PiB0aGlzLmhpZ2hsaWdodEVsZW1lbnQodGhpcy5lbCwgY29kZSkpO1xyXG4gIH1cclxuXHJcbiAgQE91dHB1dCgpIGhpZ2hsaWdodGVkID0gbmV3IEV2ZW50RW1pdHRlcjxIaWdobGlnaHRSZXN1bHQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaGxqczogSGlnaGxpZ2h0SlMpIHtcclxuICAgIHRoaXMuZWwgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgLyoqIEFjaXR2YXRlIE11dGF0aW9uT2JzZXJ2ZXIgaWYgYGF1dG9gIG9wdGlvbiBpcyB0cnVlIGFuZCBgW2NvZGVdYCBpbnB1dCBpcyBub3QgdXNlZFxyXG4gICAgICogVGhpcyB3aWxsIGhpZ2hsaWdodCB1c2luZyB0aGUgdGV4dCBjb250ZW50ICovXHJcbiAgICBpZiAoIXRoaXMuY29kZSAmJiB0aGlzLmhsanMub3B0aW9ucy5hdXRvKSB7XHJcblxyXG4gICAgICB0aGlzLmhsanMuaXNSZWFkeS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0VGV4dENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgLyoqIEhpZ2hsaWdodCB3aGVuIHRleHQgY29udGVudCBjaGFuZ2VzICovXHJcbiAgICAgICAgdGhpcy5kb21PYnMgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB0aGlzLmhpZ2hsaWdodFRleHRDb250ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuZG9tT2JzLm9ic2VydmUodGhpcy5lbCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEhpZ2hsaWdodCB1c2luZyBlbGVtZW50IHRleHQgY29udGVudCAqL1xyXG4gIGhpZ2hsaWdodFRleHRDb250ZW50KCkge1xyXG4gICAgaWYgKCF0aGlzLmhpZ2hsaWdodCkge1xyXG4gICAgICBpZiAodGhpcy5lbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdjb2RlJykge1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsLCB0aGlzLmVsLmlubmVyVGV4dC50cmltKCkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgW0hpZ2hsaWdodERpcmVjdGl2ZV06IFVzZSAnaGlnaGxpZ2h0JyBvbiA8Y29kZT4gZWxlbWVudCBvbmx5YCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodGhpcy5oaWdobGlnaHQgPT09ICdhbGwnKSB7XHJcbiAgICAgIHRoaXMuaGlnaGxpZ2h0Q2hpbGRyZW4odGhpcy5lbCwgJ3ByZSBjb2RlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmhpZ2hsaWdodENoaWxkcmVuKHRoaXMuZWwsIHRoaXMuaGlnaGxpZ2h0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBIaWdobGlnaHQgYSBjb2RlIGJsb2NrICovXHJcbiAgaGlnaGxpZ2h0RWxlbWVudChlbDogSFRNTEVsZW1lbnQsIGNvZGU6IHN0cmluZykge1xyXG5cclxuICAgIGNvbnN0IHJlczogSGlnaGxpZ2h0UmVzdWx0ID0gdGhpcy5obGpzLmhpZ2hsaWdodEF1dG8oY29kZSwgdGhpcy5sYW5ndWFnZSk7XHJcbiAgICBpZiAocmVzLnZhbHVlICE9PSBlbC5pbm5lckhUTUwpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhlbCwgJ2hsanMnKTtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShlbCwgJ2lubmVySFRNTCcsIHJlcy52YWx1ZSk7XHJcbiAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQuZW1pdChyZXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEhpZ2hsaWdodCBtdWx0aXBsZSBjb2RlIGJsb2NrcyAqL1xyXG4gIGhpZ2hsaWdodENoaWxkcmVuKGVsOiBIVE1MRWxlbWVudCwgc2VsZWN0b3I6IHN0cmluZykge1xyXG5cclxuICAgIGNvbnN0IGNvZGVFbGVtZW50cyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG5cclxuICAgIC8qKiBoaWdobGlnaHQgY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBzZWxlY3RvciAqL1xyXG4gICAgZnJvbShjb2RlRWxlbWVudHMpLnBpcGUoXHJcbiAgICAgIGZpbHRlcigoY29kZTogSFRNTEVsZW1lbnQpID0+IGNvZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiYgY29kZS5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lID09PSAnI3RleHQnKSxcclxuICAgICAgbWFwKChjb2RlRWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHRoaXMuaGlnaGxpZ2h0RWxlbWVudChjb2RlRWxlbWVudCwgY29kZUVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKSkpLFxyXG4gICAgICB0YWtlKDEpXHJcbiAgICApLnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAvKiogRGlzY29ubmVjdCBNdXRhdGlvbk9ic2VydmVyICovXHJcbiAgICBpZiAoIXRoaXMuY29kZSAmJiB0aGlzLmhsanMub3B0aW9ucy5hdXRvKSB7XHJcbiAgICAgIHRoaXMuZG9tT2JzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19