/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, from, of } from 'rxjs';
import { take, filter, tap, switchMap } from 'rxjs/operators';
import { OPTIONS } from './highlight.token';
import * as i0 from "@angular/core";
import * as i1 from "./highlight.token";
import * as i2 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
var HighlightJS = /** @class */ (function () {
    function HighlightJS(options, _document) {
        this._document = _document;
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = tslib_1.__assign({}, this.options, options);
        this._hljsLoader().subscribe();
    }
    Object.defineProperty(HighlightJS.prototype, "isReady", {
        // Stream that emits when highlightjs is loaded
        get: 
        // Stream that emits when highlightjs is loaded
        /**
         * @return {?}
         */
        function () {
            return this._isReady$.pipe(filter(function (isReady) { return isReady; }), take(1));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    HighlightJS.prototype.highlight = /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    function (name, value, ignore_illegals, continuation) {
        if (this.hljs) {
            return this.hljs.highlight(name, value, ignore_illegals, continuation);
        }
    };
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    HighlightJS.prototype.highlightAuto = /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    function (value, languageSubset) {
        if (this.hljs) {
            return this.hljs.highlightAuto(value, languageSubset);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    HighlightJS.prototype.fixMarkup = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.hljs) {
            return this.hljs.fixMarkup(value);
        }
    };
    /**
     * @param {?} block
     * @return {?}
     */
    HighlightJS.prototype.highlightBlock = /**
     * @param {?} block
     * @return {?}
     */
    function (block) {
        if (this.hljs) {
            this.hljs.highlightBlock(block);
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    HighlightJS.prototype.configure = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.hljs) {
            this.hljs.configure(config);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlighting = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlighting();
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlightingOnLoad = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlightingOnLoad();
        }
    };
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    HighlightJS.prototype.registerLanguage = /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    function (name, language) {
        if (this.hljs) {
            this.hljs.registerLanguage(name, language);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.listLanguages = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            return this.hljs.listLanguages();
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    HighlightJS.prototype.getLanguage = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.hljs) {
            return this.hljs.getLanguage(name);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype._hljsLoader = /**
     * @return {?}
     */
    function () {
        if (this._document.defaultView.hljs) {
            return this._initHLJS();
        }
        else {
            this._themeLoader().subscribe();
            return this._loadScript();
        }
    };
    /**
     * Load hljs script
     */
    /**
     * Load hljs script
     * @return {?}
     */
    HighlightJS.prototype._loadScript = /**
     * Load hljs script
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var script = _this._document.createElement('script');
            script.async = true;
            script.type = 'text/javascript';
            script.onload = resolve;
            script.src = _this.options.path + "/highlight.pack.js";
            _this._document.head.appendChild(script);
        });
        return from(promise).pipe(switchMap(function () { return _this._initHLJS(); }));
    };
    /**
     * Load hljs theme
     */
    /**
     * Load hljs theme
     * @return {?}
     */
    HighlightJS.prototype._themeLoader = /**
     * Load hljs theme
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var style = _this._document.createElement('link');
            style.rel = 'stylesheet';
            style.type = 'text/css';
            style.onload = resolve;
            style.href = _this.options.path + "/styles/" + _this.options.theme + ".css";
            _this._document.head.appendChild(style);
        });
        return from(promise);
    };
    /**
     * Initialize hljs on load
     */
    /**
     * Initialize hljs on load
     * @return {?}
     */
    HighlightJS.prototype._initHLJS = /**
     * Initialize hljs on load
     * @return {?}
     */
    function () {
        var _this = this;
        return of({}).pipe(tap(function () {
            _this.hljs = _this._document.defaultView.hljs;
            _this.hljs.configure(_this.options.config);
            _this._isReady$.next(true);
        }));
    };
    /** @nocollapse */
    HighlightJS.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ HighlightJS.ngInjectableDef = i0.defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(i0.inject(i1.OPTIONS, 8), i0.inject(i2.DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.ɵfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(ɵngcc0.ɵɵinject(OPTIONS, 8), ɵngcc0.ɵɵinject(DOCUMENT)); };
HighlightJS.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HighlightJS, factory: function (t) { return HighlightJS.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
    return HighlightJS;
}());
export { HighlightJS };
if (false) {
    /** @type {?} */
    HighlightJS.prototype.hljs;
    /** @type {?} */
    HighlightJS.prototype.options;
    /** @type {?} */
    HighlightJS.prototype._isReady$;
    /** @type {?} */
    HighlightJS.prototype._document;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5neC1oaWdobGlnaHRqcy9saWIvaGlnaGxpZ2h0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVDO0FBRXFCO0FBSWQ7O0FBTFA7QUFHTyxJQW9CTCxxQkFBeUMsT0FBeUIsRUFDNUIsU0FBYztBQUN0RCxRQUR3QyxjQUFTLEdBQVQsU0FBUyxDQUFLO0FBQUUsUUFqQnRELFlBQU8sR0FBcUI7QUFDOUIsWUFBSSxLQUFLLEVBQUUsUUFBUTtBQUNuQixZQUFJLElBQUksRUFBRSxpQkFBaUI7QUFDM0IsWUFBSSxJQUFJLEVBQUUsSUFBSTtBQUNkLFNBQUcsQ0FBQztBQUNKLFFBQ1UsY0FBUyxHQUFHLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pELFFBV0ksSUFBSSxDQUFDLE9BQU8sd0JBQVEsSUFBSSxDQUFDLE9BQU8sRUFBSyxPQUFPLENBQUUsQ0FBQztBQUNuRCxRQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSCxJQVpFLHNCQUFJLGdDQUFPO0FBQUssUUFEaEIsK0NBQStDO0FBQ2pEO0FBQWU7QUFDaUI7QUFDcEI7QUFDWDtBQUFhLFFBSFo7QUFBZSxZQUNiLE9BQU8sSUFBSSxDQUFD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QUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBdUJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBakJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWEEsQUFBQSxBQUFBLEFBREEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQVhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFFQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBVUEsQUFUQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUE3SUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQXFCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQS9CQSxBQXFKQSxBQTlJQSxBQThJQSxBQTNJQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBSUEsQUFFQSxBQUFBLEFBV0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2UsIGZpbHRlciwgdGFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEhpZ2hsaWdodENvbmZpZywgSGlnaGxpZ2h0T3B0aW9ucywgSGlnaGxpZ2h0UmVzdWx0IH0gZnJvbSAnLi9oaWdobGlnaHQubW9kZWwnO1xyXG5pbXBvcnQgeyBPUFRJT05TIH0gZnJvbSAnLi9oaWdobGlnaHQudG9rZW4nO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0SlMge1xyXG5cclxuICBobGpzOiBhbnk7XHJcblxyXG4gIG9wdGlvbnM6IEhpZ2hsaWdodE9wdGlvbnMgPSB7XHJcbiAgICB0aGVtZTogJ2dpdGh1YicsXHJcbiAgICBwYXRoOiAnYXNzZXRzL2xpYi9obGpzJyxcclxuICAgIGF1dG86IHRydWVcclxuICB9O1xyXG5cclxuICBwcml2YXRlIF9pc1JlYWR5JCA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xyXG5cclxuICAvLyBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGhpZ2hsaWdodGpzIGlzIGxvYWRlZFxyXG4gIGdldCBpc1JlYWR5KCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzUmVhZHkkLnBpcGUoXHJcbiAgICAgIGZpbHRlcihpc1JlYWR5ID0+IGlzUmVhZHkpLFxyXG4gICAgICB0YWtlKDEpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChPUFRJT05TKSBvcHRpb25zOiBIaWdobGlnaHRPcHRpb25zLFxyXG4gICAgICAgICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvY3VtZW50OiBhbnkpIHtcclxuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4udGhpcy5vcHRpb25zLCAuLi5vcHRpb25zIH07XHJcbiAgICB0aGlzLl9obGpzTG9hZGVyKCkuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICBoaWdobGlnaHQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBpZ25vcmVfaWxsZWdhbHM6IGJvb2xlYW4sIGNvbnRpbnVhdGlvbj86IGFueSk6IEhpZ2hsaWdodFJlc3VsdCB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmhsanMuaGlnaGxpZ2h0KG5hbWUsIHZhbHVlLCBpZ25vcmVfaWxsZWdhbHMsIGNvbnRpbnVhdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoaWdobGlnaHRBdXRvKHZhbHVlOiBzdHJpbmcsIGxhbmd1YWdlU3Vic2V0OiBzdHJpbmdbXSk6IEhpZ2hsaWdodFJlc3VsdCB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmhsanMuaGlnaGxpZ2h0QXV0byh2YWx1ZSwgbGFuZ3VhZ2VTdWJzZXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZml4TWFya3VwKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5obGpzLmZpeE1hcmt1cCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoaWdobGlnaHRCbG9jayhibG9jazogSFRNTEVsZW1lbnQpIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgdGhpcy5obGpzLmhpZ2hsaWdodEJsb2NrKGJsb2NrKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbmZpZ3VyZShjb25maWc6IEhpZ2hsaWdodENvbmZpZykge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICB0aGlzLmhsanMuY29uZmlndXJlKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0SGlnaGxpZ2h0aW5nKCkge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICB0aGlzLmhsanMuaW5pdEhpZ2hsaWdodGluZygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdEhpZ2hsaWdodGluZ09uTG9hZCgpIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgdGhpcy5obGpzLmluaXRIaWdobGlnaHRpbmdPbkxvYWQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyTGFuZ3VhZ2UobmFtZTogc3RyaW5nLCBsYW5ndWFnZTogRnVuY3Rpb24pIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgdGhpcy5obGpzLnJlZ2lzdGVyTGFuZ3VhZ2UobmFtZSwgbGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGlzdExhbmd1YWdlcygpOiBzdHJpbmdbXSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmhsanMubGlzdExhbmd1YWdlcygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0TGFuZ3VhZ2UobmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaGxqcy5nZXRMYW5ndWFnZShuYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2hsanNMb2FkZXIoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICh0aGlzLl9kb2N1bWVudC5kZWZhdWx0Vmlldy5obGpzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9pbml0SExKUygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fdGhlbWVMb2FkZXIoKS5zdWJzY3JpYmUoKTtcclxuICAgICAgcmV0dXJuIHRoaXMuX2xvYWRTY3JpcHQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWQgaGxqcyBzY3JpcHRcclxuICAgKi9cclxuICBwcml2YXRlIF9sb2FkU2NyaXB0KCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgY29uc3Qgc2NyaXB0ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XHJcbiAgICAgIHNjcmlwdC5vbmxvYWQgPSByZXNvbHZlO1xyXG4gICAgICBzY3JpcHQuc3JjID0gYCR7dGhpcy5vcHRpb25zLnBhdGh9L2hpZ2hsaWdodC5wYWNrLmpzYDtcclxuICAgICAgdGhpcy5fZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5faW5pdEhMSlMoKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2FkIGhsanMgdGhlbWVcclxuICAgKi9cclxuICBwcml2YXRlIF90aGVtZUxvYWRlcigpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG4gICAgICBzdHlsZS5yZWwgPSAnc3R5bGVzaGVldCc7XHJcbiAgICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xyXG4gICAgICBzdHlsZS5vbmxvYWQgPSByZXNvbHZlO1xyXG4gICAgICBzdHlsZS5ocmVmID0gYCR7dGhpcy5vcHRpb25zLnBhdGh9L3N0eWxlcy8ke3RoaXMub3B0aW9ucy50aGVtZX0uY3NzYDtcclxuICAgICAgdGhpcy5fZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmcm9tKHByb21pc2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBobGpzIG9uIGxvYWRcclxuICAgKi9cclxuICBwcml2YXRlIF9pbml0SExKUygpIHtcclxuICAgIHJldHVybiBvZih7fSkucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLmhsanMgPSB0aGlzLl9kb2N1bWVudC5kZWZhdWx0Vmlldy5obGpzO1xyXG4gICAgICAgIHRoaXMuaGxqcy5jb25maWd1cmUodGhpcy5vcHRpb25zLmNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy5faXNSZWFkeSQubmV4dCh0cnVlKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==