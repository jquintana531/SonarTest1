(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-highlightjs', ['@angular/core','exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (factory(global.ng.core,(global['ngx-highlightjs'] = {}),global.ng.core,global.ng.common,global.rxjs,global.rxjs.operators));
}(this, (function (Éµngcc0,exports,i0,i2,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OPTIONS = new i0.InjectionToken('OPTIONS');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var HighlightJS = /** @class */ (function () {
        function HighlightJS(options, _document) {
            this._document = _document;
            this.options = {
                theme: 'github',
                path: 'assets/lib/hljs',
                auto: true
            };
            this._isReady$ = new rxjs.BehaviorSubject(false);
            this.options = __assign({}, this.options, options);
            this._hljsLoader().subscribe();
        }
        Object.defineProperty(HighlightJS.prototype, "isReady", {
            // Stream that emits when highlightjs is loaded
            get: 
            // Stream that emits when highlightjs is loaded
            /**
             * @return {?}
             */
            function () {
                return this._isReady$.pipe(operators.filter(function (isReady) { return isReady; }), operators.take(1));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} name
         * @param {?} value
         * @param {?} ignore_illegals
         * @param {?=} continuation
         * @return {?}
         */
        HighlightJS.prototype.highlight = /**
         * @param {?} name
         * @param {?} value
         * @param {?} ignore_illegals
         * @param {?=} continuation
         * @return {?}
         */
            function (name, value, ignore_illegals, continuation) {
                if (this.hljs) {
                    return this.hljs.highlight(name, value, ignore_illegals, continuation);
                }
            };
        /**
         * @param {?} value
         * @param {?} languageSubset
         * @return {?}
         */
        HighlightJS.prototype.highlightAuto = /**
         * @param {?} value
         * @param {?} languageSubset
         * @return {?}
         */
            function (value, languageSubset) {
                if (this.hljs) {
                    return this.hljs.highlightAuto(value, languageSubset);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        HighlightJS.prototype.fixMarkup = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.hljs) {
                    return this.hljs.fixMarkup(value);
                }
            };
        /**
         * @param {?} block
         * @return {?}
         */
        HighlightJS.prototype.highlightBlock = /**
         * @param {?} block
         * @return {?}
         */
            function (block) {
                if (this.hljs) {
                    this.hljs.highlightBlock(block);
                }
            };
        /**
         * @param {?} config
         * @return {?}
         */
        HighlightJS.prototype.configure = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (this.hljs) {
                    this.hljs.configure(config);
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype.initHighlighting = /**
         * @return {?}
         */
            function () {
                if (this.hljs) {
                    this.hljs.initHighlighting();
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype.initHighlightingOnLoad = /**
         * @return {?}
         */
            function () {
                if (this.hljs) {
                    this.hljs.initHighlightingOnLoad();
                }
            };
        /**
         * @param {?} name
         * @param {?} language
         * @return {?}
         */
        HighlightJS.prototype.registerLanguage = /**
         * @param {?} name
         * @param {?} language
         * @return {?}
         */
            function (name, language) {
                if (this.hljs) {
                    this.hljs.registerLanguage(name, language);
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype.listLanguages = /**
         * @return {?}
         */
            function () {
                if (this.hljs) {
                    return this.hljs.listLanguages();
                }
            };
        /**
         * @param {?} name
         * @return {?}
         */
        HighlightJS.prototype.getLanguage = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (this.hljs) {
                    return this.hljs.getLanguage(name);
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype._hljsLoader = /**
         * @return {?}
         */
            function () {
                if (this._document.defaultView.hljs) {
                    return this._initHLJS();
                }
                else {
                    this._themeLoader().subscribe();
                    return this._loadScript();
                }
            };
        /**
         * Load hljs script
         */
        /**
         * Load hljs script
         * @return {?}
         */
        HighlightJS.prototype._loadScript = /**
         * Load hljs script
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var promise = new Promise(function (resolve) {
                    /** @type {?} */
                    var script = _this._document.createElement('script');
                    script.async = true;
                    script.type = 'text/javascript';
                    script.onload = resolve;
                    script.src = _this.options.path + "/highlight.pack.js";
                    _this._document.head.appendChild(script);
                });
                return rxjs.from(promise).pipe(operators.switchMap(function () { return _this._initHLJS(); }));
            };
        /**
         * Load hljs theme
         */
        /**
         * Load hljs theme
         * @return {?}
         */
        HighlightJS.prototype._themeLoader = /**
         * Load hljs theme
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var promise = new Promise(function (resolve) {
                    /** @type {?} */
                    var style = _this._document.createElement('link');
                    style.rel = 'stylesheet';
                    style.type = 'text/css';
                    style.onload = resolve;
                    style.href = _this.options.path + "/styles/" + _this.options.theme + ".css";
                    _this._document.head.appendChild(style);
                });
                return rxjs.from(promise);
            };
        /**
         * Initialize hljs on load
         */
        /**
         * Initialize hljs on load
         * @return {?}
         */
        HighlightJS.prototype._initHLJS = /**
         * Initialize hljs on load
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.of({}).pipe(operators.tap(function () {
                    _this.hljs = _this._document.defaultView.hljs;
                    _this.hljs.configure(_this.options.config);
                    _this._isReady$.next(true);
                }));
            };
        /** @nocollapse */
        HighlightJS.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [OPTIONS,] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i2.DOCUMENT,] }] }
            ];
        };
        /** @nocollapse */ HighlightJS.ngInjectableDef = i0.defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(i0.inject(OPTIONS, 8), i0.inject(i2.DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.Éµfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(Éµngcc0.ÉµÉµinject(OPTIONS, 8), Éµngcc0.ÉµÉµinject(i2.DOCUMENT)); };
HighlightJS.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: HighlightJS, factory: function (t) { return HighlightJS.Éµfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HighlightJS, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.DOCUMENT]
            }] }]; }, null); })();
        return HighlightJS;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * There are 2 ways to higlight a code
     *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
     *  2 - using element text content <code> {{yourCode}} </code>
     */
    var HighlightDirective = /** @class */ (function () {
        function HighlightDirective(el, renderer, hljs) {
            this.renderer = renderer;
            this.hljs = hljs;
            this.highlighted = new i0.EventEmitter();
            this.el = el.nativeElement;
        }
        Object.defineProperty(HighlightDirective.prototype, "setCode", {
            set: /**
             * @param {?} code
             * @return {?}
             */ function (code) {
                var _this = this;
                this.code = code;
                this.hljs.isReady.subscribe(function () { return _this.highlightElement(_this.el, code); });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        HighlightDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
                 * This will highlight using the text content */
                if (!this.code && this.hljs.options.auto) {
                    this.hljs.isReady.subscribe(function () {
                        _this.highlightTextContent();
                        /** Highlight when text content changes */
                        _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                        _this.domObs.observe(_this.el, { childList: true, subtree: true });
                    });
                }
            };
        /** Highlight using element text content */
        /**
         * Highlight using element text content
         * @return {?}
         */
        HighlightDirective.prototype.highlightTextContent = /**
         * Highlight using element text content
         * @return {?}
         */
            function () {
                if (!this.highlight) {
                    if (this.el.tagName.toLowerCase() === 'code') {
                        this.highlightElement(this.el, this.el.innerText.trim());
                    }
                    else {
                        console.warn("[HighlightDirective]: Use 'highlight' on <code> element only");
                    }
                }
                else if (this.highlight === 'all') {
                    this.highlightChildren(this.el, 'pre code');
                }
                else {
                    this.highlightChildren(this.el, this.highlight);
                }
            };
        /** Highlight a code block */
        /**
         * Highlight a code block
         * @param {?} el
         * @param {?} code
         * @return {?}
         */
        HighlightDirective.prototype.highlightElement = /**
         * Highlight a code block
         * @param {?} el
         * @param {?} code
         * @return {?}
         */
            function (el, code) {
                /** @type {?} */
                var res = this.hljs.highlightAuto(code, this.language);
                if (res.value !== el.innerHTML) {
                    this.renderer.addClass(el, 'hljs');
                    this.renderer.setProperty(el, 'innerHTML', res.value);
                    this.highlighted.emit(res);
                }
            };
        /** Highlight multiple code blocks */
        /**
         * Highlight multiple code blocks
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
        HighlightDirective.prototype.highlightChildren = /**
         * Highlight multiple code blocks
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
            function (el, selector) {
                var _this = this;
                /** @type {?} */
                var codeElements = el.querySelectorAll(selector);
                /** highlight children with the same selector */
                rxjs.from(codeElements).pipe(operators.filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), operators.map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), operators.take(1)).subscribe();
            };
        /**
         * @return {?}
         */
        HighlightDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                /** Disconnect MutationObserver */
                if (!this.code && this.hljs.options.auto) {
                    this.domObs.disconnect();
                }
            };
        /** @nocollapse */
        HighlightDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: HighlightJS }
            ];
        };
        HighlightDirective.propDecorators = {
            highlight: [{ type: i0.Input }],
            language: [{ type: i0.Input }],
            setCode: [{ type: i0.Input, args: ['code',] }],
            highlighted: [{ type: i0.Output }]
        };
HighlightDirective.Éµfac = function HighlightDirective_Factory(t) { return new (t || HighlightDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(HighlightJS)); };
HighlightDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: HighlightDirective, selectors: [["", "highlight", ""]], inputs: { setCode: ["code", "setCode"], highlight: "highlight", language: "language" }, outputs: { highlighted: "highlighted" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HighlightDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[highlight]'
            }]
    }], function () { return [{ type: Éµngcc0.ElementRef }, { type: Éµngcc0.Renderer2 }, { type: HighlightJS }]; }, { highlighted: [{
            type: i0.Output
        }], setCode: [{
            type: i0.Input,
            args: ['code']
        }], highlight: [{
            type: i0.Input
        }], language: [{
            type: i0.Input
        }] }); })();
        return HighlightDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var HighlightModule = /** @class */ (function () {
        function HighlightModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        HighlightModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: HighlightModule,
                    providers: [
                        { provide: OPTIONS, useValue: options }
                    ]
                };
            };
HighlightModule.Éµfac = function HighlightModule_Factory(t) { return new (t || HighlightModule)(); };
HighlightModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: HighlightModule });
HighlightModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HighlightModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [HighlightDirective],
                exports: [HighlightDirective]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HighlightModule, { declarations: [HighlightDirective], exports: [HighlightDirective] }); })();
        return HighlightModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.HighlightModule = HighlightModule;
    exports.HighlightJS = HighlightJS;
    exports.HighlightDirective = HighlightDirective;
    exports.Éµa = OPTIONS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodGpzLnVtZC5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5neC1oaWdobGlnaHRqcy9saWIvaGlnaGxpZ2h0LnRva2VuLnRzIiwibmd4LWhpZ2hsaWdodGpzL2xpYi9oaWdobGlnaHQuc2VydmljZS50cyIsIm5neC1oaWdobGlnaHRqcy9saWIvaGlnaGxpZ2h0LmRpcmVjdGl2ZS50cyIsIm5neC1oaWdobGlnaHRqcy9saWIvaGlnaGxpZ2h0Lm1vZHVsZS50cyJdLCJuYW1lcyI6WyJJbmplY3Rpb25Ub2tlbiIsIkJlaGF2aW9yU3ViamVjdCIsImZpbHRlciIsInRha2UiLCJmcm9tIiwic3dpdGNoTWFwIiwib2YiLCJ0YXAiLCJJbmplY3RhYmxlIiwiT3B0aW9uYWwiLCJJbmplY3QiLCJET0NVTUVOVCIsIkV2ZW50RW1pdHRlciIsIm1hcCIsIkRpcmVjdGl2ZSIsIkVsZW1lbnRSZWYiLCJSZW5kZXJlcjIiLCJJbnB1dCIsIk91dHB1dCIsIk5nTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7SUFBQTtBQUNBO0FBQ0k7QUFDSTtBQUNJO0FBRUU7QUFBRTtBQUNJO0FBQ0k7QUFDSTtBQUVFO0FBQUU7QUFFaEM7QUFBd0M7QUFDeEMsSUFZTyxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLFNBQVMsUUFBUSxDQUFDLENBQUM7QUFDMUQsUUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6RCxZQUFRLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsWUFBUSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUM7QUFBRyxnQkFBRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLEVB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QSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQ2hDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUFuQixBQUFBLEFBQUEsQUFBQSxBQUFBLEFDMkJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBakJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQUMsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBWUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFYQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0FDLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0FDLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQVhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUFDLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0FDLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBVEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQUQsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBUEEsQUFBQUUsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQUMsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBN0lBQyxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBcUJBQyxBQUFBLEFBQUFDLEFBQUEsQUFBQSxBQUFBLEFBQ0FBLEFBQUEsQUFBQUMsQUFBQSxBQS9CQSxBQU9BLEFDUEEsQUFXQSxBQWtCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUFDLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFWQSxBQUNBLEFBQUEsQUFEQSxBQUNBLEFBQUEsQUFEQSxBQUlBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFjQSxBQVZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0FSLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0FGLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBVyxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBVixBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFsRkFXLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFiQUMsQUFBQSxBQUFBQyxBQUFBLEFBR0EsQUFBQSxBQWdCQUMsQUFBQSxBQUNBQSxBQUFBLEFBQ0FBLEFBQUEsQUFBQSxBQUFBLEFBTUFDLEFBQUEsQUFtRUEsQUFBQSxBQW5GQSxBQ1hBLEFBS0EsQUFhQSxBQVJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBWkFDLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBVUEsQUFBQSxBQWJBIiwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSB5W29wWzBdICYgMiA/IFwicmV0dXJuXCIgOiBvcFswXSA/IFwidGhyb3dcIiA6IFwibmV4dFwiXSkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbMCwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgIH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlmIChvW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9OyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhpZ2hsaWdodE9wdGlvbnMgfSBmcm9tICcuL2hpZ2hsaWdodC5tb2RlbCc7XHJcblxyXG5leHBvcnQgY29uc3QgT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIaWdobGlnaHRPcHRpb25zPignT1BUSU9OUycpO1xyXG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YWtlLCBmaWx0ZXIsIHRhcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRDb25maWcsIEhpZ2hsaWdodE9wdGlvbnMsIEhpZ2hsaWdodFJlc3VsdCB9IGZyb20gJy4vaGlnaGxpZ2h0Lm1vZGVsJztcclxuaW1wb3J0IHsgT1BUSU9OUyB9IGZyb20gJy4vaGlnaGxpZ2h0LnRva2VuJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodEpTIHtcclxuXHJcbiAgaGxqczogYW55O1xyXG5cclxuICBvcHRpb25zOiBIaWdobGlnaHRPcHRpb25zID0ge1xyXG4gICAgdGhlbWU6ICdnaXRodWInLFxyXG4gICAgcGF0aDogJ2Fzc2V0cy9saWIvaGxqcycsXHJcbiAgICBhdXRvOiB0cnVlXHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBfaXNSZWFkeSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcclxuXHJcbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBoaWdobGlnaHRqcyBpcyBsb2FkZWRcclxuICBnZXQgaXNSZWFkeSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLl9pc1JlYWR5JC5waXBlKFxyXG4gICAgICBmaWx0ZXIoaXNSZWFkeSA9PiBpc1JlYWR5KSxcclxuICAgICAgdGFrZSgxKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoT1BUSU9OUykgb3B0aW9uczogSGlnaGxpZ2h0T3B0aW9ucyxcclxuICAgICAgICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIF9kb2N1bWVudDogYW55KSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9ucyB9O1xyXG4gICAgdGhpcy5faGxqc0xvYWRlcigpLnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgaGlnaGxpZ2h0KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgaWdub3JlX2lsbGVnYWxzOiBib29sZWFuLCBjb250aW51YXRpb24/OiBhbnkpOiBIaWdobGlnaHRSZXN1bHQge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5obGpzLmhpZ2hsaWdodChuYW1lLCB2YWx1ZSwgaWdub3JlX2lsbGVnYWxzLCBjb250aW51YXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGlnaGxpZ2h0QXV0byh2YWx1ZTogc3RyaW5nLCBsYW5ndWFnZVN1YnNldDogc3RyaW5nW10pOiBIaWdobGlnaHRSZXN1bHQge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5obGpzLmhpZ2hsaWdodEF1dG8odmFsdWUsIGxhbmd1YWdlU3Vic2V0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpeE1hcmt1cCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaGxqcy5maXhNYXJrdXAodmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGlnaGxpZ2h0QmxvY2soYmxvY2s6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHRoaXMuaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25maWd1cmUoY29uZmlnOiBIaWdobGlnaHRDb25maWcpIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgdGhpcy5obGpzLmNvbmZpZ3VyZShjb25maWcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdEhpZ2hsaWdodGluZygpIHtcclxuICAgIGlmICh0aGlzLmhsanMpIHtcclxuICAgICAgdGhpcy5obGpzLmluaXRIaWdobGlnaHRpbmcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXRIaWdobGlnaHRpbmdPbkxvYWQoKSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHRoaXMuaGxqcy5pbml0SGlnaGxpZ2h0aW5nT25Mb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlckxhbmd1YWdlKG5hbWU6IHN0cmluZywgbGFuZ3VhZ2U6IEZ1bmN0aW9uKSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHRoaXMuaGxqcy5yZWdpc3Rlckxhbmd1YWdlKG5hbWUsIGxhbmd1YWdlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxpc3RMYW5ndWFnZXMoKTogc3RyaW5nW10ge1xyXG4gICAgaWYgKHRoaXMuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5obGpzLmxpc3RMYW5ndWFnZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldExhbmd1YWdlKG5hbWU6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAodGhpcy5obGpzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmhsanMuZ2V0TGFuZ3VhZ2UobmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9obGpzTG9hZGVyKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAodGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcuaGxqcykge1xyXG4gICAgICByZXR1cm4gdGhpcy5faW5pdEhMSlMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3RoZW1lTG9hZGVyKCkuc3Vic2NyaWJlKCk7XHJcbiAgICAgIHJldHVybiB0aGlzLl9sb2FkU2NyaXB0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2FkIGhsanMgc2NyaXB0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfbG9hZFNjcmlwdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICBzY3JpcHQub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgc2NyaXB0LnNyYyA9IGAke3RoaXMub3B0aW9ucy5wYXRofS9oaWdobGlnaHQucGFjay5qc2A7XHJcbiAgICAgIHRoaXMuX2RvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZyb20ocHJvbWlzZSkucGlwZShcclxuICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuX2luaXRITEpTKCkpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZCBobGpzIHRoZW1lXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfdGhlbWVMb2FkZXIoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBjb25zdCBzdHlsZSA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICAgICAgc3R5bGUucmVsID0gJ3N0eWxlc2hlZXQnO1xyXG4gICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcclxuICAgICAgc3R5bGUub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgc3R5bGUuaHJlZiA9IGAke3RoaXMub3B0aW9ucy5wYXRofS9zdHlsZXMvJHt0aGlzLm9wdGlvbnMudGhlbWV9LmNzc2A7XHJcbiAgICAgIHRoaXMuX2RvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZnJvbShwcm9taXNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgaGxqcyBvbiBsb2FkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfaW5pdEhMSlMoKSB7XHJcbiAgICByZXR1cm4gb2Yoe30pLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5obGpzID0gdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcuaGxqcztcclxuICAgICAgICB0aGlzLmhsanMuY29uZmlndXJlKHRoaXMub3B0aW9ucy5jb25maWcpO1xyXG4gICAgICAgIHRoaXMuX2lzUmVhZHkkLm5leHQodHJ1ZSk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25EZXN0cm95LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgdGFrZSwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRKUyB9IGZyb20gJy4vaGlnaGxpZ2h0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRSZXN1bHQgfSBmcm9tICcuL2hpZ2hsaWdodC5tb2RlbCc7XHJcblxyXG4vKiogVGhlcmUgYXJlIDIgd2F5cyB0byBoaWdsaWdodCBhIGNvZGVcclxuICogIDEgLSB1c2luZyB0aGUgW2NvZGVdIGlucHV0IChkZWZhdWx0KSA8Y29kZSBoaWdobGlnaHQgW2NvZGVdPVwieW91ckNvZGVcIj48L2NvZGU+XHJcbiAqICAyIC0gdXNpbmcgZWxlbWVudCB0ZXh0IGNvbnRlbnQgPGNvZGU+IHt7eW91ckNvZGV9fSA8L2NvZGU+XHJcbiAqL1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbaGlnaGxpZ2h0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgZWw6IEhUTUxFbGVtZW50O1xyXG4gIGRvbU9iczogTXV0YXRpb25PYnNlcnZlcjtcclxuICBjb2RlOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgaGlnaGxpZ2h0OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbGFuZ3VhZ2U6IHN0cmluZ1tdO1xyXG4gIEBJbnB1dCgnY29kZScpXHJcbiAgc2V0IHNldENvZGUoY29kZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgdGhpcy5obGpzLmlzUmVhZHkuc3Vic2NyaWJlKCgpID0+IHRoaXMuaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsLCBjb2RlKSk7XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgaGlnaGxpZ2h0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEhpZ2hsaWdodFJlc3VsdD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBobGpzOiBIaWdobGlnaHRKUykge1xyXG4gICAgdGhpcy5lbCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICAvKiogQWNpdHZhdGUgTXV0YXRpb25PYnNlcnZlciBpZiBgYXV0b2Agb3B0aW9uIGlzIHRydWUgYW5kIGBbY29kZV1gIGlucHV0IGlzIG5vdCB1c2VkXHJcbiAgICAgKiBUaGlzIHdpbGwgaGlnaGxpZ2h0IHVzaW5nIHRoZSB0ZXh0IGNvbnRlbnQgKi9cclxuICAgIGlmICghdGhpcy5jb2RlICYmIHRoaXMuaGxqcy5vcHRpb25zLmF1dG8pIHtcclxuXHJcbiAgICAgIHRoaXMuaGxqcy5pc1JlYWR5LnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRUZXh0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAvKiogSGlnaGxpZ2h0IHdoZW4gdGV4dCBjb250ZW50IGNoYW5nZXMgKi9cclxuICAgICAgICB0aGlzLmRvbU9icyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMuaGlnaGxpZ2h0VGV4dENvbnRlbnQoKSk7XHJcbiAgICAgICAgdGhpcy5kb21PYnMub2JzZXJ2ZSh0aGlzLmVsLCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogSGlnaGxpZ2h0IHVzaW5nIGVsZW1lbnQgdGV4dCBjb250ZW50ICovXHJcbiAgaGlnaGxpZ2h0VGV4dENvbnRlbnQoKSB7XHJcbiAgICBpZiAoIXRoaXMuaGlnaGxpZ2h0KSB7XHJcbiAgICAgIGlmICh0aGlzLmVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2NvZGUnKSB7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRFbGVtZW50KHRoaXMuZWwsIHRoaXMuZWwuaW5uZXJUZXh0LnRyaW0oKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBbSGlnaGxpZ2h0RGlyZWN0aXZlXTogVXNlICdoaWdobGlnaHQnIG9uIDxjb2RlPiBlbGVtZW50IG9ubHlgKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhpZ2hsaWdodCA9PT0gJ2FsbCcpIHtcclxuICAgICAgdGhpcy5oaWdobGlnaHRDaGlsZHJlbih0aGlzLmVsLCAncHJlIGNvZGUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuaGlnaGxpZ2h0Q2hpbGRyZW4odGhpcy5lbCwgdGhpcy5oaWdobGlnaHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEhpZ2hsaWdodCBhIGNvZGUgYmxvY2sgKi9cclxuICBoaWdobGlnaHRFbGVtZW50KGVsOiBIVE1MRWxlbWVudCwgY29kZTogc3RyaW5nKSB7XHJcblxyXG4gICAgY29uc3QgcmVzOiBIaWdobGlnaHRSZXN1bHQgPSB0aGlzLmhsanMuaGlnaGxpZ2h0QXV0byhjb2RlLCB0aGlzLmxhbmd1YWdlKTtcclxuICAgIGlmIChyZXMudmFsdWUgIT09IGVsLmlubmVySFRNTCkge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGVsLCAnaGxqcycpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KGVsLCAnaW5uZXJIVE1MJywgcmVzLnZhbHVlKTtcclxuICAgICAgdGhpcy5oaWdobGlnaHRlZC5lbWl0KHJlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogSGlnaGxpZ2h0IG11bHRpcGxlIGNvZGUgYmxvY2tzICovXHJcbiAgaGlnaGxpZ2h0Q2hpbGRyZW4oZWw6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nKSB7XHJcblxyXG4gICAgY29uc3QgY29kZUVsZW1lbnRzID0gZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblxyXG4gICAgLyoqIGhpZ2hsaWdodCBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIHNlbGVjdG9yICovXHJcbiAgICBmcm9tKGNvZGVFbGVtZW50cykucGlwZShcclxuICAgICAgZmlsdGVyKChjb2RlOiBIVE1MRWxlbWVudCkgPT4gY29kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiBjb2RlLmNoaWxkTm9kZXNbMF0ubm9kZU5hbWUgPT09ICcjdGV4dCcpLFxyXG4gICAgICBtYXAoKGNvZGVFbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdGhpcy5oaWdobGlnaHRFbGVtZW50KGNvZGVFbGVtZW50LCBjb2RlRWxlbWVudC5pbm5lclRleHQudHJpbSgpKSksXHJcbiAgICAgIHRha2UoMSlcclxuICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIC8qKiBEaXNjb25uZWN0IE11dGF0aW9uT2JzZXJ2ZXIgKi9cclxuICAgIGlmICghdGhpcy5jb2RlICYmIHRoaXMuaGxqcy5vcHRpb25zLmF1dG8pIHtcclxuICAgICAgdGhpcy5kb21PYnMuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHREaXJlY3RpdmUgfSBmcm9tICcuL2hpZ2hsaWdodC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRPcHRpb25zIH0gZnJvbSAnLi9oaWdobGlnaHQubW9kZWwnO1xyXG5pbXBvcnQgeyBPUFRJT05TIH0gZnJvbSAnLi9oaWdobGlnaHQudG9rZW4nO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtIaWdobGlnaHREaXJlY3RpdmVdLFxyXG4gIGV4cG9ydHM6IFtIaWdobGlnaHREaXJlY3RpdmVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM/OiBIaWdobGlnaHRPcHRpb25zKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogSGlnaGxpZ2h0TW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7cHJvdmlkZTogT1BUSU9OUywgdXNlVmFsdWU6IG9wdGlvbnN9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==