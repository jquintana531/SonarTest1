{"version":3,"file":"translate.service.js","sources":["@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, merge, Observable, Observer, of} from \"rxjs\";\nimport {map, share, switchMap, take, toArray} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false) {\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable, ask for it\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n    this.loadingTranslations.pipe(take(1))\n      .subscribe((res: Object) => {\n        this.translations[lang] = this.compiler.compileTranslations(res, lang);\n        this.updateLangs();\n        this.pending = false;\n      }, (err: any) => {\n        this.pending = false;\n      });\n\n    return this.loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n      if (observables) {\n        let mergedObs: Observable<string>;\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = merge(mergedObs, obs);\n          }\n        }\n        return mergedObs.pipe(\n          toArray(),\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return Observable.create((observer: Observer<string>) => {\n        let onComplete = (res: string) => {\n          observer.next(res);\n          observer.complete();\n        };\n        let onError = (err: any) => {\n          observer.error(err);\n        };\n        this.loadingTranslations.subscribe((res: any) => {\n          res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of(res);\n      }\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      this.get(key, interpolateParams),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n"]}