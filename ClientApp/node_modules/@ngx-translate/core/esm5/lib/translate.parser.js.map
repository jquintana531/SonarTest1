{"version":3,"file":"translate.parser.js","sources":["@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.parser.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = key.split('.');\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n"]}