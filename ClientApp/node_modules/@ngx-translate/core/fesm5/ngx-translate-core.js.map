{"version":3,"file":"ngx-translate-core.js","sources":["@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.loader.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/missing-translation-handler.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.compiler.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/util.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.parser.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.store.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.service.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.directive.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.pipe.ts","@ngx-translate/core/projects/ngx-translate/core/src/public_api.ts"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\n\nexport abstract class TranslateLoader {\n  abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return of({});\n  }\n}\n","import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n  abstract compile(value: string, lang: string): string | Function;\n\n  abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value: string, lang: string): string | Function {\n    return value;\n  }\n\n  compileTranslations(translations: any, lang: string): any {\n    return translations;\n  }\n}\n","/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key: any) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {[key]: source[key]});\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {[key]: source[key]});\n      }\n    });\n  }\n  return output;\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = key.split('.');\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  public defaultLang: string;\n\n  /**\n   * The lang currently used\n   */\n  public currentLang: string = this.defaultLang;\n\n  /**\n   * a list of translations per lang\n   */\n  public translations: any = {};\n\n  /**\n   * an array of langs\n   */\n  public langs: Array<string> = [];\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, merge, Observable, Observer, of} from \"rxjs\";\nimport {map, share, switchMap, take, toArray} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false) {\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable, ask for it\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n    this.loadingTranslations.pipe(take(1))\n      .subscribe((res: Object) => {\n        this.translations[lang] = this.compiler.compileTranslations(res, lang);\n        this.updateLangs();\n        this.pending = false;\n      }, (err: any) => {\n        this.pending = false;\n      });\n\n    return this.loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n      if (observables) {\n        let mergedObs: Observable<string>;\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = merge(mergedObs, obs);\n          }\n        }\n        return mergedObs.pipe(\n          toArray(),\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return Observable.create((observer: Observer<string>) => {\n        let onComplete = (res: string) => {\n          observer.next(res);\n          observer.complete();\n        };\n        let onError = (err: any) => {\n          observer.error(err);\n        };\n        this.loadingTranslations.subscribe((res: any) => {\n          res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of(res);\n      }\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      this.get(key, interpolateParams),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n","import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Directive({\n  selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n  key: string;\n  lastParams: any;\n  currentParams: any;\n  onLangChangeSub: Subscription;\n  onDefaultLangChangeSub: Subscription;\n  onTranslationChangeSub: Subscription;\n\n  @Input() set translate(key: string) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  @Input() set translateParams(params: any) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations?: any) {\n    let nodes: NodeList = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node: any = nodes[i];\n      if (node.nodeType === 3) { // node type 3 is a text node\n        let key: string;\n        if (this.key) {\n          key = this.key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = this.getContent(node);\n            } else if (node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n              node.lastKey = null;\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key: string, node: any, translations: any) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = (res: string) => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (typeof res.subscribe === \"function\") {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node: any): string {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node: any, content: string): void {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n","import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  value: string = '';\n  lastKey: string;\n  lastParams: any[];\n  onTranslationChange: EventEmitter<TranslationChangeEvent>;\n  onLangChange: EventEmitter<LangChangeEvent>;\n  onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n  }\n\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    let onTranslation = (res: string) => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query: string, ...args: any[]): any {\n    if (!query || query.length === 0) {\n      return query;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams: Object;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs: string = args[0]\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n\n    // store the query, in case it changes\n    this.lastKey = query;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(query, interpolateParams);\n\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n\n  /**\n   * Clean any existing subscription to change events\n   */\n  private _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._dispose();\n  }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\nimport {TranslateService} from \"./lib/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\nimport {TranslateDirective} from \"./lib/translate.directive\";\nimport {TranslatePipe} from \"./lib/translate.pipe\";\nimport {TranslateStore} from \"./lib/translate.store\";\nimport {USE_STORE} from \"./lib/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./lib/translate.service\";\n\nexport * from \"./lib/translate.loader\";\nexport * from \"./lib/translate.service\";\nexport * from \"./lib/missing-translation-handler\";\nexport * from \"./lib/translate.parser\";\nexport * from \"./lib/translate.compiler\";\nexport * from \"./lib/translate.directive\";\nexport * from \"./lib/translate.pipe\";\nexport * from \"./lib/translate.store\";\n\nexport interface TranslateModuleConfig {\n  loader?: Provider;\n  compiler?: Provider;\n  parser?: Provider;\n  missingTranslationHandler?: Provider;\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n  isolate?: boolean;\n  useDefaultLang?: boolean;\n}\n\n@NgModule({\n  declarations: [\n    TranslatePipe,\n    TranslateDirective\n  ],\n  exports: [\n    TranslatePipe,\n    TranslateDirective\n  ]\n})\nexport class TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        TranslateStore,\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n}\n"]}