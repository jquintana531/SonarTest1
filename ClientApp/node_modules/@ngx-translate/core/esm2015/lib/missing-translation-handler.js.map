{"version":3,"file":"missing-translation-handler.js","sources":["@ngx-translate/core/projects/ngx-translate/core/src/lib/missing-translation-handler.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC;AAAI;AAAW;;AAAI;AAED;AAEiB;AAAQ;AAK1B;AAAiB;AAAQ;AAEzB;AAAQ;AAG2B;AAAiB;AAAQ;AAKvD;AAAQ;AAI9B;AAA2B;AAAQ;AACE;AACrC;AAAI;AAAa;AANjB,MAAM;AAAmC,CAWxC;AACD;AAE+D;AAAQ;AAEpE;AAAO;AACG;AACb;AAA4C;AAIlC;AAA4H;AAAiE;AAAQ;AAAwE;AAAE;AAAI;AAAqH;AALlZ,MAAM;AAAuC;AAAQ;AAAyB;AAC/D;AAAQ,IAArB,MAAM,CAAC,MAAuC;AAAI,QAChD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC;AACtB,KAAG;AACH;yDALC,UAAU;;;;0BACR;AAAC;AAAwE;AAEpE;AAGiB;AAAQ;AAAmB;AAAoI;AAAQ;AAAkD;AAAE","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n"]}