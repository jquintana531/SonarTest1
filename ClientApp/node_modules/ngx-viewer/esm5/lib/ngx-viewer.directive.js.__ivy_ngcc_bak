/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import Viewer from 'viewerjs';
var NgxViewerDirective = /** @class */ (function () {
    function NgxViewerDirective(elementRef) {
        this.elementRef = elementRef;
        this.viewerOptions = {};
        this.viewerReady = new EventEmitter();
        this.viewerShow = new EventEmitter();
        this.viewerShown = new EventEmitter();
        this.viewerHide = new EventEmitter();
        this.viewerHidden = new EventEmitter();
        this.viewerView = new EventEmitter();
        this.viewerViewed = new EventEmitter();
        this.viewerZoom = new EventEmitter();
        this.viewerZoomed = new EventEmitter();
        this.nativeElement = this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    NgxViewerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initViewer();
    };
    /**
     * @private
     * @return {?}
     */
    NgxViewerDirective.prototype.initViewer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.instance) {
            this.instance.destroy();
        }
        this.instance = new Viewer(this.nativeElement, tslib_1.__assign({ transition: false }, this.viewerOptions));
        this.nativeElement.addEventListener('ready', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerReady.emit(event); }), false);
        this.nativeElement.addEventListener('show', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerShow.emit(event); }), false);
        this.nativeElement.addEventListener('shown', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerShown.emit(event); }), false);
        this.nativeElement.addEventListener('hide', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerHide.emit(event); }), false);
        this.nativeElement.addEventListener('hidden', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerHidden.emit(event); }), false);
        this.nativeElement.addEventListener('view', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerView.emit(event); }), false);
        this.nativeElement.addEventListener('viewed', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerViewed.emit(event); }), false);
        this.nativeElement.addEventListener('zoom', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerZoom.emit(event); }), false);
        this.nativeElement.addEventListener('zoomed', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.viewerZoomed.emit(event); }), false);
    };
    /**
     * @return {?}
     */
    NgxViewerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            this.instance.destroy();
        }
    };
    NgxViewerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxViewer]'
                },] }
    ];
    /** @nocollapse */
    NgxViewerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgxViewerDirective.propDecorators = {
        viewerOptions: [{ type: Input }],
        viewerReady: [{ type: Output }],
        viewerShow: [{ type: Output }],
        viewerShown: [{ type: Output }],
        viewerHide: [{ type: Output }],
        viewerHidden: [{ type: Output }],
        viewerView: [{ type: Output }],
        viewerViewed: [{ type: Output }],
        viewerZoom: [{ type: Output }],
        viewerZoomed: [{ type: Output }]
    };
    return NgxViewerDirective;
}());
export { NgxViewerDirective };
if (false) {
    /** @type {?} */
    NgxViewerDirective.prototype.viewerOptions;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerReady;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerShow;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerShown;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerHide;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerHidden;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerView;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerViewed;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerZoom;
    /** @type {?} */
    NgxViewerDirective.prototype.viewerZoomed;
    /** @type {?} */
    NgxViewerDirective.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    NgxViewerDirective.prototype.nativeElement;
    /**
     * @type {?}
     * @private
     */
    NgxViewerDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXZpZXdlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmlld2VyLyIsInNvdXJjZXMiOlsibGliL25neC12aWV3ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQXNDLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZILE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUU5QjtJQW9CRSw0QkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWhCakMsa0JBQWEsR0FBbUIsRUFBRSxDQUFDO1FBRWxDLGdCQUFXLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFDN0QsZUFBVSxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO1FBQzVELGdCQUFXLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFDN0QsZUFBVSxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO1FBQzVELGlCQUFZLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFDOUQsZUFBVSxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO1FBQzVELGlCQUFZLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFDOUQsZUFBVSxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO1FBQzVELGlCQUFZLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFPdEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUNyRCxDQUFDOzs7O0lBRU0sNENBQWU7OztJQUF0QjtRQUNFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7OztJQUVPLHVDQUFVOzs7O0lBQWxCO1FBQUEsaUJBcUJDO1FBcEJDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFD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dEUseUNBQXVFOztJQUN2RSx3Q0FBc0U7O0lBQ3RFLDBDQUF3RTs7SUFDeEUsd0NBQXNFOztJQUN0RSwwQ0FBd0U7O0lBQ3hFLHdDQUFzRTs7SUFDdEUsMENBQXdFOztJQUV4RSxzQ0FBaUI7Ozs7O0lBRWpCLDJDQUFtQzs7Ozs7SUFFdkIsd0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBOZ01vZHVsZSwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBWaWV3ZXIgZnJvbSAndmlld2VyanMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4Vmlld2VyXSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4Vmlld2VyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgdmlld2VyT3B0aW9uczogVmlld2VyLk9wdGlvbnMgPSB7fTtcblxuICBAT3V0cHV0KCkgdmlld2VyUmVhZHk6IEV2ZW50RW1pdHRlcjxFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPEV2ZW50PigpO1xuICBAT3V0cHV0KCkgdmlld2VyU2hvdzogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSB2aWV3ZXJTaG93bjogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSB2aWV3ZXJIaWRlOiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcbiAgQE91dHB1dCgpIHZpZXdlckhpZGRlbjogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSB2aWV3ZXJWaWV3OiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcbiAgQE91dHB1dCgpIHZpZXdlclZpZXdlZDogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSB2aWV3ZXJab29tOiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcbiAgQE91dHB1dCgpIHZpZXdlclpvb21lZDogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG5cbiAgaW5zdGFuY2U6IFZpZXdlcjtcblxuICBwcml2YXRlIG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmluaXRWaWV3ZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFZpZXdlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgdGhpcy5pbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBWaWV3ZXIodGhpcy5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAvLyBUcmFuc2l0aW9ucyBjdXJyZW50bHkgYnJlYWsgdGhlIFZpZXdlciB3aGVuIHJ1bm5pbmcgb3B0aW1pemF0aW9ucyBkdXJpbmcgbmcgYnVpbGQgKGkuZSBpbiBwcm9kIG1vZGUpXG4gICAgICAvLyBUT0RPOiBGaW5kIGEgZml4IGZvciB0aGlzIHNvIHdlIGRvbid0IGhhdmUgdG8gZm9yY2UgZGlzYWJsZSB0cmFuc2l0aW9uc1xuICAgICAgdHJhbnNpdGlvbjogZmFsc2UsXG4gICAgICAuLi50aGlzLnZpZXdlck9wdGlvbnNcbiAgICB9KTtcblxuICAgIHRoaXMubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdyZWFkeScsIGV2ZW50ID0+IHRoaXMudmlld2VyUmVhZHkuZW1pdChldmVudCksIGZhbHNlKTtcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2hvdycsIGV2ZW50ID0+IHRoaXMudmlld2VyU2hvdy5lbWl0KGV2ZW50KSwgZmFsc2UpO1xuICAgIHRoaXMubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzaG93bicsIGV2ZW50ID0+IHRoaXMudmlld2VyU2hvd24uZW1pdChldmVudCksIGZhbHNlKTtcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaGlkZScsIGV2ZW50ID0+IHRoaXMudmlld2VySGlkZS5lbWl0KGV2ZW50KSwgZmFsc2UpO1xuICAgIHRoaXMubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdoaWRkZW4nLCBldmVudCA9PiB0aGlzLnZpZXdlckhpZGRlbi5lbWl0KGV2ZW50KSwgZmFsc2UpO1xuICAgIHRoaXMubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd2aWV3JywgZXZlbnQgPT4gdGhpcy52aWV3ZXJWaWV3LmVtaXQoZXZlbnQpLCBmYWxzZSk7XG4gICAgdGhpcy5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3ZpZXdlZCcsIGV2ZW50ID0+IHRoaXMudmlld2VyVmlld2VkLmVtaXQoZXZlbnQpLCBmYWxzZSk7XG4gICAgdGhpcy5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3pvb20nLCBldmVudCA9PiB0aGlzLnZpZXdlclpvb20uZW1pdChldmVudCksIGZhbHNlKTtcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignem9vbWVkJywgZXZlbnQgPT4gdGhpcy52aWV3ZXJab29tZWQuZW1pdChldmVudCksIGZhbHNlKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgdGhpcy5pbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59XG4iXX0=