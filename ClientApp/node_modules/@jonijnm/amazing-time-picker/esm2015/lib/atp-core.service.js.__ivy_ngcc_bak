import { Injectable } from '@angular/core';
export class AtpCoreService {
    constructor() { }
    allowedTimes(min, max) {
        const allTimes = [];
        const nowMinHour = +min.split(':')[0];
        const nowMaxHour = +max.split(':')[0];
        const nowMinMin = +min.split(':')[1];
        const nowMaxMin = +max.split(':')[1];
        for (let i = nowMinHour; i <= nowMaxHour; i++) {
            let j = 0, jDest = 59;
            if (i === nowMinHour) {
                j = nowMinMin;
            }
            else if (i === nowMaxHour) {
                jDest = nowMaxMin;
            }
            for (j; j <= jDest; j++) {
                const hour = i <= 12 ? i : i - 12;
                const minute = j;
                const ampm = i < 12 ? 'AM' : 'PM';
                allTimes.push(hour + ':' + minute + ' ' + ampm);
            }
        }
        return allTimes;
    }
    ClockMaker(type) {
        const items = [];
        const timeVal = (type === 'minute') ? 60 : 12;
        const timeStep = (type === 'minute') ? 5 : 1;
        const timeStart = (type === 'minute') ? 0 : 1;
        const r = 124;
        const j = r - 25;
        for (let min = timeStart; min <= timeVal; min += timeStep) {
            if (min !== 60) {
                const str = String(min);
                const x = j * Math.sin(Math.PI * 2 * (min / timeVal));
                const y = j * Math.cos(Math.PI * 2 * (min / timeVal));
                items.push({
                    time: str,
                    left: (x + r - 17) + 'px',
                    top: (-y + r - 17) + 'px',
                    type
                });
            }
        }
        return items;
    }
    TimeToString(time) {
        const { ampm, minute, hour } = time;
        let hh = ampm === 'PM' ? +hour + 12 : +hour;
        if (ampm === 'AM' && hh === 12) {
            hh = 0;
        }
        if (hh === 24) {
            hh = 12;
        }
        hh = hh < 10 ? '0' + hh : '' + hh;
        const mm = minute < 10 ? '0' + minute : minute;
        return `${hh}:${mm}`;
    }
    /**
     * Converts 00:00 format to ITime object
     */
    StringToTime(time) {
        const [h, m] = time.split(':');
        let hour = +h > 12 ? +h - 12 : +h;
        hour = hour === 0 ? 12 : hour;
        const ampm = +h >= 12 ? 'PM' : 'AM';
        return {
            ampm, minute: +m, hour
        };
    }
    /**
     * @experimental
     */
    CalcDegrees(ele, parrentPos, step) {
        const clock = {
            width: ele.currentTarget.offsetWidth,
            height: ele.currentTarget.offsetHeight
        };
        const targetX = clock.width / 2;
        const targetY = clock.height / 2;
        const Vx = Math.round((ele.clientX - parrentPos.left) - targetX);
        const Vy = Math.round(targetY - (ele.clientY - parrentPos.top));
        let radians = -Math.atan2(Vy, Vx);
        radians += 2.5 * Math.PI;
        let degrees = Math.round(radians * 180 / Math.PI);
        const degMod = degrees % step;
        if (degMod === 0) {
            return degrees;
        }
        else if (degMod >= step / 2) {
            degrees = degrees + (step - degMod);
        }
        else if (degMod < step / 2) {
            degrees = degrees - degMod;
        }
        return degrees;
    }
}
AtpCoreService.decorators = [
    { type: Injectable }
];
AtpCoreService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRwLWNvcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FtYXppbmctdGltZS1waWNrZXIvc3JjL2xpYi9hdHAtY29yZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsTUFBTSxPQUFPLGNBQWM7SUFFekIsZ0JBQWdCLENBQUM7SUFFVixZQUFZLENBQUUsR0FBRyxFQUFFLEdBQUc7UUFDM0IsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxLQUFLLElBQUksQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLElBQUksVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDTCxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO2dCQUNwQixDQUFDLEdBQUcsU0FBUyxDQUFDO2FBQ2Y7aUJBQUssSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO2dCQUMxQixLQUFLLEdBQUcsU0FBUyxDQUFDO2FBQ25CO1lBQ0QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFD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QUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztRQUNqRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNsQyxPQUFPLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFekIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRCxNQUFNLE1BQU0sR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQzlCLElBQUksTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNoQixPQUFPLE9BQU8sQ0FBQztTQUNoQjthQUFNLElBQUksTUFBTSxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxHQUFHLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQztTQUNyQzthQUFNLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDNUIsT0FBTyxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUM7U0FDNUI7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7WUExR0YsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElUaW1lIH0gZnJvbSAnLi9kZWZpbml0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdHBDb3JlU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBwdWJsaWMgYWxsb3dlZFRpbWVzIChtaW4sIG1heCkge1xuICAgIGNvbnN0IGFsbFRpbWVzID0gW107XG4gICAgY29uc3Qgbm93TWluSG91ciA9ICttaW4uc3BsaXQoJzonKVswXTtcbiAgICBjb25zdCBub3dNYXhIb3VyID0gK21heC5zcGxpdCgnOicpWzBdO1xuICAgIGNvbnN0IG5vd01pbk1pbiA9ICttaW4uc3BsaXQoJzonKVsxXTtcbiAgICBjb25zdCBub3dNYXhNaW4gPSArbWF4LnNwbGl0KCc6JylbMV07XG4gICAgZm9yIChsZXQgaSA9IG5vd01pbkhvdXI7IGkgPD0gbm93TWF4SG91cjsgaSsrKSB7XG4gICAgICBsZXQgaiA9IDAsXG4gICAgICAgICAgakRlc3QgPSA1OTtcbiAgICAgIGlmIChpID09PSBub3dNaW5Ib3VyKSB7XG4gICAgICAgIGogPSBub3dNaW5NaW47XG4gICAgICB9ZWxzZSBpZiAoaSA9PT0gbm93TWF4SG91cikge1xuICAgICAgICBqRGVzdCA9IG5vd01heE1pbjtcbiAgICAgIH1cbiAgICAgIGZvciAoajsgaiA8PSBqRGVzdDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGhvdXIgPSBpIDw9IDEyID8gaSA6IGkgLSAxMjtcbiAgICAgICAgY29uc3QgbWludXRlID0gajtcbiAgICAgICAgY29uc3QgYW1wbSA9IGkgPCAxMiA/ICdBTScgOiAnUE0nO1xuICAgICAgICBhbGxUaW1lcy5wdXNoKGhvdXIgKyAnOicgKyBtaW51dGUgKyAnICcgKyBhbXBtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFsbFRpbWVzO1xuICB9XG5cbiAgcHVibGljIENsb2NrTWFrZXIgKHR5cGU6ICdtaW51dGUnIHwgJ2hvdXInKTogQXJyYXk8YW55PiB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB0aW1lVmFsID0gKHR5cGUgPT09ICdtaW51dGUnKSA/IDYwIDogMTI7XG4gICAgY29uc3QgdGltZVN0ZXAgPSAodHlwZSA9PT0gJ21pbnV0ZScpID8gNSA6IDE7XG4gICAgY29uc3QgdGltZVN0YXJ0ID0gKHR5cGUgPT09ICdtaW51dGUnKSA/IDAgOiAxO1xuICAgIGNvbnN0IHIgPSAxMjQ7XG4gICAgY29uc3QgaiA9IHIgLSAyNTtcblxuICAgIGZvciAobGV0IG1pbiA9IHRpbWVTdGFydDsgbWluIDw9IHRpbWVWYWw7IG1pbiArPSB0aW1lU3RlcCkge1xuICAgICAgaWYgKG1pbiAhPT0gNjApIHtcbiAgICAgICAgY29uc3Qgc3RyID0gU3RyaW5nKG1pbik7XG4gICAgICAgIGNvbnN0IHggPSBqICogTWF0aC5zaW4oTWF0aC5QSSAqIDIgKiAobWluIC8gdGltZVZhbCkpO1xuICAgICAgICBjb25zdCB5ID0gaiAqIE1hdGguY29zKE1hdGguUEkgKiAyICogKG1pbiAvIHRpbWVWYWwpKTtcblxuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICB0aW1lOiBzdHIsXG4gICAgICAgICAgbGVmdDogKHggKyByIC0gMTcpICsgJ3B4JyxcbiAgICAgICAgICB0b3A6ICgteSArIHIgLSAxNykgKyAncHgnLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfVxuXG4gIHB1YmxpYyBUaW1lVG9TdHJpbmcodGltZTogSVRpbWUpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgYW1wbSwgbWludXRlLCBob3VyIH0gPSB0aW1lO1xuICAgIGxldCBoaCA9IGFtcG0gPT09ICdQTScgPyAraG91ciArIDEyIDogK2hvdXI7XG4gICAgaWYgKGFtcG0gPT09ICdBTScgJiYgaGggPT09IDEyKSB7XG4gICAgICBoaCA9IDA7XG4gICAgfVxuICAgIGlmICggaGggPT09IDI0KSB7XG4gICAgICBoaCA9IDEyO1xuICAgIH1cbiAgICBoaCA9IGhoIDwgMTAgPyAnMCcgKyBoaCA6ICcnICsgaGggYXMgYW55O1xuICAgIGNvbnN0IG1tID0gbWludXRlIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGU7XG4gICAgcmV0dXJuIGAke2hofToke21tfWA7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgMDA6MDAgZm9ybWF0IHRvIElUaW1lIG9iamVjdFxuICAgKi9cbiAgcHVibGljIFN0cmluZ1RvVGltZSAodGltZTogc3RyaW5nKTogSVRpbWUge1xuICAgIGNvbnN0IFtoLCBtXSA9IHRpbWUuc3BsaXQoJzonKTtcbiAgICBsZXQgaG91ciA9ICtoID4gMTIgPyAraCAtIDEyIDogK2g7XG4gICAgaG91ciA9IGhvdXIgPT09IDAgPyAxMiA6IGhvdXI7XG4gICAgY29uc3QgYW1wbSA9ICtoID49IDEyID8gJ1BNJyA6ICdBTSc7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFtcG0sIG1pbnV0ZTogK20sIGhvdXJcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBleHBlcmltZW50YWxcbiAgICovXG4gIHB1YmxpYyBDYWxjRGVncmVlcyAoZWxlOiBhbnksIHBhcnJlbnRQb3M6IGFueSwgc3RlcDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBjbG9jayA9IHtcbiAgICAgIHdpZHRoOiBlbGUuY3VycmVudFRhcmdldC5vZmZzZXRXaWR0aCxcbiAgICAgIGhlaWdodDogZWxlLmN1cnJlbnRUYXJnZXQub2Zmc2V0SGVpZ2h0XG4gICAgfTtcbiAgICBjb25zdCB0YXJnZXRYID0gY2xvY2sud2lkdGggLyAyO1xuICAgIGNvbnN0IHRhcmdldFkgPSBjbG9jay5oZWlnaHQgLyAyO1xuICAgIGNvbnN0IFZ4ID0gTWF0aC5yb3VuZCgoZWxlLmNsaWVudFggLSBwYXJyZW50UG9zLmxlZnQpIC0gdGFyZ2V0WCk7XG4gICAgY29uc3QgVnkgPSBNYXRoLnJvdW5kKHRhcmdldFkgLSAoZWxlLmNsaWVudFkgLSBwYXJyZW50UG9zLnRvcCkpO1xuICAgIGxldCByYWRpYW5zID0gLU1hdGguYXRhbjIoVnksIFZ4KTtcbiAgICByYWRpYW5zICs9IDIuNSAqIE1hdGguUEk7XG5cbiAgICBsZXQgZGVncmVlcyA9IE1hdGgucm91bmQocmFkaWFucyAqIDE4MCAvIE1hdGguUEkpO1xuICAgIGNvbnN0IGRlZ01vZCA9IGRlZ3JlZXMgJSBzdGVwO1xuICAgIGlmIChkZWdNb2QgPT09IDApIHtcbiAgICAgIHJldHVybiBkZWdyZWVzO1xuICAgIH0gZWxzZSBpZiAoZGVnTW9kID49IHN0ZXAgLyAyKSB7XG4gICAgICBkZWdyZWVzID0gZGVncmVlcyArIChzdGVwIC0gZGVnTW9kKTtcbiAgICB9IGVsc2UgaWYgKGRlZ01vZCA8IHN0ZXAgLyAyKSB7XG4gICAgICBkZWdyZWVzID0gZGVncmVlcyAtIGRlZ01vZDtcbiAgICB9XG4gICAgcmV0dXJuIGRlZ3JlZXM7XG4gIH1cbn1cbiJdfQ==