import { ApplicationRef, Component, ComponentFactoryResolver, EventEmitter, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { TimePickerComponent } from '../time-picker/time-picker.component';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["container"];
export class AtpTimePickerComponent {
    constructor(resolver, appRef) {
        this.resolver = resolver;
        this.appRef = appRef;
        this.timeSelected = new EventEmitter();
        this.config = {};
    }
    ngOnInit() {
        let config = this.config;
        config = {
            time: config.time || '00:00',
            theme: [
                'light',
                'dark',
                'material'
            ].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',
            rangeTime: config.rangeTime || { start: '0:0', end: '24:0' },
            arrowStyle: config.arrowStyle || {}
        };
        config.arrowStyle = {
            background: (config.arrowStyle.background) ?
                config.arrowStyle.background : config.theme !== undefined ?
                config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',
            color: config.arrowStyle.color || '#fff'
        };
        const cfr = this.resolver.resolveComponentFactory(TimePickerComponent);
        const tsc = this.container.createComponent(cfr);
        tsc.instance.subject = new Subject();
        tsc.instance._ref = tsc;
        tsc.instance.appRef = this.appRef;
        tsc.instance.timerElement = '';
        tsc.instance.config = config;
        tsc.instance.activeModal = true;
        tsc.instance.isPopup = false;
        tsc.instance.ParseStringToTime(config.time);
        tsc.instance.subject.asObservable().subscribe(time => {
            this.timeSelected.emit(time);
        });
    }
}
AtpTimePickerComponent.ɵfac = function AtpTimePickerComponent_Factory(t) { return new (t || AtpTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef)); };
AtpTimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AtpTimePickerComponent, selectors: [["atp-time-picker"]], viewQuery: function AtpTimePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, outputs: { timeSelected: "timeSelected" }, decls: 2, vars: 0, consts: [["container", ""]], template: function AtpTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, styles: [".atp-time-picker[_ngcontent-%COMP%]   .icon-container[_ngcontent-%COMP%]{display:inline-block;margin-right:.2em}.atp-time-picker[_ngcontent-%COMP%]   .icon-container[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{cursor:pointer;position:relative;top:.5em}.atp-time-picker[_ngcontent-%COMP%]   .icon-container[_ngcontent-%COMP%]     i{cursor:pointer}"] });
AtpTimePickerComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef }
];
AtpTimePickerComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    timeSelected: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AtpTimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'atp-time-picker',
                template: "<div #container></div>",
                styles: [".atp-time-picker .icon-container{display:inline-block;margin-right:.2em}.atp-time-picker .icon-container svg{cursor:pointer;position:relative;top:.5em}.atp-time-picker .icon-container ::ng-deep i{cursor:pointer}\n"]
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }]; }, { timeSelected: [{
            type: Output
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRwLXRpbWUtcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW1hemluZy10aW1lLXBpY2tlci9zcmMvbGliL2F0cC10aW1lLXBpY2tlci9hdHAtdGltZS1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxjQUFjLEVBQ2QsU0FBUyxFQUNULHdCQUF3QixFQUN4QixZQUFZLEVBRVosTUFBTSxFQUNOLFNBQVMsRUFDVCxnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFFekUsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7OztBQVE3QixNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFNcEMsWUFDVSxRQUFrQyxFQUNsQyxNQUFzQjtBQUNoQyxRQUZVLGFBQVEsR0FBUixRQUFRLENBQTBCO0FBQUMsUUFDbkMsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7QUFBQyxRQUx2QixpQkFBWSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0FBQzVFLFFBQVMsV0FBTSxHQUFxQixFQUFFLENBQUM7QUFDdkMsSUFLRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzdCLFFBQUksTUFBTSxHQUFHO0FBQ2IsWUFBTSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxPQUFPO0FBQ2xDLFlBQU0sS0FBSyxFQUFFO0FBQ2IsZ0JBQVEsT0FBTztBQUNmLGdCQUFRLE1BQU07QUFDZCxnQkFBUSxVQUFVO0FBQ2xCLGFBQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksT0FBTztBQUNyRixZQUFNLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFDO0FBQ2hFLFlBQU0sVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRTtBQUN6QyxTQUFLLENBQUM7QUFDTixRQUFJLE1BQU0sQ0FBQyxVQUFVLEdBQUc7QUFDeEIsWUFBTSxVQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDbEQsZ0JBQVEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDbkUsZ0JBQVUsTUFBTSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU07QUFDMUUsWUFBTSxLQUFLLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksTUFBTTtBQUM5QyxTQUFLLENBQUM7QUFDTixRQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUMzRSxRQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BELFFBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztBQUM5QyxRQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUM1QixRQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdEMsUUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDbkMsUUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDakMsUUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDcEMsUUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDakMsUUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoRCxRQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN6RCxZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSDtrREFsREMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxpQkFBaUIsa0JBQzNCLGtDQUErQztrTUFFaEQ7Ozs7Ozs7bVhBRUc7QUFBQztBQUFnRCxZQWpCbkQsd0JBQXdCO0FBQ3hCLFlBSEEsY0FBYztBQUNmO0FBQUc7QUFFQyx3QkFpQkYsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBQztBQUFPLDJCQUV0RCxNQUFNO0FBQUk7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFwcGxpY2F0aW9uUmVmLFxuICBDb21wb25lbnQsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUaW1lUGlja2VyQ29tcG9uZW50fSBmcm9tICcuLi90aW1lLXBpY2tlci90aW1lLXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHtUaW1lUGlja2VyQ29uZmlnfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhdHAtdGltZS1waWNrZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vYXRwLXRpbWUtcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYXRwLXRpbWUtcGlja2VyLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5cbmV4cG9ydCBjbGFzcyBBdHBUaW1lUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJywge3JlYWQ6IFZpZXdDb250YWluZXJSZWZ9KSBjb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgQE91dHB1dCgpIHRpbWVTZWxlY3RlZDogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgcHVibGljIGNvbmZpZzogVGltZVBpY2tlckNvbmZpZyA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIHRpbWU6IGNvbmZpZy50aW1lIHx8ICcwMDowMCcsXG4gICAgICB0aGVtZTogW1xuICAgICAgICAnbGlnaHQnLFxuICAgICAgICAnZGFyaycsXG4gICAgICAgICdtYXRlcmlhbCdcbiAgICAgIF0uaW5kZXhPZihjb25maWcudGhlbWUpID4gMCA/IGNvbmZpZy50aGVtZSA6ICdsaWdodCcgfHwgY29uZmlnLnRoZW1lIHx8ICdsaWdodCcsXG4gICAgICByYW5nZVRpbWU6IGNvbmZpZy5yYW5nZVRpbWUgfHwge3N0YXJ0OiAnMDowJywgZW5kOiAnMjQ6MCd9LFxuICAgICAgYXJyb3dTdHlsZTogY29uZmlnLmFycm93U3R5bGUgfHwge31cbiAgICB9O1xuICAgIGNvbmZpZy5hcnJvd1N0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZDogKGNvbmZpZy5hcnJvd1N0eWxlLmJhY2tncm91bmQpID9cbiAgICAgICAgY29uZmlnLmFycm93U3R5bGUuYmFja2dyb3VuZCA6IGNvbmZpZy50aGVtZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICBjb25maWcudGhlbWUgPT09ICdkYXJrJyA/ICdyZ2IoMTI4LCAyMDMsIDE5NiknIDogJ2JsdWUnIDogJ2JsdWUnLFxuICAgICAgY29sb3I6IGNvbmZpZy5hcnJvd1N0eWxlLmNvbG9yIHx8ICcjZmZmJ1xuICAgIH07XG4gICAgY29uc3QgY2ZyID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShUaW1lUGlja2VyQ29tcG9uZW50KTtcbiAgICBjb25zdCB0c2MgPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoY2ZyKTtcbiAgICB0c2MuaW5zdGFuY2Uuc3ViamVjdCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICB0c2MuaW5zdGFuY2UuX3JlZiA9IHRzYztcbiAgICB0c2MuaW5zdGFuY2UuYXBwUmVmID0gdGhpcy5hcHBSZWY7XG4gICAgdHNjLmluc3RhbmNlLnRpbWVyRWxlbWVudCA9ICcnO1xuICAgIHRzYy5pbnN0YW5jZS5jb25maWcgPSBjb25maWc7XG4gICAgdHNjLmluc3RhbmNlLmFjdGl2ZU1vZGFsID0gdHJ1ZTtcbiAgICB0c2MuaW5zdGFuY2UuaXNQb3B1cCA9IGZhbHNlO1xuICAgIHRzYy5pbnN0YW5jZS5QYXJzZVN0cmluZ1RvVGltZShjb25maWcudGltZSk7XG4gICAgdHNjLmluc3RhbmNlLnN1YmplY3QuYXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKHRpbWUgPT4ge1xuICAgICAgdGhpcy50aW1lU2VsZWN0ZWQuZW1pdCh0aW1lKTtcbiAgICB9KTtcbiAgfVxufVxuIl19