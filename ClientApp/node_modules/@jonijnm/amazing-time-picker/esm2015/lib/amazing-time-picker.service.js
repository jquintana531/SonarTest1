import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { Subject } from 'rxjs';
import { Preference } from './preferences';
import { TimePickerComponent } from './time-picker/time-picker.component';
import * as ɵngcc0 from '@angular/core';
export class AmazingTimePickerService {
    constructor(resolver, appRef, injector) {
        this.resolver = resolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    open(config) {
        const thems = [
            'light',
            'dark',
            'material-red',
            'material-green',
            'material-blue',
            'material-purple',
            'material-orange'
        ];
        config = config || {};
        config = {
            time: config.time || '00:00',
            theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',
            rangeTime: config.rangeTime || { start: '0:0', end: '24:0' },
            arrowStyle: config.arrowStyle || {},
            locale: config.locale || 'en',
            changeToMinutes: config.changeToMinutes,
            animation: (config.animation == null || config.animation === 'fade') ? 'fade' : (config.animation === 'rotate') ? 'rotate' : false,
            preference: config.preference || null,
            onlyHour: config.onlyHour,
            onlyMinute: config.onlyMinute,
            onlyAM: config.onlyAM,
            onlyPM: config.onlyPM,
        };
        config.rangeTime = {
            start: config.rangeTime.start || '0:0',
            end: config.rangeTime.end || '24:0',
        };
        config.arrowStyle = {
            background: (config.arrowStyle.background) ?
                config.arrowStyle.background : config.theme !== undefined ?
                config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',
            color: config.arrowStyle.color || ''
        };
        const componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);
        const tsc = componentRef.create(this.injector);
        this.appRef.attachView(tsc.hostView);
        const domElem = tsc.hostView.rootNodes[0];
        document.body.appendChild(domElem);
        tsc.instance.subject = new Subject();
        tsc.instance._ref = tsc;
        tsc.instance.appRef = this.appRef;
        tsc.instance.timerElement = '';
        tsc.instance.config = config;
        if (config.preference) {
            tsc.instance.preference = config.preference;
        }
        else {
            tsc.instance.preference = Preference(config.locale);
        }
        tsc.instance.ParseStringToTime(config.time);
        return {
            afterClose: () => tsc.instance.subject.asObservable()
        };
    }
}
AmazingTimePickerService.ɵfac = function AmazingTimePickerService_Factory(t) { return new (t || AmazingTimePickerService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
AmazingTimePickerService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AmazingTimePickerService, factory: AmazingTimePickerService.ɵfac });
AmazingTimePickerService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AmazingTimePickerService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hemluZy10aW1lLXBpY2tlci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbWF6aW5nLXRpbWUtcGlja2VyL3NyYy9saWIvYW1hemluZy10aW1lLXBpY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxjQUFjLEVBQUUsd0JBQXdCLEVBQW1CLFVBQVUsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUcsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDOztBQUd4RSxNQUFNLE9BQU8sd0JBQXdCO0FBQ3JDLElBQ0UsWUFDVSxRQUFrQyxFQUNsQyxNQUFzQixFQUN0QixRQUFrQjtBQUMzQixRQUhTLGFBQVEsR0FBUixRQUFRLENBQTBCO0FBQUMsUUFDbkMsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7QUFBQyxRQUN2QixhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQzlCLElBQ0UsQ0FBQztBQUNILElBQ0UsSUFBSSxDQUFDLE1BQXlCO0FBQUksUUFDaEMsTUFBTSxLQUFLLEdBQUc7QUFDbEIsWUFBTSxPQUFPO0FBQ2IsWUFBTSxNQUFNO0FBQ1osWUFBTSxjQUFjO0FBQ3BCLFlBQU0sZ0JBQWdCO0FBQ3RCLFlBQU0sZUFBZTtBQUNyQixZQUFNLGlCQUFpQjtBQUN2QixZQUFNLGlCQUFpQjtBQUN2QixTQUFLLENBQUM7QUFDTixRQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0FBQzFCLFFBQUksTUFBTSxHQUFHO0FBQ2IsWUFBTSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxPQUFPO0FBQ2xDLFlBQU0sS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FB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RyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ2pDLFFBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO0FBQzNCLFlBQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUNsRCxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxRCxTQUFLO0FBQ0wsUUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoRCxRQUFJLE9BQU87QUFDWCxZQUFNLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7QUFDM0QsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7b0RBbEVDLFVBQVU7c0pBQ1Q7QUFBQztBQUVTLFlBVFksd0JBQXdCO0FBQUksWUFBNUMsY0FBYztBQUFJLFlBQXFELFFBQVE7QUFBRzs7O3FKQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEVtYmVkZGVkVmlld1JlZiwgSW5qZWN0YWJsZSwgSW5qZWN0b3J9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7SURpYWxvZ1Jlc3VsdCwgVGltZVBpY2tlckNvbmZpZ30gZnJvbSAnLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQge1ByZWZlcmVuY2V9IGZyb20gJy4vcHJlZmVyZW5jZXMnO1xuaW1wb3J0IHtUaW1lUGlja2VyQ29tcG9uZW50fSBmcm9tICcuL3RpbWUtcGlja2VyL3RpbWUtcGlja2VyLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbWF6aW5nVGltZVBpY2tlclNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gIH1cblxuICBvcGVuKGNvbmZpZz86IFRpbWVQaWNrZXJDb25maWcpOiBJRGlhbG9nUmVzdWx0IHtcbiAgICBjb25zdCB0aGVtcyA9IFtcbiAgICAgICdsaWdodCcsXG4gICAgICAnZGFyaycsXG4gICAgICAnbWF0ZXJpYWwtcmVkJyxcbiAgICAgICdtYXRlcmlhbC1ncmVlbicsXG4gICAgICAnbWF0ZXJpYWwtYmx1ZScsXG4gICAgICAnbWF0ZXJpYWwtcHVycGxlJyxcbiAgICAgICdtYXRlcmlhbC1vcmFuZ2UnXG4gICAgXTtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnID0ge1xuICAgICAgdGltZTogY29uZmlnLnRpbWUgfHwgJzAwOjAwJyxcbiAgICAgIHRoZW1lOiB0aGVtcy5pbmRleE9mKGNvbmZpZy50aGVtZSkgPiAwID8gY29uZmlnLnRoZW1lIDogJ2xpZ2h0JyB8fCBjb25maWcudGhlbWUgfHwgJ2xpZ2h0JyxcbiAgICAgIHJhbmdlVGltZTogY29uZmlnLnJhbmdlVGltZSB8fCB7c3RhcnQ6ICcwOjAnLCBlbmQ6ICcyNDowJ30sXG4gICAgICBhcnJvd1N0eWxlOiBjb25maWcuYXJyb3dTdHlsZSB8fCB7fSxcbiAgICAgIGxvY2FsZTogY29uZmlnLmxvY2FsZSB8fCAnZW4nLFxuICAgICAgY2hhbmdlVG9NaW51dGVzOiBjb25maWcuY2hhbmdlVG9NaW51dGVzLFxuICAgICAgYW5pbWF0aW9uOiAoY29uZmlnLmFuaW1hdGlvbiA9PSBudWxsIHx8IGNvbmZpZy5hbmltYXRpb24gPT09ICdmYWRlJykgPyAnZmFkZScgOiAoY29uZmlnLmFuaW1hdGlvbiA9PT0gJ3JvdGF0ZScpID8gJ3JvdGF0ZScgOiBmYWxzZSxcbiAgICAgIHByZWZlcmVuY2U6IGNvbmZpZy5wcmVmZXJlbmNlIHx8IG51bGwsXG4gICAgICBvbmx5SG91cjogY29uZmlnLm9ubHlIb3VyLFxuICAgICAgb25seU1pbnV0ZTogY29uZmlnLm9ubHlNaW51dGUsXG4gICAgICBvbmx5QU06IGNvbmZpZy5vbmx5QU0sXG4gICAgICBvbmx5UE06IGNvbmZpZy5vbmx5UE0sXG4gICAgfSBhcyBUaW1lUGlja2VyQ29uZmlnO1xuXG4gICAgY29uZmlnLnJhbmdlVGltZSA9IHtcbiAgICAgIHN0YXJ0OiBjb25maWcucmFuZ2VUaW1lLnN0YXJ0IHx8ICcwOjAnLFxuICAgICAgZW5kOiBjb25maWcucmFuZ2VUaW1lLmVuZCB8fCAnMjQ6MCcsXG4gICAgfTtcbiAgICBjb25maWcuYXJyb3dTdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmQ6IChjb25maWcuYXJyb3dTdHlsZS5iYWNrZ3JvdW5kKSA/XG4gICAgICAgIGNvbmZpZy5hcnJvd1N0eWxlLmJhY2tncm91bmQgOiBjb25maWcudGhlbWUgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgY29uZmlnLnRoZW1lID09PSAnZGFyaycgPyAncmdiKDEyOCwgMjAzLCAxOTYpJyA6ICcnIDogJycsXG4gICAgICBjb2xvcjogY29uZmlnLmFycm93U3R5bGUuY29sb3IgfHwgJydcbiAgICB9O1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoVGltZVBpY2tlckNvbXBvbmVudCk7XG4gICAgY29uc3QgdHNjID0gY29tcG9uZW50UmVmLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcbiAgICB0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KHRzYy5ob3N0Vmlldyk7XG4gICAgY29uc3QgZG9tRWxlbSA9ICh0c2MuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT4pLnJvb3ROb2Rlc1swXSBhcyBIVE1MRWxlbWVudDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvbUVsZW0pO1xuICAgIHRzYy5pbnN0YW5jZS5zdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgIHRzYy5pbnN0YW5jZS5fcmVmID0gdHNjO1xuICAgIHRzYy5pbnN0YW5jZS5hcHBSZWYgPSB0aGlzLmFwcFJlZjtcbiAgICB0c2MuaW5zdGFuY2UudGltZXJFbGVtZW50ID0gJyc7XG4gICAgdHNjLmluc3RhbmNlLmNvbmZpZyA9IGNvbmZpZztcbiAgICBpZiAoY29uZmlnLnByZWZlcmVuY2UpIHtcbiAgICAgIHRzYy5pbnN0YW5jZS5wcmVmZXJlbmNlID0gY29uZmlnLnByZWZlcmVuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRzYy5pbnN0YW5jZS5wcmVmZXJlbmNlID0gUHJlZmVyZW5jZShjb25maWcubG9jYWxlKTtcbiAgICB9XG4gICAgdHNjLmluc3RhbmNlLlBhcnNlU3RyaW5nVG9UaW1lKGNvbmZpZy50aW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgYWZ0ZXJDbG9zZTogKCkgPT4gdHNjLmluc3RhbmNlLnN1YmplY3QuYXNPYnNlcnZhYmxlKClcbiAgICB9O1xuICB9XG59XG4iXX0=