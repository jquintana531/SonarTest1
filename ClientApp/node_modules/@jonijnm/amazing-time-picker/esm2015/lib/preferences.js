const arabic = new Intl.NumberFormat('ar-AE');
const persian = new Intl.NumberFormat('fa-IR');
const ɵ0 = (x) => persian.format(x), ɵ1 = (x) => {
    let exp = persian.format(x);
    if (exp.length === 1) {
        exp = persian.format(0) + exp;
    }
    return exp;
}, ɵ2 = (x) => x === 'AM' ? 'صبح' : 'عصر', ɵ3 = (x) => persian.format(x), ɵ4 = (x) => persian.format(x);
export const PersianPreference = {
    hour: ɵ0,
    minute: ɵ1,
    separator: ':',
    period: ɵ2,
    clockHour: ɵ3,
    clockMinute: ɵ4,
    labels: {
        ok: 'تایید',
        cancel: 'لغو'
    }
};
const ɵ5 = (x) => arabic.format(x), ɵ6 = (x) => {
    let exp = arabic.format(x);
    if (exp.length === 1) {
        exp = arabic.format(0) + exp;
    }
    return exp;
}, ɵ7 = (x) => x === 'AM' ? 'صباحا' : 'مساء', ɵ8 = (x) => arabic.format(x), ɵ9 = (x) => arabic.format(x);
export const ArabicPreference = {
    hour: ɵ5,
    minute: ɵ6,
    separator: ':',
    period: ɵ7,
    clockHour: ɵ8,
    clockMinute: ɵ9,
    labels: {
        ok: 'حسنا',
        cancel: 'إلغاء'
    }
};
const ɵ10 = (x) => x, ɵ11 = (x) => {
    let exp = x;
    if (exp.length === 1) {
        exp = '۰' + exp;
    }
    return exp;
}, ɵ12 = (x) => x === 'AM' ? '上午' : '下午', ɵ13 = (x) => x, ɵ14 = (x) => x;
export const ChinesePreference = {
    hour: ɵ10,
    minute: ɵ11,
    separator: ':',
    period: ɵ12,
    clockHour: ɵ13,
    clockMinute: ɵ14,
    labels: {
        ok: '确定',
        cancel: '取消'
    }
};
export const Preference = (locale) => {
    switch (locale) {
        case 'fa':
            return PersianPreference;
        case 'ar':
            return ArabicPreference;
        case 'zh':
            return ChinesePreference;
        default:
            return null;
    }
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZmVyZW5jZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbWF6aW5nLXRpbWUtcGlja2VyL3NyYy9saWIvcHJlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDLE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztXQUd2QyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FDdEIsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNaLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNwQixHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDL0I7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsT0FFTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQzlCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUN0QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFadkMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXVCO0lBQ25ELElBQUksSUFBMEI7SUFDOUIsTUFBTSxJQU1MO0lBQ0QsU0FBUyxFQUFFLEdBQUc7SUFDZCxNQUFNLElBQW1DO0lBQ3pDLFNBQVMsSUFBMEI7SUFDbkMsV0FBVyxJQUEwQjtJQUNyQyxNQUFNLEVBQUU7UUFDTixFQUFFLEVBQUUsT0FBTztRQUNYLE1BQU0sRUFBRSxLQUFLO0tBQ2Q7Q0FDRixDQUFDO1dBR00sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQ3JCLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDWixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDcEIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLE9BRU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxPQUNqQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FDckIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBWnRDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUF1QjtJQUNsRCxJQUFJLElBQXlCO0lBQzdCLE1BQU0sSUFNTDtJQUNELFNBQVMsRUFBRSxHQUFHO0lBQ2QsTUFBTSxJQUFzQztJQUM1QyxTQUFTLElBQXlCO0lBQ2xDLFdBQVcsSUFBeUI7SUFDcEMsTUFBTSxFQUFFO1FBQ04sRUFBRSxFQUFFLE1BQU07UUFDVixNQUFNLEVBQUUsT0FBTztLQUNoQjtDQUNGLENBQUM7WUFHTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDWixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDWixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3BCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQ2pCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLFFBRU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUM1QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUNOLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBWnZCLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUF1QjtJQUNuRCxJQUFJLEtBQVc7SUFDZixNQUFNLEtBTUw7SUFDRCxTQUFTLEVBQUUsR0FBRztJQUNkLE1BQU0sS0FBaUM7SUFDdkMsU0FBUyxLQUFVO0lBQ25CLFdBQVcsS0FBVTtJQUNyQixNQUFNLEVBQUU7UUFDTixFQUFFLEVBQUUsSUFBSTtRQUNSLE1BQU0sRUFBRSxJQUFJO0tBQ2I7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBYyxFQUFzQixFQUFFO0lBQy9ELFFBQVEsTUFBTSxFQUFFO1FBQ2QsS0FBSyxJQUFJO1lBQ0wsT0FBTyxpQkFBaUIsQ0FBQztRQUM3QixLQUFLLElBQUk7WUFDTCxPQUFPLGdCQUFnQixDQUFDO1FBQzVCLEtBQUssSUFBSTtZQUNMLE9BQU8saUJBQWlCLENBQUM7UUFDN0I7WUFDRSxPQUFPLElBQUksQ0FBQztLQUNmO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURpc3BsYXlQcmVmZXJlbmNlIH0gZnJvbSAnLi9kZWZpbml0aW9ucyc7XG5cbmNvbnN0IGFyYWJpYyA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnYXItQUUnKTtcbmNvbnN0IHBlcnNpYW4gPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2ZhLUlSJyk7XG5cbmV4cG9ydCBjb25zdCBQZXJzaWFuUHJlZmVyZW5jZTogSURpc3BsYXlQcmVmZXJlbmNlID0ge1xuICBob3VyOiAoeCkgPT4gcGVyc2lhbi5mb3JtYXQoeCksXG4gIG1pbnV0ZTogKHgpID0+IHtcbiAgICBsZXQgZXhwID0gcGVyc2lhbi5mb3JtYXQoeCk7XG4gICAgaWYgKGV4cC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGV4cCA9IHBlcnNpYW4uZm9ybWF0KDApICsgZXhwO1xuICAgIH1cbiAgICByZXR1cm4gZXhwO1xuICB9LFxuICBzZXBhcmF0b3I6ICc6JyxcbiAgcGVyaW9kOiAoeCkgPT4geCA9PT0gJ0FNJyA/ICfYtdio2K0nIDogJ9i52LXYsScsXG4gIGNsb2NrSG91cjogKHgpID0+IHBlcnNpYW4uZm9ybWF0KHgpLFxuICBjbG9ja01pbnV0ZTogKHgpID0+IHBlcnNpYW4uZm9ybWF0KHgpLFxuICBsYWJlbHM6IHtcbiAgICBvazogJ9iq2KfbjNuM2K8nLFxuICAgIGNhbmNlbDogJ9mE2LrZiCdcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IEFyYWJpY1ByZWZlcmVuY2U6IElEaXNwbGF5UHJlZmVyZW5jZSA9IHtcbiAgaG91cjogKHgpID0+IGFyYWJpYy5mb3JtYXQoeCksXG4gIG1pbnV0ZTogKHgpID0+IHtcbiAgICBsZXQgZXhwID0gYXJhYmljLmZvcm1hdCh4KTtcbiAgICBpZiAoZXhwLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZXhwID0gYXJhYmljLmZvcm1hdCgwKSArIGV4cDtcbiAgICB9XG4gICAgcmV0dXJuIGV4cDtcbiAgfSxcbiAgc2VwYXJhdG9yOiAnOicsXG4gIHBlcmlvZDogKHgpID0+IHggPT09ICdBTScgPyAn2LXYqNin2K3YpycgOiAn2YXYs9in2KEnLFxuICBjbG9ja0hvdXI6ICh4KSA9PiBhcmFiaWMuZm9ybWF0KHgpLFxuICBjbG9ja01pbnV0ZTogKHgpID0+IGFyYWJpYy5mb3JtYXQoeCksXG4gIGxhYmVsczoge1xuICAgIG9rOiAn2K3Ys9mG2KcnLFxuICAgIGNhbmNlbDogJ9il2YTYutin2KEnXG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBDaGluZXNlUHJlZmVyZW5jZTogSURpc3BsYXlQcmVmZXJlbmNlID0ge1xuICBob3VyOiAgKHgpID0+IHgsXG4gIG1pbnV0ZTogKHgpID0+IHtcbiAgICBsZXQgZXhwID0geDtcbiAgICBpZiAoZXhwLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZXhwID0gJ9uwJyArIGV4cDtcbiAgICB9XG4gICAgcmV0dXJuIGV4cDtcbiAgfSxcbiAgc2VwYXJhdG9yOiAnOicsXG4gIHBlcmlvZDogKHgpID0+IHggPT09ICdBTScgPyAn5LiK5Y2IJyA6ICfkuIvljYgnLFxuICBjbG9ja0hvdXI6ICh4KSA9PiB4LFxuICBjbG9ja01pbnV0ZTogKHgpID0+IHgsXG4gIGxhYmVsczoge1xuICAgIG9rOiAn56Gu5a6aJyxcbiAgICBjYW5jZWw6ICflj5bmtognXG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBQcmVmZXJlbmNlID0gKGxvY2FsZTogc3RyaW5nKTogSURpc3BsYXlQcmVmZXJlbmNlID0+IHtcbiAgc3dpdGNoIChsb2NhbGUpIHtcbiAgICBjYXNlICdmYSc6XG4gICAgICAgIHJldHVybiBQZXJzaWFuUHJlZmVyZW5jZTtcbiAgICBjYXNlICdhcic6XG4gICAgICAgIHJldHVybiBBcmFiaWNQcmVmZXJlbmNlO1xuICAgIGNhc2UgJ3poJzpcbiAgICAgICAgcmV0dXJuIENoaW5lc2VQcmVmZXJlbmNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbiJdfQ==