import { Directive, EventEmitter, HostListener, Output, ViewContainerRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { AmazingTimePickerService } from './amazing-time-picker.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './amazing-time-picker.service';
export class AtpDirective {
    constructor(viewContainerRef, atp) {
        this.viewContainerRef = viewContainerRef;
        this.atp = atp;
        this.myClick = new EventEmitter();
        this.onChange = (x) => {
        };
        this.elementRef = this.viewContainerRef.element;
    }
    onClick(e) {
        const ele = this.viewContainerRef.element.nativeElement;
        const time = ele.value;
        const theme = ele.getAttribute('theme');
        const start = ele.getAttribute('start');
        const end = ele.getAttribute('end');
        const locale = ele.getAttribute('locale') || 'en';
        const changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';
        const animation = ele.getAttribute('animation');
        const preference = ele.getAttribute('preference') || null;
        const onlyHour = ele.getAttribute('onlyHour') === 'true';
        const onlyMinute = ele.getAttribute('onlyMinute') === 'true';
        const onlyAM = ele.getAttribute('onlyAM') === 'true';
        const onlyPM = ele.getAttribute('onlyPM') === 'true';
        let arrowStyle = ele.getAttribute('arrowStyle');
        arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\'', 'g'), '"')) : '';
        const timePickerFunction = this.atp.open({
            time,
            theme,
            rangeTime: { start, end },
            'arrowStyle': arrowStyle,
            locale,
            changeToMinutes,
            animation,
            onlyHour,
            onlyMinute,
            onlyAM,
            onlyPM,
            preference
        });
        timePickerFunction.afterClose().subscribe(retTime => {
            this.writeValue(retTime); // update the native element
            this.onChange(retTime); // update the form value (if there's a form)
        });
    }
    onInput(e) {
        this.onChange(e.srcElement.value);
    }
    writeValue(value) {
        if (this.elementRef) {
            this.elementRef.nativeElement.value = value;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
    }
}
AtpDirective.ɵfac = function AtpDirective_Factory(t) { return new (t || AtpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AmazingTimePickerService)); };
AtpDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: AtpDirective, selectors: [["input", "atp-time-picker", ""]], hostBindings: function AtpDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function AtpDirective_click_HostBindingHandler($event) { return ctx.onClick($event); })("input", function AtpDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });
    } }, outputs: { myClick: "myClick" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: AtpDirective,
                multi: true
            }
        ])] });
AtpDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: AmazingTimePickerService }
];
AtpDirective.propDecorators = {
    myClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onInput: [{ type: HostListener, args: ['input', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AtpDirective, [{
        type: Directive,
        args: [{
                selector: 'input[atp-time-picker]',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: AtpDirective,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.AmazingTimePickerService }]; }, { myClick: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW1hemluZy10aW1lLXBpY2tlci9zcmMvbGliL2F0cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBYyxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQXVCLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkUsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sK0JBQStCLENBQUM7OztBQVl2RSxNQUFNLE9BQU8sWUFBWTtBQUFHLElBUTFCLFlBQ1MsZ0JBQWtDLEVBQ2pDLEdBQTZCO0FBQ3RDLFFBRlEscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ2xDLFFBQUcsR0FBSCxHQUFHLENBQTBCO0FBQ3pDLFFBVFksWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDekMsUUFFVSxhQUFRLEdBQUcsQ0FBQyxDQUFNLEVBQVEsRUFBRTtBQUN0QyxRQUFFLENBQUMsQ0FBQztBQUNKLFFBS0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0FBQ3BELElBQUUsQ0FBQztBQUNILElBRUUsT0FBTyxDQUFDLENBQUM7QUFDWCxRQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQzVELFFBQUksTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUMzQixRQUFJLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsUUFBSSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLFFBQUksTUFBTSxH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QUUsc0JBQ1QsMEJBQ0UsT0FBTyxFQUFFO2FBQWlCLDBCQUMxQixXQUFXLEVBQUUsWUFBWSwwQkFDekIsS0FBSyxFQUFFLElBQUksc0JBQ1osa0JBQ0YsY0FDRjs7Ozs7Ozs7ZUFDSTtBQUFDO0FBQXNDLFlBZHVCLGdCQUFnQjtBQUFJLFlBRS9FLHdCQUF3QjtBQUFHO0FBQUc7QUFBZ0Msc0JBY25FLE1BQU07QUFBSyxzQkFhWCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQzlCLHNCQXFDRixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQy9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0FtYXppbmdUaW1lUGlja2VyU2VydmljZX0gZnJvbSAnLi9hbWF6aW5nLXRpbWUtcGlja2VyLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFthdHAtdGltZS1waWNrZXJdJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogQXRwRGlyZWN0aXZlLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQXRwRGlyZWN0aXZlIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuXG4gIEBPdXRwdXQoKSBteUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBvbkNoYW5nZSA9ICh4OiBhbnkpOiB2b2lkID0+IHtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGF0cDogQW1hemluZ1RpbWVQaWNrZXJTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuZWxlbWVudFJlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50O1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkNsaWNrKGUpIHtcbiAgICBjb25zdCBlbGUgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IHRpbWUgPSBlbGUudmFsdWU7XG4gICAgY29uc3QgdGhlbWUgPSBlbGUuZ2V0QXR0cmlidXRlKCd0aGVtZScpO1xuICAgIGNvbnN0IHN0YXJ0ID0gZWxlLmdldEF0dHJpYnV0ZSgnc3RhcnQnKTtcbiAgICBjb25zdCBlbmQgPSBlbGUuZ2V0QXR0cmlidXRlKCdlbmQnKTtcbiAgICBjb25zdCBsb2NhbGUgPSBlbGUuZ2V0QXR0cmlidXRlKCdsb2NhbGUnKSB8fCAnZW4nO1xuICAgIGNvbnN0IGNoYW5nZVRvTWludXRlcyA9IGVsZS5nZXRBdHRyaWJ1dGUoJ2NoYW5nZVRvTWludXRlcycpID09PSAndHJ1ZSc7XG4gICAgY29uc3QgYW5pbWF0aW9uID0gZWxlLmdldEF0dHJpYnV0ZSgnYW5pbWF0aW9uJyk7XG4gICAgY29uc3QgcHJlZmVyZW5jZSA9IGVsZS5nZXRBdHRyaWJ1dGUoJ3ByZWZlcmVuY2UnKSB8fCBudWxsO1xuICAgIGNvbnN0IG9ubHlIb3VyID0gZWxlLmdldEF0dHJpYnV0ZSgnb25seUhvdXInKSA9PT0gJ3RydWUnO1xuICAgIGNvbnN0IG9ubHlNaW51dGUgPSBlbGUuZ2V0QXR0cmlidXRlKCdvbmx5TWludXRlJykgPT09ICd0cnVlJztcbiAgICBjb25zdCBvbmx5QU0gPSBlbGUuZ2V0QXR0cmlidXRlKCdvbmx5QU0nKSA9PT0gJ3RydWUnO1xuICAgIGNvbnN0IG9ubHlQTSA9IGVsZS5nZXRBdHRyaWJ1dGUoJ29ubHlQTScpID09PSAndHJ1ZSc7XG4gICAgbGV0IGFycm93U3R5bGUgPSBlbGUuZ2V0QXR0cmlidXRlKCdhcnJvd1N0eWxlJyk7XG4gICAgYXJyb3dTdHlsZSA9IChhcnJvd1N0eWxlKSA/IEpTT04ucGFyc2UoYXJyb3dTdHlsZS5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcJycsICdnJyksICdcIicpKSA6ICcnO1xuICAgIGNvbnN0IHRpbWVQaWNrZXJGdW5jdGlvbiA9IHRoaXMuYXRwLm9wZW4oe1xuICAgICAgdGltZSxcbiAgICAgIHRoZW1lLFxuICAgICAgcmFuZ2VUaW1lOiB7c3RhcnQsIGVuZH0sXG4gICAgICAnYXJyb3dTdHlsZSc6IGFycm93U3R5bGUsXG4gICAgICBsb2NhbGUsXG4gICAgICBjaGFuZ2VUb01pbnV0ZXMsXG4gICAgICBhbmltYXRpb24sXG4gICAgICBvbmx5SG91cixcbiAgICAgIG9ubHlNaW51dGUsXG4gICAgICBvbmx5QU0sXG4gICAgICBvbmx5UE0sXG4gICAgICBwcmVmZXJlbmNlXG4gICAgfSk7XG5cbiAgICB0aW1lUGlja2VyRnVuY3Rpb24uYWZ0ZXJDbG9zZSgpLnN1YnNjcmliZShyZXRUaW1lID0+IHtcbiAgICAgIHRoaXMud3JpdGVWYWx1ZShyZXRUaW1lKTsgLy8gdXBkYXRlIHRoZSBuYXRpdmUgZWxlbWVudFxuICAgICAgdGhpcy5vbkNoYW5nZShyZXRUaW1lKTsgLy8gdXBkYXRlIHRoZSBmb3JtIHZhbHVlIChpZiB0aGVyZSdzIGEgZm9ybSlcbiAgICB9KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQnXSlcbiAgb25JbnB1dChlOiBhbnkpIHtcbiAgICB0aGlzLm9uQ2hhbmdlKGUuc3JjRWxlbWVudC52YWx1ZSk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50UmVmKSB7XG4gICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuKSB7XG4gIH1cbn1cbiJdfQ==