(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('amazing-time-picker', ['exports', '@angular/core', 'rxjs', '@angular/common', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['amazing-time-picker'] = {}, global.ng.core, global.rxjs, global.ng.common, global.ng.forms));
}(this, (function (exports, core, rxjs, common, forms) { 'use strict';

    var arabic = new Intl.NumberFormat('ar-AE');
    var persian = new Intl.NumberFormat('fa-IR');
    var ɵ0 = function (x) { return persian.format(x); }, ɵ1 = function (x) {
        var exp = persian.format(x);
        if (exp.length === 1) {
            exp = persian.format(0) + exp;
        }
        return exp;
    }, ɵ2 = function (x) { return x === 'AM' ? 'صبح' : 'عصر'; }, ɵ3 = function (x) { return persian.format(x); }, ɵ4 = function (x) { return persian.format(x); };
    var PersianPreference = {
        hour: ɵ0,
        minute: ɵ1,
        separator: ':',
        period: ɵ2,
        clockHour: ɵ3,
        clockMinute: ɵ4,
        labels: {
            ok: 'تایید',
            cancel: 'لغو'
        }
    };
    var ɵ5 = function (x) { return arabic.format(x); }, ɵ6 = function (x) {
        var exp = arabic.format(x);
        if (exp.length === 1) {
            exp = arabic.format(0) + exp;
        }
        return exp;
    }, ɵ7 = function (x) { return x === 'AM' ? 'صباحا' : 'مساء'; }, ɵ8 = function (x) { return arabic.format(x); }, ɵ9 = function (x) { return arabic.format(x); };
    var ArabicPreference = {
        hour: ɵ5,
        minute: ɵ6,
        separator: ':',
        period: ɵ7,
        clockHour: ɵ8,
        clockMinute: ɵ9,
        labels: {
            ok: 'حسنا',
            cancel: 'إلغاء'
        }
    };
    var ɵ10 = function (x) { return x; }, ɵ11 = function (x) {
        var exp = x;
        if (exp.length === 1) {
            exp = '۰' + exp;
        }
        return exp;
    }, ɵ12 = function (x) { return x === 'AM' ? '上午' : '下午'; }, ɵ13 = function (x) { return x; }, ɵ14 = function (x) { return x; };
    var ChinesePreference = {
        hour: ɵ10,
        minute: ɵ11,
        separator: ':',
        period: ɵ12,
        clockHour: ɵ13,
        clockMinute: ɵ14,
        labels: {
            ok: '确定',
            cancel: '取消'
        }
    };
    var Preference = function (locale) {
        switch (locale) {
            case 'fa':
                return PersianPreference;
            case 'ar':
                return ArabicPreference;
            case 'zh':
                return ChinesePreference;
            default:
                return null;
        }
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AtpCoreService = /** @class */ (function () {
        function AtpCoreService() {
        }
        AtpCoreService.prototype.allowedTimes = function (min, max) {
            var allTimes = [];
            var nowMinHour = +min.split(':')[0];
            var nowMaxHour = +max.split(':')[0];
            var nowMinMin = +min.split(':')[1];
            var nowMaxMin = +max.split(':')[1];
            for (var i = nowMinHour; i <= nowMaxHour; i++) {
                var j = 0, jDest = 59;
                if (i === nowMinHour) {
                    j = nowMinMin;
                }
                else if (i === nowMaxHour) {
                    jDest = nowMaxMin;
                }
                for (j; j <= jDest; j++) {
                    var hour = i <= 12 ? i : i - 12;
                    var minute = j;
                    var ampm = i < 12 ? 'AM' : 'PM';
                    allTimes.push(hour + ':' + minute + ' ' + ampm);
                }
            }
            return allTimes;
        };
        AtpCoreService.prototype.ClockMaker = function (type) {
            var items = [];
            var timeVal = (type === 'minute') ? 60 : 12;
            var timeStep = (type === 'minute') ? 5 : 1;
            var timeStart = (type === 'minute') ? 0 : 1;
            var r = 124;
            var j = r - 25;
            for (var min = timeStart; min <= timeVal; min += timeStep) {
                if (min !== 60) {
                    var str = String(min);
                    var x = j * Math.sin(Math.PI * 2 * (min / timeVal));
                    var y = j * Math.cos(Math.PI * 2 * (min / timeVal));
                    items.push({
                        time: str,
                        left: (x + r - 17) + 'px',
                        top: (-y + r - 17) + 'px',
                        type: type
                    });
                }
            }
            return items;
        };
        AtpCoreService.prototype.TimeToString = function (time) {
            var ampm = time.ampm, minute = time.minute, hour = time.hour;
            var hh = ampm === 'PM' ? +hour + 12 : +hour;
            if (ampm === 'AM' && hh === 12) {
                hh = 0;
            }
            if (hh === 24) {
                hh = 12;
            }
            hh = hh < 10 ? '0' + hh : '' + hh;
            var mm = minute < 10 ? '0' + minute : minute;
            return hh + ":" + mm;
        };
        /**
         * Converts 00:00 format to ITime object
         */
        AtpCoreService.prototype.StringToTime = function (time) {
            var _a = __read(time.split(':'), 2), h = _a[0], m = _a[1];
            var hour = +h > 12 ? +h - 12 : +h;
            hour = hour === 0 ? 12 : hour;
            var ampm = +h >= 12 ? 'PM' : 'AM';
            return {
                ampm: ampm,
                minute: +m,
                hour: hour
            };
        };
        /**
         * @experimental
         */
        AtpCoreService.prototype.CalcDegrees = function (ele, parrentPos, step) {
            var clock = {
                width: ele.currentTarget.offsetWidth,
                height: ele.currentTarget.offsetHeight
            };
            var targetX = clock.width / 2;
            var targetY = clock.height / 2;
            var Vx = Math.round((ele.clientX - parrentPos.left) - targetX);
            var Vy = Math.round(targetY - (ele.clientY - parrentPos.top));
            var radians = -Math.atan2(Vy, Vx);
            radians += 2.5 * Math.PI;
            var degrees = Math.round(radians * 180 / Math.PI);
            var degMod = degrees % step;
            if (degMod === 0) {
                return degrees;
            }
            else if (degMod >= step / 2) {
                degrees = degrees + (step - degMod);
            }
            else if (degMod < step / 2) {
                degrees = degrees - degMod;
            }
            return degrees;
        };
        return AtpCoreService;
    }());
    AtpCoreService.decorators = [
        { type: core.Injectable }
    ];
    AtpCoreService.ctorParameters = function () { return []; };

    var TimePickerComponent = /** @class */ (function () {
        function TimePickerComponent(core) {
            var _this = this;
            this.core = core;
            this.subject = null;
            this.activeModal = false;
            this.clockType = 'hour';
            this.time = {
                ampm: 'AM',
                minute: 0,
                hour: 12
            };
            this.nowTime = this.time.hour;
            this.isPopup = true;
            this.animationTime = 0;
            this.clockMaker = function () {
                var type = _this.clockType;
                _this.clockObject = _this.core.ClockMaker(type);
                _this.setArrow(null);
            };
            this.setActiveTime = function () {
                _this.nowTime = (_this.clockType === 'minute' ? _this.time.minute : _this.time.hour);
            };
            this.setArrow = function (obj) {
                if (obj) {
                    _this.clockType = obj.type;
                    if (_this.clockType === 'minute') {
                        _this.time.minute = obj.time;
                    }
                    else {
                        _this.time.hour = obj.time;
                    }
                }
                var step = (_this.clockType === 'minute') ? 6 : 30;
                var time = (_this.clockType === 'minute') ? _this.time.minute : _this.time.hour;
                var degrees = time * step;
                _this.rotationClass(degrees);
                _this.setActiveTime();
            };
            this.rotationClass = function (degrees) {
                _this.degree = degrees;
            };
            this.getDegree = function (ele) {
                var step = _this.clockType === 'minute' ? 6 : 30;
                var parrentPos = ele.currentTarget.getBoundingClientRect();
                if (_this.isClicked && (ele.currentTarget === ele.target || ele.target.nodeName === 'BUTTON')) {
                    var clock = {
                        width: ele.currentTarget.offsetWidth,
                        height: ele.currentTarget.offsetHeight
                    };
                    var degrees = _this.core.CalcDegrees(ele, parrentPos, step);
                    var hour = _this.time.hour, minute = _this.time.minute;
                    if (_this.clockType === 'hour') {
                        hour = (degrees / step);
                        hour = (hour > 12) ? hour - 12 : hour;
                    }
                    else if (_this.clockType === 'minute') {
                        minute = (degrees / step);
                        minute = (minute > 59) ? minute - 60 : minute;
                    }
                    var min = _this.config.rangeTime.start, max = _this.config.rangeTime.end;
                    var nowMinHour = +min.split(':')[0] < 12 ? +min.split(':')[0] : +min.split(':')[0] - 12;
                    var nowMaxHour = +max.split(':')[0] < 12 ? +max.split(':')[0] : +max.split(':')[0] - 12;
                    var nowMinMin = +min.split(':')[1];
                    var nowMaxMin = +max.split(':')[1];
                    var nowTime = _this.GetNowTime(hour, _this.time.ampm, minute);
                    if (_this.allowed.indexOf(nowTime) > -1) {
                        _this.time.hour = hour;
                        _this.time.minute = minute;
                        _this.rotationClass(degrees);
                        _this.setActiveTime();
                    }
                    else if (_this.clockType === 'hour' && (hour === nowMinHour && minute <= nowMinMin)) {
                        _this.time.hour = nowMinHour;
                        _this.time.minute = nowMinMin;
                    }
                    else if (_this.clockType === 'hour' && (hour === nowMaxHour && minute >= nowMaxMin)) {
                        _this.time.hour = nowMaxHour;
                        _this.time.minute = nowMaxMin;
                    }
                }
            };
        }
        TimePickerComponent.prototype.ParseStringToTime = function (time) {
            time = (time === '' || time === undefined || time === null) ? this.time.hour + ':' + this.time.minute : time;
            this.time = this.core.StringToTime(time);
        };
        TimePickerComponent.prototype.GetTime = function () {
            var time = this.core.TimeToString(this.time);
            this.subject.next(time);
        };
        TimePickerComponent.prototype.setTime = function () {
            this.isClicked = false;
            if (this.config.changeToMinutes && !this.config.onlyHour && this.clockType === 'hour') {
                this.ChangeAnimational('minute');
            }
        };
        TimePickerComponent.prototype.GetNowTime = function (hour, ampm, minute) {
            var Hour = (hour === 12 && ampm === 'AM') ? '0' : hour;
            var nowTime = Hour + ':' + minute + ' ' + ampm;
            return nowTime;
        };
        TimePickerComponent.prototype.checkBet = function () {
            var nowTime = this.GetNowTime(this.time.hour, this.time.ampm, this.time.minute);
            if (this.allowed.indexOf(nowTime) === -1) {
                this.ParseStringToTime(this.config.rangeTime.start);
                this.setArrow(null);
                this.setActiveTime();
            }
        };
        /**
         * Check if clock button time is not in allowed times and disabled
         * @param t Button Time Value
         */
        TimePickerComponent.prototype.checkDisabled = function (t) {
            var m = (this.clockType === 'minute') ? t : this.time.minute;
            var h = (this.clockType === 'hour') ? t : this.time.hour;
            var nowTime = this.GetNowTime(h, this.time.ampm, m);
            return (this.allowed.indexOf(nowTime) === -1) ? true : false;
        };
        TimePickerComponent.prototype.modalAnimation = function () {
            var _this = this;
            setTimeout(function () {
                _this.activeModal = true;
            }, 1);
        };
        TimePickerComponent.prototype.ngOnInit = function () {
            this.allowed = this.core.allowedTimes(this.config.rangeTime.start, this.config.rangeTime.end);
            if (this.config && this.config.onlyMinute) {
                this.clockType = 'minute';
            }
            if (this.config) {
                if (this.config.onlyPM) {
                    this.time.ampm = 'PM';
                }
                else if (this.config.onlyAM) {
                    this.time.ampm = 'AM';
                }
            }
            this.clockMaker();
            this.modalAnimation();
        };
        TimePickerComponent.prototype.MinuteClick = function () {
            /**
             * We are not permitting user to select the minute.
             * but anyway, it will return the standard time, if provided the default time.
             */
            if (this.config && this.config.onlyHour) {
                return false;
            }
            this.ChangeAnimational('minute');
        };
        TimePickerComponent.prototype.HourClick = function () {
            /**
             * We are not permitting user to select the minute.
             * but anyway, it will return the standard time, if provided the default time.
             */
            if (this.config && this.config.onlyMinute) {
                return false;
            }
            this.ChangeAnimational('hour');
        };
        TimePickerComponent.prototype.ChangeAnimational = function (type) {
            var _this = this;
            if (this.clockType !== type) {
                if (this.config.animation === 'fade') {
                    this.changeToMin = true;
                    setTimeout(function () {
                        _this.changeToMin = false;
                        _this.clockType = type;
                        _this.clockMaker();
                    }, 200);
                }
                else if (this.config.animation === 'rotate') {
                    this.animationTime = 0.4;
                    this.clockType = type;
                    this.clockMaker();
                }
                else {
                    this.clockType = type;
                    this.clockMaker();
                }
            }
        };
        TimePickerComponent.prototype.SetAM = function () {
            if (this.config && this.config.onlyPM) {
                return false;
            }
            this.time.ampm = 'AM';
            this.checkBet();
        };
        TimePickerComponent.prototype.SetPM = function () {
            if (this.config && this.config.onlyAM) {
                return false;
            }
            this.time.ampm = 'PM';
            this.checkBet();
        };
        TimePickerComponent.prototype.Close = function (e) {
            var _this = this;
            if (e.target === e.currentTarget) {
                if (this.isPopup === true) {
                    this.activeModal = false;
                    setTimeout(function () {
                        _this.appRef.detachView(_this._ref.hostView);
                        _this._ref.destroy();
                    }, 400);
                }
            }
        };
        TimePickerComponent.prototype.getClockArrowStyle = function () {
            var arrowStyle = {};
            if (this.config.animation === 'rotate') {
                arrowStyle = {
                    transform: 'rotate(' + this.degree + 'deg)',
                    '-webkit-transform': 'rotate(' + this.degree + 'deg)',
                    background: this.config.arrowStyle.background,
                    '-webkit-transition': 'transform ' + this.getAnimationTime(),
                    transition: 'transform ' + +this.getAnimationTime()
                };
            }
            else {
                arrowStyle = {
                    transform: 'rotate(' + this.degree + 'deg)',
                    '-webkit-transform': 'rotate(' + this.degree + 'deg)',
                    background: this.config.arrowStyle.background,
                };
            }
            return arrowStyle;
        };
        TimePickerComponent.prototype.getAnimationTime = function () {
            return this.animationTime + 's';
        };
        /**
         * Event on clock mouse click down
         * @param event - captured event
         */
        TimePickerComponent.prototype.updateClockDown = function (event) {
            this.isClicked = true;
            this.animationTime = 0;
            this.getDegree(event);
        };
        TimePickerComponent.prototype.setNewRotation = function () {
            var targetDegree = ((this.time.minute / 60) * 360) + 360;
            var targetDegree2 = targetDegree * 2;
            var diff1 = Math.abs(this.degree - targetDegree);
            var diff2 = Math.abs(this.degree - targetDegree2);
            if (diff1 < diff2) {
                this.rotationClass(targetDegree);
            }
            else {
                this.rotationClass(targetDegree2);
            }
        };
        TimePickerComponent.prototype.GetSeparator = function () {
            if (this.preference && this.preference.separator) {
                return this.preference.separator;
            }
            return ':';
        };
        TimePickerComponent.prototype.GetPeriod = function (period) {
            if (this.preference && this.preference.period) {
                return this.preference.period(period);
            }
            return period;
        };
        TimePickerComponent.prototype.GetMinute = function () {
            if (this.preference && this.preference.minute) {
                return this.preference.minute(this.time.minute);
            }
            var min = this.time.minute.toString();
            if (+min < 10) {
                min = '0' + min;
            }
            return min;
        };
        TimePickerComponent.prototype.GetHour = function () {
            if (this.preference && this.preference.hour) {
                return this.preference.hour(this.time.hour);
            }
            return this.time.hour;
        };
        TimePickerComponent.prototype.GetClockTime = function (clock) {
            if (!this.preference) {
                return clock.time;
            }
            if (this.clockType === 'hour' && this.preference.clockHour) {
                return this.preference.clockHour(clock.time);
            }
            if (this.clockType === 'minute' && this.preference.clockMinute) {
                return this.preference.clockMinute(clock.time);
            }
            return clock.time;
        };
        TimePickerComponent.prototype.GetLabel = function (key) {
            var defaults = {
                'ok': 'Ok',
                'cancel': 'Cancel'
            };
            if ((this.preference && this.preference.labels && this.preference.labels.ok)) {
                defaults.ok = this.preference.labels.ok;
            }
            if ((this.preference && this.preference.labels && this.preference.labels.cancel)) {
                defaults.cancel = this.preference.labels.cancel;
            }
            return defaults[key];
        };
        return TimePickerComponent;
    }());
    TimePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'time-picker',
                    template: "<div id=\"time-picker-wrapper\" class=\"{{config.theme}}\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\" (click)=\"Close($event);\">\n  <div id=\"time-picker\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\">\n    <div class=\"time-picker-header\">\n      <div class=\"time-picker-selected-time\">\n          <div class=\"time-picker-hour\" (click)=\"HourClick()\" [attr.disabled]=\"(config.onlyMinute) ? 'disabled' : null\"\n            [ngClass]=\"{'selected' : clockType == 'hour'}\">{{GetHour()}}</div>\n          <span class=\"time-seprator\">{{GetSeparator()}}</span>\n          <div class=\"time-picker-minute\" (click)=\"MinuteClick();\" [attr.disabled]=\"(config.onlyHour) ? 'disabled' : null\"\n            [ngClass]=\"{'selected' : clockType == 'minute'}\">{{GetMinute()}}</div>\n      </div>\n      <div class=\"time-picker-selected-ampm\">\n        <div class=\"time-picker-am\" (click)=\"SetAM();\" [attr.disabled]=\"(config.onlyPM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'AM'}\">{{GetPeriod('AM')}}</div>\n        <div class=\"time-picker-pm\" (click)=\"SetPM();\" [attr.disabled]=\"(config.onlyAM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'PM'}\">{{GetPeriod('PM')}}</div>\n\n      </div>\n    </div>\n    <div class=\"time-picker-content\">\n        <div class=\"time-picker-clock\" [ngClass]=\"{'hide-time-picker-clock': changeToMin}\"  (mousemove)=\"getDegree($event);\" (mousedown)=\"updateClockDown($event)\" (mouseup)=\"setTime();\">\n          <button *ngFor=\"let clock of clockObject\" [ngClass]=\"{'active' : nowTime == clock.time}\" \n            [id]=\"'timepicker-item-id-' + clock.time\" \n            [disabled]=\"checkDisabled(clock.time)\" \n            [ngStyle]=\"{top: clock.top,left: clock.left, color: nowTime == clock.time ? config.arrowStyle.color :  '', background: nowTime == clock.time ? config.arrowStyle.background : 'transparent'}\">\n            {{GetClockTime(clock)}}\n          </button>\n          <div class=\"time-picker-clock-origin\" [ngStyle]=\"{ background: config.arrowStyle.background}\"></div>\n          <div id=\"tpc-arrow\" class=\"time-picker-clock-arrow\" [ngStyle]=\"getClockArrowStyle()\">\n            <span [ngStyle]=\"{ background: config.arrowStyle.background }\"></span>\n          </div>\n        </div>\n    </div>\n    <div class=\"time-picker-footer\">\n        <button (click)=\"Close($event);\">{{GetLabel('cancel')}}</button>\n        <button (click)=\"GetTime();Close($event);\" class=\"atp-ref-dialog-close\">{{GetLabel('ok')}}</button>\n    </div>\n  </div>\n</div>",
                    styles: ["#time-picker-wrapper{position:fixed;top:0;bottom:0;left:0;right:0;background:transparent;transition:background .4s;font-family:\"Roboto\",sans-serif;z-index:1000}#time-picker-wrapper.static{position:relative!important;background:transparent!important;display:inline-block;z-index:0}#time-picker-wrapper.active{background:rgba(0,0,0,.3)}#time-picker-wrapper.dark #time-picker{background:#424242}#time-picker-wrapper.dark #time-picker .time-picker-header{border-bottom:none;background:#555555}#time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time{color:#999}#time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time div.selected{color:#fff}#time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm{color:#999}#time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm div.selected{color:#fff}#time-picker-wrapper.dark #time-picker .time-picker-clock{background:#555555}#time-picker-wrapper.dark #time-picker .time-picker-clock>button{color:#fff}#time-picker-wrapper.dark #time-picker .time-picker-footer{border-top:none}#time-picker-wrapper.dark #time-picker .time-picker-footer button{background:#555555;color:#fff}#time-picker-wrapper.dark #time-picker .time-picker-footer button:hover{background:#777}#time-picker-wrapper.light #time-picker{background:#fff}#time-picker-wrapper.light #time-picker .time-picker-header{border-bottom:1px solid #e1e1e1}#time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time{color:#aaa}#time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time div.selected{color:#000}#time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm{color:#aaa}#time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm div.selected{color:#000}#time-picker-wrapper.light #time-picker .time-picker-clock{background:#ededed}#time-picker-wrapper.light #time-picker .time-picker-clock>button{color:#000}#time-picker-wrapper.light #time-picker .time-picker-clock>button.active{background:blue;color:#fff}#time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-origin{background:blue}#time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow{background:blue}#time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow span{background:blue}#time-picker-wrapper.light #time-picker .time-picker-footer{border-top:1px solid #e1e1e1}#time-picker-wrapper.light #time-picker .time-picker-footer button{background:#f1f1f1}#time-picker-wrapper.light #time-picker .time-picker-footer button:hover{background:#ddd}#time-picker-wrapper.material-green #time-picker{background:#fff}#time-picker-wrapper.material-green #time-picker .time-picker-header{background-color:#00897b;border-bottom:1px solid #e1e1e1}#time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time{color:#fff6}#time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time div.selected{color:#fff}#time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm{color:#fff6}#time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm div.selected{color:#fff}#time-picker-wrapper.material-green #time-picker .time-picker-clock{background:#ededed}#time-picker-wrapper.material-green #time-picker .time-picker-clock>button{color:#000}#time-picker-wrapper.material-green #time-picker .time-picker-clock>button.active{background:#00897b;color:#fff}#time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-origin{background:#00897b}#time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow{background:#00897b}#time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow span{background:#00897b}#time-picker-wrapper.material-green #time-picker .time-picker-footer{border-top:1px solid #e1e1e1}#time-picker-wrapper.material-green #time-picker .time-picker-footer button{font-weight:bold;text-transform:uppercase;background:transparent;color:#00897b}#time-picker-wrapper.material-green #time-picker .time-picker-footer button:hover{background:#ddd}#time-picker-wrapper.material-blue #time-picker{background:#fff}#time-picker-wrapper.material-blue #time-picker .time-picker-header{background-color:#3f51b5;border-bottom:1px solid #e1e1e1}#time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time{color:#fff6}#time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time div.selected{color:#fff}#time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm{color:#fff6}#time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm div.selected{color:#fff}#time-picker-wrapper.material-blue #time-picker .time-picker-clock{background:#ededed}#time-picker-wrapper.material-blue #time-picker .time-picker-clock>button{color:#000}#time-picker-wrapper.material-blue #time-picker .time-picker-clock>button.active{background:#3F51B5;color:#fff}#time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-origin{background:#3F51B5}#time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow{background:#3F51B5}#time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow span{background:#3F51B5}#time-picker-wrapper.material-blue #time-picker .time-picker-footer{border-top:1px solid #e1e1e1}#time-picker-wrapper.material-blue #time-picker .time-picker-footer button{font-weight:bold;text-transform:uppercase;background:transparent;color:#3f51b5}#time-picker-wrapper.material-blue #time-picker .time-picker-footer button:hover{background:#ddd}#time-picker-wrapper.material-red #time-picker{background:#fff}#time-picker-wrapper.material-red #time-picker .time-picker-header{background-color:#f44336;border-bottom:1px solid #e1e1e1}#time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time{color:#fff6}#time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time div.selected{color:#fff}#time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm{color:#fff6}#time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm div.selected{color:#fff}#time-picker-wrapper.material-red #time-picker .time-picker-clock{background:#ededed}#time-picker-wrapper.material-red #time-picker .time-picker-clock>button{color:#000}#time-picker-wrapper.material-red #time-picker .time-picker-clock>button.active{background:#F44336;color:#fff}#time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-origin{background:#F44336}#time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow{background:#F44336}#time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow span{background:#F44336}#time-picker-wrapper.material-red #time-picker .time-picker-footer{border-top:1px solid #e1e1e1}#time-picker-wrapper.material-red #time-picker .time-picker-footer button{font-weight:bold;text-transform:uppercase;background:transparent;color:#f44336}#time-picker-wrapper.material-red #time-picker .time-picker-footer button:hover{background:#ddd}#time-picker-wrapper.material-purple #time-picker{background:#fff}#time-picker-wrapper.material-purple #time-picker .time-picker-header{background-color:#9c27b0;border-bottom:1px solid #e1e1e1}#time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time{color:#fff6}#time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time div.selected{color:#fff}#time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm{color:#fff6}#time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm div.selected{color:#fff}#time-picker-wrapper.material-purple #time-picker .time-picker-clock{background:#ededed}#time-picker-wrapper.material-purple #time-picker .time-picker-clock>button{color:#000}#time-picker-wrapper.material-purple #time-picker .time-picker-clock>button.active{background:#9C27B0;color:#fff}#time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-origin{background:#9C27B0}#time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow{background:#9C27B0}#time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow span{background:#9C27B0}#time-picker-wrapper.material-purple #time-picker .time-picker-footer{border-top:1px solid #e1e1e1}#time-picker-wrapper.material-purple #time-picker .time-picker-footer button{font-weight:bold;text-transform:uppercase;background:transparent;color:#9c27b0}#time-picker-wrapper.material-purple #time-picker .time-picker-footer button:hover{background:#ddd}#time-picker-wrapper.material-orange #time-picker{background:#fff}#time-picker-wrapper.material-orange #time-picker .time-picker-header{background-color:#ff9800;border-bottom:1px solid #e1e1e1}#time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time{color:#fff6}#time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time div.selected{color:#fff}#time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm{color:#fff6}#time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm div.selected{color:#fff}#time-picker-wrapper.material-orange #time-picker .time-picker-clock{background:#ededed}#time-picker-wrapper.material-orange #time-picker .time-picker-clock>button{color:#000}#time-picker-wrapper.material-orange #time-picker .time-picker-clock>button.active{background:#FF9800;color:#fff}#time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-origin{background:#FF9800}#time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow{background:#FF9800}#time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow span{background:#FF9800}#time-picker-wrapper.material-orange #time-picker .time-picker-footer{border-top:1px solid #e1e1e1}#time-picker-wrapper.material-orange #time-picker .time-picker-footer button{font-weight:bold;text-transform:uppercase;background:transparent;color:#ff9800}#time-picker-wrapper.material-orange #time-picker .time-picker-footer button:hover{background:#ddd}#time-picker-wrapper #time-picker{width:325px;height:auto;box-shadow:0 11px 15px -7px #0003,0 24px 38px 3px #00000024,0 9px 46px 8px #0000001f;border-radius:2px;margin:15vh auto!important;transform:scale(.5)!important;transition:transform .3s,opacity .3s;opacity:0}#time-picker-wrapper #time-picker.static{margin:0!important;box-shadow:0 11px 15px -7px #0003,0 0 7px 3px #00000024,0 9px 46px 8px #0000001f}#time-picker-wrapper #time-picker.active{transform:scale(1)!important;opacity:1}#time-picker-wrapper #time-picker .time-picker-header{text-align:center;padding:15px 0}#time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time{font-size:35px;padding:5px 0}#time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div{display:inline-block;cursor:pointer}#time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div[disabled=true]{cursor:default}#time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm{font-size:18px}#time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div{display:inline-block;padding:0 5px;cursor:pointer}#time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div[disabled=true]{cursor:default}#time-picker-wrapper #time-picker .time-picker-content .time-picker-clock{width:200px;height:200px;padding:24px;border-radius:50%;cursor:pointer;margin:25px auto;position:relative;user-select:none;-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;opacity:1;transform:scale(1);transition:opacity .3s,transform .3s}#time-picker-wrapper #time-picker .time-picker-content .time-picker-clock button{border:none;position:absolute;width:35px;height:35px;border-radius:50%;cursor:pointer;font-size:17px;text-align:center;padding:0;transition:all .2s;z-index:3}#time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-origin{width:6px;height:6px;border-radius:50%;position:absolute;left:50%;top:50%;margin-left:-3px;margin-top:-3px}#time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow{width:2px;height:41%;position:absolute;left:0;top:22px;right:0;margin:auto;transform-origin:bottom}#time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow span{width:8px;height:8px;border-radius:50%;position:absolute;top:0;right:-3px}#time-picker-wrapper #time-picker .time-picker-content .time-picker-clock.hide-time-picker-clock{opacity:0;transform:scale(.8)}#time-picker-wrapper #time-picker .time-picker-footer{padding:15px;text-align:right}#time-picker-wrapper #time-picker .time-picker-footer button{border:transparent;margin-left:10px;padding:10px;font-size:14px;border-radius:2px;cursor:pointer}*{outline:none;box-sizing:content-box}\n"]
                },] }
    ];
    TimePickerComponent.ctorParameters = function () { return [
        { type: AtpCoreService }
    ]; };

    var AmazingTimePickerService = /** @class */ (function () {
        function AmazingTimePickerService(resolver, appRef, injector) {
            this.resolver = resolver;
            this.appRef = appRef;
            this.injector = injector;
        }
        AmazingTimePickerService.prototype.open = function (config) {
            var thems = [
                'light',
                'dark',
                'material-red',
                'material-green',
                'material-blue',
                'material-purple',
                'material-orange'
            ];
            config = config || {};
            config = {
                time: config.time || '00:00',
                theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',
                rangeTime: config.rangeTime || { start: '0:0', end: '24:0' },
                arrowStyle: config.arrowStyle || {},
                locale: config.locale || 'en',
                changeToMinutes: config.changeToMinutes,
                animation: (config.animation == null || config.animation === 'fade') ? 'fade' : (config.animation === 'rotate') ? 'rotate' : false,
                preference: config.preference || null,
                onlyHour: config.onlyHour,
                onlyMinute: config.onlyMinute,
                onlyAM: config.onlyAM,
                onlyPM: config.onlyPM,
            };
            config.rangeTime = {
                start: config.rangeTime.start || '0:0',
                end: config.rangeTime.end || '24:0',
            };
            config.arrowStyle = {
                background: (config.arrowStyle.background) ?
                    config.arrowStyle.background : config.theme !== undefined ?
                    config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',
                color: config.arrowStyle.color || ''
            };
            var componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);
            var tsc = componentRef.create(this.injector);
            this.appRef.attachView(tsc.hostView);
            var domElem = tsc.hostView.rootNodes[0];
            document.body.appendChild(domElem);
            tsc.instance.subject = new rxjs.Subject();
            tsc.instance._ref = tsc;
            tsc.instance.appRef = this.appRef;
            tsc.instance.timerElement = '';
            tsc.instance.config = config;
            if (config.preference) {
                tsc.instance.preference = config.preference;
            }
            else {
                tsc.instance.preference = Preference(config.locale);
            }
            tsc.instance.ParseStringToTime(config.time);
            return {
                afterClose: function () { return tsc.instance.subject.asObservable(); }
            };
        };
        return AmazingTimePickerService;
    }());
    AmazingTimePickerService.decorators = [
        { type: core.Injectable }
    ];
    AmazingTimePickerService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver },
        { type: core.ApplicationRef },
        { type: core.Injector }
    ]; };

    var AtpTimePickerComponent = /** @class */ (function () {
        function AtpTimePickerComponent(resolver, appRef) {
            this.resolver = resolver;
            this.appRef = appRef;
            this.timeSelected = new core.EventEmitter();
            this.config = {};
        }
        AtpTimePickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var config = this.config;
            config = {
                time: config.time || '00:00',
                theme: [
                    'light',
                    'dark',
                    'material'
                ].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',
                rangeTime: config.rangeTime || { start: '0:0', end: '24:0' },
                arrowStyle: config.arrowStyle || {}
            };
            config.arrowStyle = {
                background: (config.arrowStyle.background) ?
                    config.arrowStyle.background : config.theme !== undefined ?
                    config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',
                color: config.arrowStyle.color || '#fff'
            };
            var cfr = this.resolver.resolveComponentFactory(TimePickerComponent);
            var tsc = this.container.createComponent(cfr);
            tsc.instance.subject = new rxjs.Subject();
            tsc.instance._ref = tsc;
            tsc.instance.appRef = this.appRef;
            tsc.instance.timerElement = '';
            tsc.instance.config = config;
            tsc.instance.activeModal = true;
            tsc.instance.isPopup = false;
            tsc.instance.ParseStringToTime(config.time);
            tsc.instance.subject.asObservable().subscribe(function (time) {
                _this.timeSelected.emit(time);
            });
        };
        return AtpTimePickerComponent;
    }());
    AtpTimePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'atp-time-picker',
                    template: "<div #container></div>",
                    styles: [".atp-time-picker .icon-container{display:inline-block;margin-right:.2em}.atp-time-picker .icon-container svg{cursor:pointer;position:relative;top:.5em}.atp-time-picker .icon-container ::ng-deep i{cursor:pointer}\n"]
                },] }
    ];
    AtpTimePickerComponent.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver },
        { type: core.ApplicationRef }
    ]; };
    AtpTimePickerComponent.propDecorators = {
        container: [{ type: core.ViewChild, args: ['container', { read: core.ViewContainerRef },] }],
        timeSelected: [{ type: core.Output }]
    };

    var AtpDirective = /** @class */ (function () {
        function AtpDirective(viewContainerRef, atp) {
            this.viewContainerRef = viewContainerRef;
            this.atp = atp;
            this.myClick = new core.EventEmitter();
            this.onChange = function (x) {
            };
            this.elementRef = this.viewContainerRef.element;
        }
        AtpDirective.prototype.onClick = function (e) {
            var _this = this;
            var ele = this.viewContainerRef.element.nativeElement;
            var time = ele.value;
            var theme = ele.getAttribute('theme');
            var start = ele.getAttribute('start');
            var end = ele.getAttribute('end');
            var locale = ele.getAttribute('locale') || 'en';
            var changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';
            var animation = ele.getAttribute('animation');
            var preference = ele.getAttribute('preference') || null;
            var onlyHour = ele.getAttribute('onlyHour') === 'true';
            var onlyMinute = ele.getAttribute('onlyMinute') === 'true';
            var onlyAM = ele.getAttribute('onlyAM') === 'true';
            var onlyPM = ele.getAttribute('onlyPM') === 'true';
            var arrowStyle = ele.getAttribute('arrowStyle');
            arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\'', 'g'), '"')) : '';
            var timePickerFunction = this.atp.open({
                time: time,
                theme: theme,
                rangeTime: { start: start, end: end },
                'arrowStyle': arrowStyle,
                locale: locale,
                changeToMinutes: changeToMinutes,
                animation: animation,
                onlyHour: onlyHour,
                onlyMinute: onlyMinute,
                onlyAM: onlyAM,
                onlyPM: onlyPM,
                preference: preference
            });
            timePickerFunction.afterClose().subscribe(function (retTime) {
                _this.writeValue(retTime); // update the native element
                _this.onChange(retTime); // update the form value (if there's a form)
            });
        };
        AtpDirective.prototype.onInput = function (e) {
            this.onChange(e.srcElement.value);
        };
        AtpDirective.prototype.writeValue = function (value) {
            if (this.elementRef) {
                this.elementRef.nativeElement.value = value;
            }
        };
        AtpDirective.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        AtpDirective.prototype.registerOnTouched = function (fn) {
        };
        return AtpDirective;
    }());
    AtpDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input[atp-time-picker]',
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: AtpDirective,
                            multi: true
                        }
                    ]
                },] }
    ];
    AtpDirective.ctorParameters = function () { return [
        { type: core.ViewContainerRef },
        { type: AmazingTimePickerService }
    ]; };
    AtpDirective.propDecorators = {
        myClick: [{ type: core.Output }],
        onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }],
        onInput: [{ type: core.HostListener, args: ['input', ['$event'],] }]
    };

    var AmazingTimePickerModule = /** @class */ (function () {
        function AmazingTimePickerModule() {
        }
        return AmazingTimePickerModule;
    }());
    AmazingTimePickerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                    ],
                    declarations: [
                        TimePickerComponent,
                        AtpTimePickerComponent,
                        AtpDirective
                    ],
                    providers: [
                        AmazingTimePickerService,
                        AtpCoreService
                    ],
                    entryComponents: [
                        TimePickerComponent
                    ],
                    exports: [
                        TimePickerComponent,
                        AtpTimePickerComponent,
                        AtpDirective
                    ]
                },] }
    ];

    /*
     * Public API Surface of amazing-time-picker
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AmazingTimePickerModule = AmazingTimePickerModule;
    exports.AmazingTimePickerService = AmazingTimePickerService;
    exports.AtpDirective = AtpDirective;
    exports.AtpTimePickerComponent = AtpTimePickerComponent;
    exports.TimePickerComponent = TimePickerComponent;
    exports.ɵa = AtpCoreService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=amazing-time-picker.umd.js.map
