import { InjectionToken, Injectable, Component, Input, ViewChild, Renderer2, Inject, NgModule, defineInjectable } from '@angular/core';
import { Subject } from 'rxjs';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';

const _c0 = ["imageContainer"];
class ImageViewerConfig {
}
/**
 * @param {?=} icon
 * @param {?=} tooltip
 * @param {?=} sortId
 * @param {?=} show
 * @return {?}
 */
function createButtonConfig(icon, tooltip, sortId = 0, show = true) {
    return { icon: icon, tooltip: tooltip, sortId: sortId, show: show };
}
const /** @type {?} */ IMAGEVIEWER_CONFIG = new InjectionToken('imageviewer.config');
let /** @type {?} */ IMAGEVIEWER_CONFIG_DEFAULT = {
    width: 800,
    // component default width
    height: 600,
    // component default height
    bgStyle: '#ECEFF1',
    // component background style
    scaleStep: 0.1,
    // zoom scale step (using the zoom in/out buttons)
    rotateStepper: false,
    loadingMessage: 'Loading...',
    buttonStyle: {
        iconFontFamily: 'Material Icons',
        // font used to render the button icons
        alpha: 0.5,
        // buttons' transparence value
        hoverAlpha: 0.7,
        // buttons' transparence value when mouse is over
        bgStyle: '#000000',
        //  buttons' background style
        iconStyle: '#ffffff',
        // buttons' icon colors
        borderStyle: '#000000',
        // buttons' border style
        borderWidth: 0 // buttons' border width (0 == disabled)
    },
    tooltips: {
        enabled: true,
        // enable or disable tooltips for buttons
        bgStyle: '#000000',
        // tooltip background style
        bgAlpha: 0.5,
        // tooltip background transparence
        textStyle: '#ffffff',
        // tooltip's text style
        textAlpha: 0.9,
        // tooltip's text transparence
        padding: 15,
        // tooltip padding
        radius: 20 // tooltip border radius
    },
    nextPageButton: createButtonConfig(String.fromCharCode(0xE409), 'Next page', 0),
    beforePageButton: createButtonConfig(String.fromCharCode(0xE408), 'Previous page', 1),
    zoomOutButton: createButtonConfig(String.fromCharCode(0xE900), 'Zoom out', 0),
    zoomInButton: createButtonConfig(String.fromCharCode(0xE8FF), 'Zoom in', 1),
    rotateLeftButton: createButtonConfig(String.fromCharCode(0xE419), 'Rotate left', 2),
    rotateRightButton: createButtonConfig(String.fromCharCode(0xE41A), 'Rotate right', 3),
    resetButton: createButtonConfig(String.fromCharCode(0xE863), 'Reset', 4)
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Button {
    /**
     * @param {?} config
     * @param {?} style
     */
    constructor(config, style) {
        this.style = style;
        //#region Properties
        this.sortId = 0;
        // hover state
        this.hover = false;
        // show/hide button
        this.display = true;
        this.drawPosition = null;
        this.drawRadius = 0;
        this.sortId = config.sortId;
        this.display = config.show;
        this.icon = config.icon;
        this.tooltip = config.tooltip;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) { alert('no click action set!'); return true; }
    /**
     * @param {?} evt
     * @return {?}
     */
    onMouseDown(evt) { return false; }
    /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @return {?}
     */
    draw(ctx, x, y, radius) {
        this.drawPosition = { x: x, y: y };
        this.drawRadius = radius;
        // preserve context
        ctx.save();
        // drawing settings
        const /** @type {?} */ isHover = (typeof this.hover === 'function') ? this.hover() : this.hover;
        ctx.globalAlpha = (isHover) ? this.style.hoverAlpha : this.style.alpha;
        ctx.fillStyle = this.style.bgStyle;
        ctx.lineWidth = 0;
        // draw circle
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.fill();
        if (this.style.borderWidth > 0) {
            ctx.lineWidth = this.style.borderWidth;
            ctx.strokeStyle = this.style.borderStyle;
            ctx.stroke();
        }
        // draw icon
        if (this.icon !== null) {
            ctx.save();
            // ctx.globalCompositeOperation = 'destination-out';
            this.drawIconFont(ctx, x, y, radius);
            ctx.restore();
        }
        // restore context
        ctx.restore();
    }
    /**
     * @param {?} ctx
     * @param {?} centreX
     * @param {?} centreY
     * @param {?} size
     * @return {?}
     */
    drawIconFont(ctx, centreX, centreY, size) {
        // font settings
        ctx.font = size + 'px ' + this.style.iconFontFamily;
        ctx.fillStyle = this.style.iconStyle;
        // calculate position
        const /** @type {?} */ textSize = ctx.measureText(this.icon);
        const /** @type {?} */ x = centreX - textSize.width / 2;
        const /** @type {?} */ y = centreY + size / 2;
        // draw it
        ctx.fillText(this.icon, x, y);
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    isWithinBounds(x, y) {
        if (this.drawPosition === null) {
            return false;
        }
        const /** @type {?} */ dx = Math.abs(this.drawPosition.x - x), /** @type {?} */ dy = Math.abs(this.drawPosition.y - y);
        return dx * dx + dy * dy <= this.drawRadius * this.drawRadius;
    }
}
/**
 * @abstract
 */
class ResourceLoader {
    constructor() {
        this.viewport = { width: 0, height: 0, scale: 1, rotation: 0, x: 0, y: 0 };
        this.minScale = 0;
        this.maxScale = 4;
        this.currentItem = 1;
        this.totalItem = 1;
        this.showItemsQuantity = false;
        this.loaded = false;
        this.loading = false;
        this.rendering = false;
        this.resourceChange = new Subject();
    }
    /**
     * @param {?} canvasDim
     * @return {?}
     */
    resetViewport(canvasDim) {
        if (!this.loaded || !canvasDim) {
            return;
        }
        const /** @type {?} */ rotation = this.viewport ? this.viewport.rotation : 0;
        const /** @type {?} */ inverted = toSquareAngle(rotation) / 90 % 2 !== 0;
        const /** @type {?} */ canvas = {
            width: !inverted ? canvasDim.width : canvasDim.height,
            height: !inverted ? canvasDim.height : canvasDim.width
        };
        if (((canvas.height / this._image.height) * this._image.width) <= canvas.width) {
            this.viewport.scale = canvas.height / this._image.height;
        }
        else {
            this.viewport.scale = canvas.width / this._image.width;
        }
        this.minScale = this.viewport.scale / 4;
        this.maxScale = this.viewport.scale * 4;
        // start point to draw image
        this.viewport.width = this._image.width * this.viewport.scale;
        this.viewport.height = this._image.height * this.viewport.scale;
        this.viewport.x = (canvasDim.width - this.viewport.width) / 2;
        this.viewport.y = (canvasDim.height - this.viewport.height) / 2;
    }
    /**
     * @param {?} ctx
     * @param {?} config
     * @param {?} canvasDim
     * @param {?} onFinish
     * @return {?}
     */
    draw(ctx, config, canvasDim, onFinish) {
        // clear canvas
        ctx.clearRect(0, 0, canvasDim.width, canvasDim.height);
        // Draw background color;
        ctx.fillStyle = config.bgStyle;
        ctx.fillRect(0, 0, canvasDim.width, canvasDim.height);
        // draw image (transformed, rotate and scaled)
        if (!this.loading && this.loaded) {
            ctx.translate(this.viewport.x + this.viewport.width / 2, this.viewport.y + this.viewport.height / 2);
            ctx.rotate(this.viewport.rotation * Math.PI / 180);
            ctx.scale(this.viewport.scale, this.viewport.scale);
            ctx.drawImage(this._image, -this._image.width / 2, -this._image.height / 2);
        }
        else {
            ctx.fillStyle = '#333';
            ctx.font = '25px Verdana';
            ctx.textAlign = 'center';
            ctx.fillText(config.loadingMessage || 'Loading...', canvasDim.width / 2, canvasDim.height / 2);
        }
        onFinish(ctx, config, canvasDim);
    }
    /**
     * @return {?}
     */
    onResourceChange() { return this.resourceChange.asObservable(); }
}
/**
 * @param {?} angle
 * @return {?}
 */
function toSquareAngle(angle) {
    return 90 * ((Math.trunc(angle / 90) + (Math.trunc(angle % 90) > 45 ? 1 : 0)) % 4);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ImageResourceLoader extends ResourceLoader {
    /**
     * @return {?}
     */
    setUp() {
        this.loadResource();
    }
    /**
     * @return {?}
     */
    loadResource() {
        this.loading = true;
        this._image = new Image();
        this._image.addEventListener('load', (evt) => {
            this.loaded = true;
            this.loading = false;
            this.resourceChange.next();
        }, false);
        this._image.src = this.src;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ImageCacheService {
    constructor() {
        this._cache = [];
    }
    /**
     * @return {?}
     */
    get cache() {
        return this._cache;
    }
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    getCache(url, page) {
        return this.cache.find(i => i.url === url && i.page === page);
    }
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    getImage(url, page) {
        const /** @type {?} */ c = this.getCache(url, page);
        return c ? c.image : null;
    }
    /**
     * @param {?} url
     * @param {?} page
     * @param {?} image
     * @return {?}
     */
    saveImage(url, page, image) {
        const /** @type {?} */ cache = this.getCache(url, page);
        if (cache) {
            cache.image = image;
        }
        else {
            this.cache.push({ url, page, image });
        }
    }
    /**
     * @return {?}
     */
    disposeCache() {
        this.cache.forEach(i => URL.revokeObjectURL(i.image.src));
        this._cache = [];
    }
}
ImageCacheService.ɵfac = function ImageCacheService_Factory(t) { return new (t || ImageCacheService)(); };
ImageCacheService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImageCacheService, factory: ImageCacheService.ɵfac, providedIn: 'root' });
/** @nocollapse */
ImageCacheService.ctorParameters = () => [];
/** @nocollapse */ ImageCacheService.ngInjectableDef = defineInjectable({ factory: function ImageCacheService_Factory() { return new ImageCacheService(); }, token: ImageCacheService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageCacheService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PdfResourceLoader extends ResourceLoader {
    /**
     * @param {?} _imageCache
     */
    constructor(_imageCache) {
        super();
        this._imageCache = _imageCache;
        if (typeof window !== 'undefined' && 'Worker' in window) {
            if (pdfjsLib && pdfjsLib.GlobalWorkerOptions && !pdfjsLib.GlobalWorkerOptions.workerSrc) {
                pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
            }
        }
        this.showItemsQuantity = true;
    }
    /**
     * @return {?}
     */
    setUp() {
        const /** @type {?} */ vm = this;
        if (vm.loading || !vm.src) {
            return;
        }
        const /** @type {?} */ loadingTask = pdfjsLib.getDocument(vm.src);
        vm.loading = true;
        vm.currentItem = 1;
        loadingTask.then((pdf) => {
            vm._pdf = pdf;
            vm.totalItem = pdf.numPages;
            vm.loaded = true;
            vm.loadResource();
        }, (reason) => {
            console.error(reason);
        });
    }
    /**
     * @return {?}
     */
    loadResource() {
        const /** @type {?} */ vm = this;
        if (!vm.loaded) {
            vm._pendingReload = true;
            return;
        }
        vm.loaded = false;
        const /** @type {?} */ url = vm.src;
        const /** @type {?} */ page = vm.currentItem;
        vm._pdf.getPage(page).then((pdfPage) => {
            vm._page = pdfPage;
            vm.loadImage(url, page, () => {
                vm.loaded = true;
                vm.loading = false;
                if (vm._pendingReload) {
                    vm._pendingReload = false;
                    vm.loadResource();
                }
                else {
                    vm.resourceChange.next();
                }
            });
        });
    }
    /**
     * @param {?} src
     * @param {?} page
     * @param {?} onFinish
     * @return {?}
     */
    loadImage(src, page, onFinish) {
        const /** @type {?} */ vm = this;
        const /** @type {?} */ cacheimg = vm._imageCache.getImage(src, page);
        if (cacheimg) {
            vm._image = cacheimg;
            onFinish();
            return;
        }
        const /** @type {?} */ canvas = document.createElement('canvas');
        const /** @type {?} */ context = canvas.getContext('2d');
        const /** @type {?} */ pageVp = vm._page.getViewport(2);
        canvas.width = pageVp.width;
        canvas.height = pageVp.height;
        const /** @type {?} */ renderContext = {
            canvasContext: context,
            viewport: pageVp
        };
        const /** @type {?} */ renderTask = vm._page.render(renderContext);
        renderTask.then(function () {
            canvas.toBlob(blob => {
                const /** @type {?} */ img = new Image();
                img.onload = onFinish;
                img.src = URL.createObjectURL(blob);
                vm._imageCache.saveImage(src, page, img);
                vm._image = img;
            });
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MIN_TOOLTIP_WIDTH_SPACE = 500;
class ImageViewerComponent {
    /**
     * @param {?} _sanitizer
     * @param {?} _renderer
     * @param {?} _imageCache
     * @param {?} config
     */
    constructor(_sanitizer, _renderer, _imageCache, config) {
        this._sanitizer = _sanitizer;
        this._renderer = _renderer;
        this._imageCache = _imageCache;
        this.config = config;
        this._dirty = true;
        this._buttons = [];
        this._currentTooltip = null;
        this._touchStartState = {};
        this._listenDestroyList = [];
        this.config = this.extendsDefaultConfig(config);
        this._nextPageButton = new Button(this.config.nextPageButton, this.config.buttonStyle);
        this._beforePageButton = new Button(this.config.beforePageButton, this.config.buttonStyle);
        this._zoomOutButton = new Button(this.config.zoomOutButton, this.config.buttonStyle);
        this._zoomInButton = new Button(this.config.zoomInButton, this.config.buttonStyle);
        this._rotateLeftButton = new Button(this.config.rotateLeftButton, this.config.buttonStyle);
        this._rotateRightButton = new Button(this.config.rotateRightButton, this.config.buttonStyle);
        this._resetButton = new Button(this.config.resetButton, this.config.buttonStyle);
        this._buttons = [
            this._zoomOutButton,
            this._zoomInButton,
            this._rotateLeftButton,
            this._rotateRightButton,
            this._resetButton
        ].filter(item => item.display)
            .sort((a, b) => a.sortId - b.sortId);
    }
    /**
     * @return {?}
     */
    get src() { return this._src; }
    /**
     * @param {?} value
     * @return {?}
     */
    set src(value) {
        if (value === this._src) {
            return;
        }
        this._src = value;
        this.setUpResource();
    }
    /**
     * @return {?}
     */
    get filetype() { return this._filetype; }
    /**
     * @param {?} value
     * @return {?}
     */
    set filetype(value) {
        if (value === this._filetype) {
            return;
        }
        this._filetype = value;
        this.setUpResource();
    }
    /**
     * @return {?}
     */
    get width() { return this._width; }
    /**
     * @param {?} value
     * @return {?}
     */
    set width(value) {
        if (value === this._width) {
            return;
        }
        this._width = value;
        if (this._canvas) {
            this._canvas.width = this._width;
        }
        this.resetImage();
    }
    /**
     * @return {?}
     */
    get height() { return this._height; }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        if (value === this._height) {
            return;
        }
        this._height = value;
        if (this._canvas) {
            this._canvas.height = this._height;
        }
        this.resetImage();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._canvas = this.canvasRef.nativeElement;
        this._context = this._canvas.getContext('2d');
        // setting canvas dimention
        this._canvas.width = this.width || this.config.width;
        this._canvas.height = this.height || this.config.height;
        // setting buttons actions
        this._nextPageButton.onClick = (evt) => { this.nextPage(); return false; };
        this._beforePageButton.onClick = (evt) => { this.previousPage(); return false; };
        this._zoomOutButton.onClick = (evt) => { this.zoomOut(); return false; };
        this._zoomInButton.onClick = (evt) => { this.zoomIn(); return false; };
        this._rotateLeftButton.onClick = (evt) => { this.rotateLeft(); return false; };
        this._rotateRightButton.onClick = (evt) => { this.rotateRight(); return false; };
        this._resetButton.onClick = (evt) => { this.resetImage(); return false; };
        // register event listeners
        this.addEventListeners();
        this.updateCanvas();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // unregiste event listeners
        this._listenDestroyList.forEach(listenDestroy => {
            if (typeof listenDestroy === 'function') {
                listenDestroy();
            }
        });
        this._imageCache.disposeCache();
    }
    /**
     * @return {?}
     */
    setUpResource() {
        if (this.isImage(this.src) && (!this._resource || !(this._resource instanceof ImageResourceLoader))) {
            if (this._resourceChangeSub) {
                this._resourceChangeSub.unsubscribe();
            }
            if (!this._imageResource) {
                this._imageResource = new ImageResourceLoader();
            }
            this._resource = this._imageResource;
        }
        else if (this.isPdf(this.src) && (!this._resource || !(this._resource instanceof PdfResourceLoader))) {
            if (this._resourceChangeSub) {
                this._resourceChangeSub.unsubscribe();
            }
            if (!this._pdfResource) {
                this._pdfResource = new PdfResourceLoader(this._imageCache);
            }
            this._resource = this._pdfResource;
        }
        if (this._resource) {
            this._resource.src = this.src instanceof File ? URL.createObjectURL(this.src) : this.src;
            this._resourceChangeSub = this._resource.onResourceChange().subscribe(() => {
                this.updateCanvas();
                if (this.src instanceof File) {
                    URL.revokeObjectURL(this._resource.src);
                }
            });
            this._resource.setUp();
            this.resetImage();
            if (this._context) {
                this.updateCanvas();
            }
        }
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onTap(evt) {
        const /** @type {?} */ activeElement = this.getUIElement(this.screenToCanvasCentre(evt.center));
        if (activeElement !== null) {
            activeElement.onClick(evt);
        }
    }
    /**
     * @return {?}
     */
    onTouchEnd() {
        this._touchStartState.viewport = undefined;
        this._touchStartState.scale = undefined;
        this._touchStartState.rotate = undefined;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    processTouchEvent(evt) {
        // process pan
        if (!this._touchStartState.viewport) {
            this._touchStartState.viewport = Object.assign({}, this._resource.viewport);
        }
        const /** @type {?} */ viewport = this._resource.viewport;
        viewport.x = this._touchStartState.viewport.x + evt.deltaX;
        viewport.y = this._touchStartState.viewport.y + evt.deltaY;
        // process pinch in/out
        if (!this._touchStartState.scale) {
            this._touchStartState.scale = this._resource.viewport.scale;
        }
        const /** @type {?} */ newScale = this._touchStartState.scale * evt.scale;
        viewport.scale = newScale > this._resource.maxScale ? this._resource.maxScale :
            newScale < this._resource.minScale ? this._resource.minScale : newScale;
        // process rotate left/right
        if (!this._touchStartState.rotate) {
            this._touchStartState.rotate = { rotation: viewport.rotation, startRotate: evt.rotation };
        }
        if (evt.rotation !== 0) {
            const /** @type {?} */ newAngle = this._touchStartState.rotate.rotation + evt.rotation - this._touchStartState.rotate.startRotate;
            viewport.rotation = this.config.rotateStepper ? toSquareAngle(newAngle) : newAngle;
        }
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    addEventListeners() {
        // zooming
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'DOMMouseScroll', (evt) => this.onMouseWheel(evt)));
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'mousewheel', (evt) => this.onMouseWheel(evt)));
        // show tooltip when mouseover it
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'mousemove', (evt) => this.checkTooltipActivation(this.screenToCanvasCentre({ x: evt.clientX, y: evt.clientY }))));
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onMouseWheel(evt) {
        if (!evt) {
            evt = event;
        }
        evt.preventDefault();
        if (evt.detail < 0 || evt.wheelDelta > 0) {
            // up -> larger
            this.zoomIn();
        }
        else {
            // down -> smaller
            this.zoomOut();
        }
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    checkTooltipActivation(pos) {
        this.getUIElements().forEach(x => x.hover = false);
        const /** @type {?} */ activeElement = this.getUIElement(pos);
        const /** @type {?} */ oldToolTip = this._currentTooltip;
        if (activeElement !== null) {
            if (typeof activeElement.hover !== 'undefined') {
                activeElement.hover = true;
            }
            if (typeof activeElement.tooltip !== 'undefined') {
                this._currentTooltip = activeElement.tooltip;
            }
        }
        if (oldToolTip !== this._currentTooltip) {
            this._dirty = true;
        }
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (!this._resource) {
            return;
        }
        if (this._resource.currentItem >= this._resource.totalItem) {
            return;
        }
        if (this._resource.currentItem < 1) {
            this._resource.currentItem = 0;
        }
        this._resource.currentItem++;
        this._resource.loadResource();
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    previousPage() {
        if (!this._resource) {
            return;
        }
        if (this._resource.currentItem <= 1) {
            return;
        }
        if (this._resource.currentItem > this._resource.totalItem) {
            this._resource.currentItem = this._resource.totalItem + 1;
        }
        this._resource.currentItem--;
        this._resource.loadResource();
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    zoomIn() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ newScale = this._resource.viewport.scale * (1 + this.config.scaleStep);
        this._resource.viewport.scale = newScale > this._resource.maxScale ? this._resource.maxScale : newScale;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    zoomOut() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ newScale = this._resource.viewport.scale * (1 - this.config.scaleStep);
        this._resource.viewport.scale = newScale < this._resource.minScale ? this._resource.minScale : newScale;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    rotateLeft() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ viewport = this._resource.viewport;
        viewport.rotation = viewport.rotation === 0 ? 270 : viewport.rotation - 90;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    rotateRight() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ viewport = this._resource.viewport;
        viewport.rotation = viewport.rotation === 270 ? 0 : viewport.rotation + 90;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    resetImage() {
        if (!this._resource) {
            return;
        }
        this._resource.resetViewport(this._canvas);
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    updateCanvas() {
        this.resetImage();
        // start new render loop
        this.render();
    }
    /**
     * @return {?}
     */
    render() {
        const /** @type {?} */ vm = this;
        // only re-render if dirty
        if (this._dirty && this._resource) {
            this._dirty = false;
            const /** @type {?} */ ctx = this._context;
            ctx.save();
            this._resource.draw(ctx, this.config, this._canvas, () => {
                ctx.restore();
                if (vm._resource.loaded) {
                    // draw buttons
                    this.drawButtons(ctx);
                    // draw paginator
                    if (this._resource.showItemsQuantity) {
                        this.drawPaginator(ctx);
                    }
                }
            });
        }
        requestAnimationFrame(() => this.render());
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    drawButtons(ctx) {
        const /** @type {?} */ padding = this.config.tooltips.padding;
        const /** @type {?} */ radius = this.config.tooltips.radius;
        const /** @type {?} */ gap = 2 * radius + padding;
        const /** @type {?} */ x = this._canvas.width - radius - padding;
        const /** @type {?} */ y = this._canvas.height - radius - padding;
        // draw buttons
        for (let /** @type {?} */ i = 0; i < this._buttons.length; i++) {
            this._buttons[i].draw(ctx, x, y - gap * i, radius);
        }
        // draw tooltip
        if (this._currentTooltip !== null && this._canvas.width > MIN_TOOLTIP_WIDTH_SPACE) {
            ctx.save();
            const /** @type {?} */ fontSize = radius;
            ctx.font = fontSize + 'px sans-serif';
            // calculate position
            const /** @type {?} */ textSize = ctx.measureText(this._currentTooltip).width, /** @type {?} */ rectWidth = textSize + padding, /** @type {?} */ rectHeight = fontSize * 0.70 + padding, /** @type {?} */ rectX = this._canvas.width
                - (2 * radius + 2 * padding) // buttons
                - rectWidth, /** @type {?} */ rectY = this._canvas.height - rectHeight - padding, /** @type {?} */ textX = rectX + 0.5 * padding, /** @type {?} */ textY = this._canvas.height - 1.5 * padding;
            ctx.globalAlpha = this.config.tooltips.bgAlpha;
            ctx.fillStyle = this.config.tooltips.bgStyle;
            this.drawRoundRectangle(ctx, rectX, rectY, rectWidth, rectHeight, 8, true, false);
            ctx.globalAlpha = this.config.tooltips.textAlpha;
            ctx.fillStyle = this.config.tooltips.textStyle;
            ctx.fillText(this._currentTooltip, textX, textY);
            ctx.restore();
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    drawPaginator(ctx) {
        const /** @type {?} */ padding = this.config.tooltips.padding;
        const /** @type {?} */ radius = this.config.tooltips.radius;
        const /** @type {?} */ labelWidth = 50;
        const /** @type {?} */ x1 = (this._canvas.width - labelWidth) / 2 - radius - padding; // PrevPageButton
        const /** @type {?} */ x2 = this._canvas.width / 2; // Label
        const /** @type {?} */ x3 = (this._canvas.width + labelWidth) / 2 + radius + padding; // NextPageButton
        const /** @type {?} */ y = this._canvas.height - radius - padding;
        const /** @type {?} */ label = this._resource.currentItem + '/' + this._resource.totalItem;
        const /** @type {?} */ fontSize = 25;
        ctx.save();
        this._beforePageButton.draw(ctx, x1, y, radius);
        this._nextPageButton.draw(ctx, x3, y, radius);
        ctx.restore();
        ctx.save();
        ctx.font = fontSize + 'px Verdana';
        ctx.textAlign = 'center';
        ctx.fillText(label, x2, this._canvas.height - padding - fontSize / 2, labelWidth);
        ctx.restore();
    }
    /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?} radius
     * @param {?} fill
     * @param {?} stroke
     * @return {?}
     */
    drawRoundRectangle(ctx, x, y, width, height, radius, fill, stroke) {
        radius = (typeof radius === 'number') ? radius : 5;
        fill = (typeof fill === 'boolean') ? fill : true; // fill = default
        stroke = (typeof stroke === 'boolean') ? stroke : false;
        // draw round rectangle
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        if (fill) {
            ctx.fill();
        }
        if (stroke) {
            ctx.stroke();
        }
    }
    /**
     * @param {?} cfg
     * @return {?}
     */
    extendsDefaultConfig(cfg) {
        const /** @type {?} */ defaultCfg = IMAGEVIEWER_CONFIG_DEFAULT;
        const /** @type {?} */ localCfg = Object.assign({}, defaultCfg, cfg);
        if (cfg.buttonStyle) {
            localCfg.buttonStyle = Object.assign(defaultCfg.buttonStyle, cfg.buttonStyle);
        }
        if (cfg.tooltips) {
            localCfg.tooltips = Object.assign(defaultCfg.tooltips, cfg.tooltips);
        }
        if (cfg.nextPageButton) {
            localCfg.nextPageButton = Object.assign(defaultCfg.nextPageButton, cfg.nextPageButton);
        }
        if (cfg.beforePageButton) {
            localCfg.beforePageButton = Object.assign(defaultCfg.beforePageButton, cfg.beforePageButton);
        }
        if (cfg.zoomOutButton) {
            localCfg.zoomOutButton = Object.assign(defaultCfg.zoomOutButton, cfg.zoomOutButton);
        }
        if (cfg.zoomOutButton) {
            localCfg.zoomOutButton = Object.assign(defaultCfg.zoomOutButton, cfg.zoomOutButton);
        }
        if (cfg.zoomInButton) {
            localCfg.zoomInButton = Object.assign(defaultCfg.zoomInButton, cfg.zoomInButton);
        }
        if (cfg.rotateLeftButton) {
            localCfg.rotateLeftButton = Object.assign(defaultCfg.rotateLeftButton, cfg.rotateLeftButton);
        }
        if (cfg.rotateRightButton) {
            localCfg.rotateRightButton = Object.assign(defaultCfg.rotateRightButton, cfg.rotateRightButton);
        }
        if (cfg.resetButton) {
            localCfg.resetButton = Object.assign(defaultCfg.resetButton, cfg.resetButton);
        }
        return localCfg;
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    screenToCanvasCentre(pos) {
        const /** @type {?} */ rect = this._canvas.getBoundingClientRect();
        return { x: pos.x - rect.left, y: pos.y - rect.top };
    }
    /**
     * @return {?}
     */
    getUIElements() {
        const /** @type {?} */ hoverElements = this._buttons.slice();
        hoverElements.push(this._nextPageButton);
        hoverElements.push(this._beforePageButton);
        return hoverElements;
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    getUIElement(pos) {
        const /** @type {?} */ activeUIElement = this.getUIElements().filter((uiElement) => {
            return uiElement.isWithinBounds(pos.x, pos.y);
        });
        return (activeUIElement.length > 0) ? activeUIElement[0] : null;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    isImage(file) {
        if (this._filetype && this._filetype.toLowerCase() === 'image') {
            return true;
        }
        return testFile(file, '\\.(png|jpg|jpeg|gif)|image/png');
    }
    /**
     * @param {?} file
     * @return {?}
     */
    isPdf(file) {
        if (this._filetype && this._filetype.toLowerCase() === 'pdf') {
            return true;
        }
        return testFile(file, '\\.(pdf)|application/pdf');
    }
}
ImageViewerComponent.ɵfac = function ImageViewerComponent_Factory(t) { return new (t || ImageViewerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ImageCacheService), ɵngcc0.ɵɵdirectiveInject(IMAGEVIEWER_CONFIG)); };
ImageViewerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ImageViewerComponent, selectors: [["ngx-imageviewer"]], viewQuery: function ImageViewerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);
    } }, inputs: { src: "src", filetype: "filetype", width: "width", height: "height" }, decls: 2, vars: 2, consts: [[3, "width", "height", "tap", "pinchin", "pinchout", "panmove", "panend", "rotatemove", "rotateend"], ["imageContainer", ""]], template: function ImageViewerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "canvas", 0, 1);
        ɵngcc0.ɵɵlistener("tap", function ImageViewerComponent_Template_canvas_tap_0_listener($event) { return ctx.onTap($event); })("pinchin", function ImageViewerComponent_Template_canvas_pinchin_0_listener($event) { return ctx.processTouchEvent($event); })("pinchout", function ImageViewerComponent_Template_canvas_pinchout_0_listener($event) { return ctx.processTouchEvent($event); })("panmove", function ImageViewerComponent_Template_canvas_panmove_0_listener($event) { return ctx.processTouchEvent($event); })("panend", function ImageViewerComponent_Template_canvas_panend_0_listener() { return ctx.onTouchEnd(); })("rotatemove", function ImageViewerComponent_Template_canvas_rotatemove_0_listener($event) { return ctx.processTouchEvent($event); })("rotateend", function ImageViewerComponent_Template_canvas_rotateend_0_listener() { return ctx.onTouchEnd(); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("width", ctx.width)("height", ctx.height);
    } }, styles: ["[_nghost-%COMP%] { display: block }\n    [_nghost-%COMP%]   canvas[_ngcontent-%COMP%] { margin: 0 auto; display: block }\n    [hidden][_ngcontent-%COMP%] { display: none !important }"] });
//#endregion
/** @nocollapse */
ImageViewerComponent.ctorParameters = () => [
    { type: DomSanitizer, },
    { type: Renderer2, },
    { type: ImageCacheService, },
    { type: ImageViewerConfig, decorators: [{ type: Inject, args: [IMAGEVIEWER_CONFIG,] },] },
];
ImageViewerComponent.propDecorators = {
    "src": [{ type: Input, args: ['src',] },],
    "filetype": [{ type: Input, args: ['filetype',] },],
    "width": [{ type: Input, args: ['width',] },],
    "height": [{ type: Input, args: ['height',] },],
    "canvasRef": [{ type: ViewChild, args: ['imageContainer',] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageViewerComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-imageviewer',
                template: `
    <canvas #imageContainer [width]="width" [height]="height"
      (tap)="onTap($event)" (pinchin)="processTouchEvent($event)" (pinchout)="processTouchEvent($event)"
      (panmove)="processTouchEvent($event)" (panend)="onTouchEnd()" (rotatemove)="processTouchEvent($event)"
        (rotateend)="onTouchEnd()">
    </canvas>
  `,
                styles: [`
    :host { display: block }
    :host canvas { margin: 0 auto; display: block }
    [hidden] { display: none !important }
  `]
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }, { type: ɵngcc0.Renderer2 }, { type: ImageCacheService }, { type: ImageViewerConfig, decorators: [{
                type: Inject,
                args: [IMAGEVIEWER_CONFIG]
            }] }]; }, { src: [{
            type: Input,
            args: ['src']
        }], filetype: [{
            type: Input,
            args: ['filetype']
        }], width: [{
            type: Input,
            args: ['width']
        }], height: [{
            type: Input,
            args: ['height']
        }], canvasRef: [{
            type: ViewChild,
            args: ['imageContainer']
        }] }); })();
/**
 * @param {?} file
 * @param {?} regexTest
 * @return {?}
 */
function testFile(file, regexTest) {
    if (!file) {
        return false;
    }
    const /** @type {?} */ name = file instanceof File ? file.name : file;
    return name.toLowerCase().match(regexTest) !== null;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const ɵ0 = IMAGEVIEWER_CONFIG_DEFAULT;
class ImageViewerModule {
}
ImageViewerModule.ɵfac = function ImageViewerModule_Factory(t) { return new (t || ImageViewerModule)(); };
ImageViewerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ImageViewerModule });
ImageViewerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: IMAGEVIEWER_CONFIG, useValue: ɵ0 }] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageViewerModule, [{
        type: NgModule,
        args: [{
                providers: [{ provide: IMAGEVIEWER_CONFIG, useValue: ɵ0 }],
                declarations: [ImageViewerComponent],
                exports: [ImageViewerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImageViewerModule, { declarations: [ImageViewerComponent], exports: [ImageViewerComponent] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ImageViewerModule, ImageViewerConfig, createButtonConfig, IMAGEVIEWER_CONFIG, ImageCacheService as ɵc, ImageViewerComponent as ɵb, IMAGEVIEWER_CONFIG_DEFAULT as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFsbHlzb25oLW5neC1pbWFnZXZpZXdlci5qcyIsInNvdXJjZXMiOlsiQGhhbGx5c29uaC9uZ3gtaW1hZ2V2aWV3ZXIvbGliL2ltYWdldmlld2VyLmNvbmZpZy50cyIsIkBoYWxseXNvbmgvbmd4LWltYWdldmlld2VyL2xpYi9pbWFnZXZpZXdlci5tb2RlbC50cyIsIkBoYWxseXNvbmgvbmd4LWltYWdldmlld2VyL2xpYi9pbWFnZS5sb2FkZXIudHMiLCJAaGFsbHlzb25oL25neC1pbWFnZXZpZXdlci9saWIvaW1hZ2VjYWNoZS5zZXJ2aWNlLnRzIiwiQGhhbGx5c29uaC9uZ3gtaW1hZ2V2aWV3ZXIvbGliL3BkZi5sb2FkZXIudHMiLCJAaGFsbHlzb25oL25neC1pbWFnZXZpZXdlci9saWIvaW1hZ2V2aWV3ZXIuY29tcG9uZW50LnRzIiwiQGhhbGx5c29uaC9uZ3gtaW1hZ2V2aWV3ZXIvbGliL2ltYWdldmlld2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUEyQixDQTBCMUI7QUFDRDtBQUNHO0FBQXFCO0FBQ1I7QUFDTDtBQUNFO0FBQ1I7QUFhTCw0QkFBbUMsSUFBYSxFQUFFLE9BQWdCLEVBQUUsU0FBaUIsQ0FBQyxFQUFFLE9BQWdCLElBQUk7QUFDNUcsSUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3RFLENBQUM7QUFFRCx1QkFBYSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBb0Isb0JBQW9CLENBQUMsQ0FBQztBQUU5RixxQkFBVywwQkFBMEIsR0FBc0I7QUFDM0QsSUFBRSxLQUFLLEVBQUUsR0FBRztBQUFHO0FBQ1YsSUFBSCxNQUFNLEVBQUUsR0FBRztBQUFHO0FBQ1gsSUFBSCxPQUFPLEVBQUUsU0FBUztBQUFHO0FBQ2xCLElBQUgsU0FBUyxFQUFFLEdBQUc7QUFBRztBQUNkLElBQUgsYUFBYSxFQUFFLEtBQUs7QUFDdEIsSUFBRSxjQUFjLEVBQUUsWUFBWTtBQUM5QixJQUFFLFdBQVcsRUFBRTtBQUNmLFFBQUksY0FBYyxFQUFFLGdCQUFnQjtBQUFHO0FBQzlCLFFBQUwsS0FBSyxFQUFFLEdBQUc7QUFBRztBQUNSLFFBQUwsVUFBVSxFQUFFLEdBQUc7QUFBRztBQUNiLFFBQUwsT0FBTyxFQUFFLFNBQVM7QUFBRztBQUNoQixRQUFMLFNBQVMsRUFBRSxTQUFTO0FBQUc7QUFDbEIsUUFBTCxXQUFXLEVBQUUsU0FBUztBQUFHO0FBQ3BCLFFBQUwsV0FBVyxFQUFFLENBQUM7QUFDbEIsS0FBRztBQUNILElBQUUsUUFBUSxFQUFFO0FBQ1osUUFBSSxPQUFPLEVBQUUsSUFBSTtBQUFHO0FBQ1gsUUFBTCxPQUFPLEVBQUUsU0FBUztBQUFHO0FBQ2hCLFFBQUwsT0FBTyxFQUFFLEdBQUc7QUFBRztBQUNWLFFBQUwsU0FBUyxFQUFFLFNBQVM7QUFBRztBQUNsQixRQUFMLFNBQVMsRUFBRSxHQUFHO0FBQUc7QUFDWixRQUFMLE9BQU8sRUFBRSxFQUFFO0FBQUc7QUFDVCxRQUFMLE1BQU0sRUFBRSxFQUFFO0FBQ2QsS0FBRztBQUNILElBQUUsY0FBYyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNqRixJQUFFLGdCQUFnQixFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUN2RixJQUFFLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDL0UsSUFBRSxZQUFZLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLElBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0FBQ3JGLElBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZGLElBQUUsV0FBVyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUMxRSxDQUFDO0FBQUU7QUFDSDtBQUFLO0FBQW1DO0FBQTBDO0FDbkZsRjtBQUFnQjtBQUFTO0FBRXJCO0FBQ0U7QUFBUyxJQWtCYixZQUNFLE1BQW9CLEVBQ1o7QUFBVSxRQUFWLFVBQUssR0FBTCxLQUFLO0FBQUc7QUFFVCxzQkFyQkEsQ0FBQztBQUNaO0FBRUsscUJBR2dDLEtBQUs7QUFDMUM7QUFFSSx1QkFBUSxJQUFJO0FBQ2hCLDRCQUV5QixJQUFJO0FBQzdCLDBCQUF1QixDQUFDO0FBQ3hCLFFBT0ksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2hDLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQy9CLFFBQUksSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzVCLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ2xDLEtBQUc7QUFDSDtBQUFTO0FBRUs7QUFDQTtBQUNWLElBQUYsT0FBTyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUU7QUFDOUQ7QUFDTztBQUNEO0FBQW9CO0FBQVMsSUFBakMsV0FBVyxDQUFDLEdBQUcsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFO0FBQ3BDO0FBQVM7QUFFSztBQUNKO0FBQ1I7QUFBMEI7QUFDckI7QUFBUyxJQUZkLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNO0FBQ3hCLFFBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3ZDLFFBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDN0I7QUFFRSxRQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNmO0FBRUUsUUFBRSx1QkFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ25GLFFBQUksR0FBRyxDQUFDLFdBQVcsR0FBRyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUMzRSxRQUFJLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDdkMsUUFBSSxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztBQUN0QjtBQUVFLFFBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3BCLFFBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQyxRQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNwQixRQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNmLFFBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUU7QUFDcEMsWUFBTSxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQzdDLFlBQU0sR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUMvQyxZQUFNLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNuQixTQUFLO0FBQ0w7QUFFRSxRQUFFLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDNUIsWUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDakI7QUFDTSxZQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0MsWUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDcEIsU0FBSztBQUNMO0FBRUUsUUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbEIsS0FBRztBQUNIO0FBQ087QUFBdUI7QUFDNUI7QUFDSztBQUF3QjtBQUFvQjtBQUNqRCxJQUhRLFlBQVksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJO0FBQ2xEO0FBQ0ksUUFBQSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFDeEQsUUFBSSxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ3pDO0FBRUUsUUFBRSx1QkFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEQsUUFBSSx1QkFBTSxDQUFDLEdBQUcsT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQzNDLFFBQUksdUJBQU0sQ0FBQyxHQUFHLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDO0FBRUUsUUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDO0FBQ0U7QUFBUztBQUVHO0FBQ0U7QUFDTjtBQUFTLElBRGpCLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNyQixRQUFJLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLEVBQUU7QUFBRyxZQUFELE9BQU8sS0FBSyxDQUFDO0FBQUUsU0FBQTtBQUNyRCxRQUFJLHVCQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxtQkFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN6RixRQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUNsRSxLQUFHO0FBQ0gsQ0FDQztBQUNEO0FBQ0c7QUFBYztBQWFqQjtBQUF3QjtBQUNuQix3QkFFeUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN4Rix3QkFBb0IsQ0FBQztBQUNyQix3QkFBb0IsQ0FBQztBQUNyQiwyQkFBdUIsQ0FBQztBQUN4Qix5QkFBcUIsQ0FBQztBQUN0QixpQ0FBNkIsS0FBSztBQUNsQyxzQkFBa0IsS0FBSztBQUN2Qix1QkFBbUIsS0FBSztBQUN4Qix5QkFBcUIsS0FBSztBQUMxQiw4QkFFNkIsSUFBSSxPQUFPLEVBQVU7QUFDbEQ7QUFDSztBQUFTO0FBQ1E7QUFFVjtBQUFTLElBQVosYUFBYSxDQUFDLFNBQW9CO0FBQUssUUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFBRyxZQUFELE9BQU87QUFBRSxTQUFBO0FBQy9DLFFBQ0ksdUJBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ2hFLFFBQUksdUJBQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1RCxRQUFJLHVCQUFNLE1BQU0sR0FBRztBQUNuQixZQUFNLEtBQUssRUFBRSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNO0FBQzNELFlBQU0sTUFBTSxFQUFFLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUs7QUFDNUQsU0FBSyxDQUFDO0FBQ04sUUFDSSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUU7QUFDcEYsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQy9ELFNBQUs7QUFBRSxhQUFJO0FBQ1gsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzdELFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDNUM7QUFFRSxRQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQ2xFLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDcEUsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQ2xFLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztBQUNwRTtBQUVBO0FBQVM7QUFBdUI7QUFBMEI7QUFDcEQ7QUFDTztBQUFvQjtBQUFTLElBRmpDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBeUIsRUFBRSxTQUFvQixFQUFFLFFBQVE7QUFDNUU7QUFDSSxRQUFBLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzRDtBQUVFLFFBQUUsR0FBRyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ25DLFFBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFEO0FBRUUsUUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3RDLFlBQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0csWUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDekQsWUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsWUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNsRixTQUFLO0FBQUUsYUFBSTtBQUNYLFlBQU0sR0FBRyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7QUFDN0IsWUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUNoQyxZQUFNLEdBQUcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0FBQy9CLFlBQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLFlBQVksRUFBRSxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JHLFNBQUs7QUFDTCxRQUNJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3JDO0FBRUE7QUFBUztBQUFvQjtBQUFTLElBQTdCLGdCQUFnQixLQUFLLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN4RSxDQUFDO0FBQ0Q7QUFDRztBQUFxQjtBQUFnQjtBQUF4Qyx1QkFBOEIsS0FBYTtBQUMzQyxJQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNyRixDQUFDO0FBQUM7QUFDRjtBQUFLO0FBQW1DO0FBQTBDO0FDN0xsRix5QkFHaUMsU0FBUSxjQUFjO0FBQ3ZEO0FBQ087QUFDTztBQUFTLElBRHJCLEtBQUs7QUFDUCxRQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN4QixLQUFHO0FBQ0g7QUFDTztBQUNBO0FBQVMsSUFEZCxZQUFZO0FBQ2QsUUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUN4QixRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUM5QixRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRztBQUM3QyxZQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLFlBQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDM0IsWUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pDLFNBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNkLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUMvQixLQUFHO0FBQ0gsQ0FBQztBQUFDO0FBQ0Y7QUFBSztBQUFtQztBQUEwQztBQ3BCbEY7QUFBMkIsSUFhekI7QUFBaUIsc0JBRlksRUFBRTtBQUNqQyxLQUNrQjtBQUNsQjtBQUNPO0FBQW9CO0FBQ3BCLElBREwsSUFBSSxLQUFLO0FBQU0sUUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsS0FBRztBQUNIO0FBQ087QUFBdUI7QUFDakI7QUFBb0I7QUFBUyxJQUR4QyxRQUFRLENBQUMsR0FBVyxFQUFFLElBQVk7QUFDcEMsUUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQ2xFLEtBQUc7QUFDSDtBQUNPO0FBQXVCO0FBQ2pCO0FBQW9CO0FBQ2hDLElBRkMsUUFBUSxDQUFDLEdBQVcsRUFBRSxJQUFZO0FBQ3BDLFFBQUksdUJBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDOUIsS0FBRztBQUNIO0FBQ087QUFBdUI7QUFDOUI7QUFBeUI7QUFDekI7QUFBUyxJQUZQLFNBQVMsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEtBQVU7QUFDakQsUUFBSSx1QkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0MsUUFBSSxJQUFJLEtBQUssRUFBRTtBQUNmLFlBQU0sS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDMUIsU0FBSztBQUFFLGFBQUk7QUFDWCxZQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLFNBQUs7QUFDTCxLQUFHO0FBQ0g7QUFDTztBQUNBO0FBQVMsSUFEZCxZQUFZO0FBQ2QsUUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNyQixLQUFHO0FBQ0g7K0NBakNDLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7cUpBQzVCO0FBQUU7QUFBb0I7QUFJNUI7Ozs7Z0RBVU07QUFBQztBQUFDO0FBQUs7QUFDTjtBQUNDO0FDekJSLHVCQVErQixTQUFRLGNBQWM7QUFDckQ7QUFBUztBQUNKO0FBQVMsSUFHWixZQUFvQixXQUE4QjtBQUNwRCxRQUFJLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFGc0IsZ0JBQVcsR0FBWCxXQUFXLENBQW1CO0FBQUUsUUFFbEQsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksUUFBUSxJQUFJLE1BQU0sRUFBRTtBQUM3RCxZQUFNLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUU7QUFDL0YsZ0JBQVEsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUM7QUFDN0QsYUFBTztBQUNQLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7QUFDbEMsS0FBRztBQUNIO0FBQ087QUFDTztBQUNiLElBRkMsS0FBSztBQUNQLFFBQUksdUJBQU0sRUFBRSxHQUFHLElBQUksQ0FBQztBQUNwQixRQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUU7QUFBRyxZQUFELE9BQU87QUFBRSxTQUFBO0FBQzFDLFFBQUksdUJBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELFFBQUksRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDdEIsUUFBSSxFQUFFLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUN2QixRQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFxQjtBQUMzQyxZQUFNLEVBQUUsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLFlBQU0sRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ2xDLFlBQU0sRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDdkIsWUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDeEIsU0FBSyxFQUFFLENBQUMsTUFBYztBQUN0QixZQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsU0FBSyxDQUFDLENBQUM7QUFDUCxLQUFHO0FBQ0g7QUFDTztBQUNBO0FBQVMsSUFEZCxZQUFZO0FBQ2QsUUFBSSx1QkFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLFFBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7QUFDcEIsWUFBTSxFQUFFLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztBQUMvQixZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUN0QixRQUFJLHVCQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ3ZCLFFBQUksdUJBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7QUFDaEMsUUFDSSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPO0FBQ3ZDLFlBQU0sRUFBRSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDekIsWUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDOUIsZ0JBQVEsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDekIsZ0JBQVEsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDM0IsZ0JBQVEsSUFBSSxFQUFFLENBQUMsY0FBYyxFQUFFO0FBQy9CLG9CQUFVLEVBQUUsQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQ3BDLG9CQUFVLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixpQkFBUztBQUFFLHFCQUFJO0FBQ2Ysb0JBQVUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQyxpQkFBUztBQUNULGFBQU8sQ0FBQyxDQUFDO0FBQ1QsU0FBSyxDQUFDLENBQUM7QUFDUCxLQUFHO0FBQ0g7QUFDTztBQUF1QjtBQUF3QjtBQUM1QztBQUNGO0FBQVMsSUFGUCxTQUFTLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxRQUFvQjtBQUNuRSxRQUFJLHVCQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDcEIsUUFBSSx1QkFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hELFFBQUksSUFBSSxRQUFRLEVBQUU7QUFDbEIsWUFBTSxFQUFFLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztBQUMzQixZQUFNLFFBQVEsRUFBRSxDQUFDO0FBQ2pCLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUNJLHVCQUFNLE1BQU0sR0FBc0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2RSxRQUFJLHVCQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDLFFBQUksdUJBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNDLFFBQ0ksTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2hDLFFBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2xDLFFBQ0ksdUJBQU0sYUFBYSxHQUFHO0FBQzFCLFlBQU0sYUFBYSxFQUFFLE9BQU87QUFDNUIsWUFBTSxRQUFRLEVBQUUsTUFBTTtBQUN0QixTQUFLLENBQUM7QUFDTixRQUFJLHVCQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0RCxRQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDcEIsWUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUk7QUFDeEIsZ0JBQVEsdUJBQU0sR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7QUFDaEMsZ0JBQVEsR0FBRyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7QUFDOUIsZ0JBQVEsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDLGdCQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDakQsZ0JBQVEsRUFBRSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDeEIsYUFBTyxDQUFDLENBQUM7QUFDVCxTQUFLLENBQUMsQ0FBQztBQUNQO0FBQ0UsQ0FBRDtBQUFDO0FBQ0Y7QUFBSztBQUFtQztBQUEwQztBQ3RGbEYsdUJBQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFDO0FBaUJwQztBQUE4QjtBQUFTO0FBQThCO0FBRTlDO0FBQ0M7QUFDTjtBQUFTLElBNkV6QixZQUNVLFlBQ0EsV0FDQSxhQUM0QjtBQUFXLFFBSHZDLGVBQVUsR0FBVixVQUFVO0FBQUcsUUFDYixjQUFTLEdBQVQsU0FBUztBQUFHLFFBQ1osZ0JBQVcsR0FBWCxXQUFXO0FBQUcsUUFDYyxXQUFNLEdBQU4sTUFBTTtBQUFHLHNCQXRDOUIsSUFBSTtBQUN2Qix3QkFXcUIsRUFBRTtBQUN2QiwrQkFFNEIsSUFBSTtBQUNoQyxnQ0FFa0MsRUFBRTtBQUNwQyxrQ0FFK0IsRUFBRTtBQUNqQyxRQWtCSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwRCxRQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzRixRQUFJLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDL0YsUUFBSSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekYsUUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkYsUUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQy9GLFFBQUksSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNqRyxRQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNyRixRQUFJLElBQUksQ0FBQyxRQUFRLEdBQUc7QUFDcEIsWUFBTSxJQUFJLENBQUMsY0FBYztBQUN6QixZQUFNLElBQUksQ0FBQyxhQUFhO0FBQ3hCLFlBQU0sSUFBSSxDQUFDLGlCQUFpQjtBQUM1QixZQUFNLElBQUksQ0FBQyxrQkFBa0I7QUFDN0IsWUFBTSxJQUFJLENBQUMsWUFBWTtBQUN2QixTQUFLLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ2xDLGFBQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQyxLQUFHO0FBQ0g7QUFDTztBQUNIO0FBQVMsSUF0R1gsSUFBSSxHQUFHLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDakM7QUFBUztBQUNUO0FBQW9CO0FBQVMsUUFEVCxHQUFHLENBQUMsS0FBSztBQUM3QixRQUFJLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFBRyxZQUFELE9BQU87QUFBRSxTQUFBO0FBQ3hDLFFBQUksSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7QUFDdEIsUUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekI7QUFFQTtBQUFTO0FBQW9CO0FBQ3RCLElBQ0wsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDM0M7QUFBUztBQUF5QjtBQUNoQztBQUFTLFFBRGMsUUFBUSxDQUFDLEtBQWE7QUFDL0MsUUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQUcsWUFBRCxPQUFPO0FBQUUsU0FBQTtBQUM3QyxRQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFFBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCO0FBRUE7QUFBUztBQUNQO0FBQVMsSUFBVCxJQUFJLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUNyQztBQUFTO0FBQXlCO0FBQ2xCO0FBQVMsUUFESCxLQUFLLENBQUMsS0FBSztBQUNqQyxRQUFJLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFBRyxZQUFELE9BQU87QUFBRSxTQUFBO0FBQzFDLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFBRyxZQUFELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFBRSxTQUFBO0FBQzNELFFBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3RCO0FBRUE7QUFBUztBQUNSO0FBQVMsSUFBUixJQUFJLE1BQU0sS0FBSyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN2QztBQUFTO0FBQXlCO0FBQ3BCO0FBQVMsUUFEQSxNQUFNLENBQUMsS0FBSztBQUNuQyxRQUFJLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFBRyxZQUFELE9BQU87QUFBRSxTQUFBO0FBQzNDLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDekIsUUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFBRyxZQUFELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFBRSxTQUFBO0FBQzdELFFBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3RCO0FBRUE7QUFBUztBQUFvQjtBQUFTLElBbUVwQyxlQUFlO0FBQ2pCLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztBQUNoRCxRQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQ7QUFFRSxRQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDekQsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQzVEO0FBRUUsUUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDL0UsUUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxPQUFPLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNyRixRQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUM3RSxRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUMzRSxRQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ25GLFFBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDckYsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUU7QUFFRSxRQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdCLFFBQ0ksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3hCLEtBQUc7QUFDSDtBQUNPO0FBQ0M7QUFBUyxJQURmLFdBQVc7QUFDYjtBQUNJLFFBQUEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxhQUFhO0FBQ2pELFlBQU0sSUFBSSxPQUFPLGFBQWEsS0FBSyxVQUFVLEVBQUU7QUFDL0MsZ0JBQVEsYUFBYSxFQUFFLENBQUM7QUFDeEIsYUFBTztBQUNQLFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3BDLEtBQUc7QUFDSDtBQUNPO0FBQ0Q7QUFBUyxJQURiLGFBQWE7QUFDZixRQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsWUFBWSxtQkFBbUIsQ0FBQyxDQUFDLEVBQUU7QUFDekcsWUFBTSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtBQUNuQyxnQkFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDOUMsYUFBTztBQUNQLFlBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7QUFDaEMsZ0JBQVEsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7QUFDeEQsYUFBTztBQUNQLFlBQU0sSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBQzNDLFNBQUs7QUFBRSxhQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsWUFBWSxpQkFBaUIsQ0FBQyxDQUFDLEVBQUU7QUFDNUcsWUFBTSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtBQUNuQyxnQkFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDOUMsYUFBTztBQUNQLFlBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDOUIsZ0JBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwRSxhQUFPO0FBQ1AsWUFBTSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDekMsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3hCLFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsWUFBWSxJQUFJLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUMvRixZQUFNLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxDQUFDO0FBQzVFLGdCQUFRLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixnQkFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLFlBQVksSUFBSSxFQUFFO0FBQ3RDLG9CQUFVLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsRCxpQkFBUztBQUNULGFBQU8sQ0FBQyxDQUFDO0FBQ1QsWUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzdCLFlBQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3hCLFlBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQUcsZ0JBQUQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQUUsYUFBQTtBQUNqRCxTQUFLO0FBQ0wsS0FBRztBQUNIO0FBQVM7QUFFSztBQUNOO0FBQ1AsSUFEQyxLQUFLLENBQUMsR0FBRztBQUNYLFFBQUksdUJBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ25GLFFBQUksSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO0FBQUcsWUFBRCxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQUUsU0FBQTtBQUMvRCxLQUFHO0FBQ0g7QUFDTztBQUNFO0FBQVMsSUFEaEIsVUFBVTtBQUNaLFFBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDL0MsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUM1QyxRQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQzdDLEtBQUc7QUFDSDtBQUNPO0FBQ0w7QUFDQTtBQUFTLElBRlQsaUJBQWlCLENBQUMsR0FBRztBQUN2QjtBQUNJLFFBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUU7QUFBRyxZQUFELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUFFLFNBQUE7QUFDekgsUUFDSSx1QkFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDN0MsUUFBSSxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDL0QsUUFBSSxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDL0Q7QUFFRSxRQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFO0FBQUcsWUFBRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUFFLFNBQUE7QUFDdEcsUUFBSSx1QkFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQzdELFFBQUksUUFBUSxDQUFDLEtBQUssR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRO0FBQ2pGLFlBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5RTtBQUVFLFFBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7QUFBRyxZQUFELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQUUsU0FBQTtBQUNySSxRQUFJLElBQUksR0FBRyxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUU7QUFDNUIsWUFBTSx1QkFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUN2SCxZQUFNLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUN6RixTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUN2QixLQUFHO0FBQ0g7QUFBUztBQUVFO0FBQVMsSUFDVixpQkFBaUI7QUFDM0I7QUFDSSxRQUFBLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6SCxRQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckg7QUFFRSxRQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyxHQUFHLEtBQ2hGLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FDM0YsQ0FBQyxDQUFDO0FBQ1A7QUFFQTtBQUFTO0FBQ1I7QUFBb0I7QUFBUyxJQURwQixZQUFZLENBQUMsR0FBRztBQUMxQixRQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFBRyxZQUFELEdBQUcsR0FBRyxLQUFLLENBQUM7QUFBRSxTQUFBO0FBQzlCLFFBQUksR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3pCLFFBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxHQUFHLENBQUMsRUFBRTtBQUFHO0FBQ3BDLFlBQVAsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLFNBQUs7QUFBRSxhQUFJO0FBQUc7QUFDRCxZQUFQLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQixTQUFLO0FBQ0w7QUFFQTtBQUFTO0FBQXVCO0FBQW9CO0FBQVMsSUFBbkQsc0JBQXNCLENBQUMsR0FBNkI7QUFDOUQsUUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELFFBQUksdUJBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsUUFBSSx1QkFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUM1QyxRQUFJLElBQUksYUFBYSxLQUFLLElBQUksRUFBRTtBQUNoQyxZQUFNLElBQUksT0FBTyxhQUFhLENBQUMsS0FBSyxLQUFLLFdBQVcsRUFBRTtBQUN0RCxnQkFBUSxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNuQyxhQUFPO0FBQ1AsWUFBTSxJQUFJLE9BQU8sYUFBYSxDQUFDLE9BQU8sS0FBSyxXQUFXLEVBQUU7QUFDeEQsZ0JBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO0FBQ3JELGFBQU87QUFDUCxTQUFLO0FBQ0wsUUFBSSxJQUFJLFVBQVUsS0FBSyxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQUcsWUFBRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUFFLFNBQUE7QUFDcEU7QUFDRTtBQUFTO0FBRUU7QUFBUyxJQUVaLFFBQVE7QUFDbEIsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUFHLFlBQUQsT0FBTztBQUFFLFNBQUE7QUFDcEMsUUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFO0FBQUcsWUFBRCxPQUFPO0FBQUUsU0FBQTtBQUMzRSxRQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUFFO0FBQUcsWUFBRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFBRSxTQUFBO0FBQzNFLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqQyxRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDbEMsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUN2QjtBQUVBO0FBQVM7QUFDUjtBQUFTLElBREEsWUFBWTtBQUN0QixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQUcsWUFBRCxPQUFPO0FBQUUsU0FBQTtBQUNwQyxRQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLElBQUksQ0FBQyxFQUFFO0FBQUcsWUFBRCxPQUFPO0FBQUUsU0FBQTtBQUNwRCxRQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUU7QUFBRyxZQUFELElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztBQUFFLFNBQUE7QUFDN0gsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsQyxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCO0FBRUE7QUFBUztBQUNGO0FBQVMsSUFETixNQUFNO0FBQ2hCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFBRyxZQUFELE9BQU87QUFBRSxTQUFBO0FBQ3BDLFFBQUksdUJBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqRixRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQzVHLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDdkI7QUFFQTtBQUFTO0FBQ0g7QUFBUyxJQURMLE9BQU87QUFDakIsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUFHLFlBQUQsT0FBTztBQUFFLFNBQUE7QUFDcEMsUUFBSSx1QkFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pGLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDNUcsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUN2QjtBQUVBO0FBQVM7QUFDTjtBQUFTLElBREYsVUFBVTtBQUNwQixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQUcsWUFBRCxPQUFPO0FBQUUsU0FBQTtBQUNwQyxRQUFJLHVCQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUM3QyxRQUFJLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQy9FLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDdkI7QUFFQTtBQUFTO0FBQ1A7QUFBUyxJQURELFdBQVc7QUFDckIsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUFHLFlBQUQsT0FBTztBQUFFLFNBQUE7QUFDcEMsUUFBSSx1QkFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDN0MsUUFBSSxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUMvRSxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCO0FBRUE7QUFBUztBQUNOO0FBQVMsSUFERixVQUFVO0FBQ3BCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFBRyxZQUFELE9BQU87QUFBRSxTQUFBO0FBQ3BDLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9DLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDdkI7QUFDRTtBQUFTO0FBRUU7QUFBUyxJQUNaLFlBQVk7QUFDdEIsUUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDdEI7QUFFRSxRQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNsQjtBQUVBO0FBQVM7QUFDRjtBQUFTLElBRE4sTUFBTTtBQUNoQixRQUFJLHVCQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDcEI7QUFDSSxRQUFBLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3ZDLFlBQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDMUIsWUFDTSx1QkFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNoQyxZQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNqQixZQUNNLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDMUQsZ0JBQVEsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3RCLGdCQUNRLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7QUFDakM7QUFDVSxvQkFBQSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDO0FBRVEsb0JBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFO0FBQ2hELHdCQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMscUJBQVc7QUFDWCxpQkFBUztBQUNULGFBQU8sQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLFFBQUkscUJBQXFCLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUMvQztBQUVBO0FBQVM7QUFDUDtBQUFvQjtBQUFTLElBRHJCLFdBQVcsQ0FBQyxHQUFHO0FBQ3pCLFFBQUksdUJBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztBQUNqRCxRQUFJLHVCQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDL0MsUUFBSSx1QkFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDckMsUUFBSSx1QkFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUNwRCxRQUFJLHVCQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQ3JEO0FBRUUsUUFBRSxLQUFLLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ25ELFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN6RCxTQUFLO0FBQ0w7QUFFRSxRQUFFLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsdUJBQXVCLEVBQUU7QUFDdkYsWUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDakIsWUFBTSx1QkFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQzlCLFlBQU0sR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsZUFBZSxDQUFDO0FBQzVDO0FBRUksWUFBRSx1QkFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxtQkFDeEQsU0FBUyxHQUFHLFFBQVEsR0FBRyxPQUFPLG1CQUM5QixVQUFVLEdBQUcsUUFBUSxHQUFHLElBQUksR0FBRyxPQUFPLG1CQUN0QyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLO0FBQ3BDLG1CQUFhLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUN0QyxrQkFBWSxTQUFTLG1CQUNYLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsT0FBTyxtQkFDbEQsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsT0FBTyxtQkFDN0IsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUM7QUFDdEQsWUFDTSxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztBQUNyRCxZQUFNLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0FBQ25ELFlBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN4RixZQUNNLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBQ3ZELFlBQU0sR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFDckQsWUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELFlBQ00sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3BCLFNBQUs7QUFDTDtBQUVBO0FBQVM7QUFDVDtBQUFvQjtBQUFTLElBRG5CLGFBQWEsQ0FBQyxHQUFHO0FBQzNCLFFBQUksdUJBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztBQUNqRCxRQUFJLHVCQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDL0MsUUFBSSx1QkFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQzFCLFFBQUksdUJBQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsVUFBVSxJQUFJLENBQUMsR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQ3hFLFFBQUksdUJBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUN0QyxRQUFJLHVCQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLFVBQVUsSUFBSSxDQUFDLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN4RSxRQUFJLHVCQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQ3JELFFBQUksdUJBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUM5RSxRQUFJLHVCQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDeEIsUUFDSSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDZixRQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEQsUUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRCxRQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNsQixRQUNJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNmLFFBQUksR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsWUFBWSxDQUFDO0FBQ3ZDLFFBQUksR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7QUFDN0IsUUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxHQUFHLFFBQVEsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDdEYsUUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbEI7QUFFQTtBQUFTO0FBQXVCO0FBQXFCO0FBQXFCO0FBQ3ZEO0FBQTBCO0FBQy9CO0FBQXdCO0FBQTBCO0FBQ3JEO0FBQVMsSUFIVixrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTTtBQUMzRSxRQUFJLE1BQU0sR0FBRyxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELFFBQUksSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDckQsUUFBSSxNQUFNLEdBQUcsQ0FBQyxPQUFPLE1BQU0sS0FBSyxTQUFTLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUM1RDtBQUVFLFFBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3BCLFFBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlCLFFBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0QyxRQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztBQUM5RCxRQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQy9DLFFBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFDaEYsUUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ2hFLFFBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLFFBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QyxRQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNwQixRQUNJLElBQUksSUFBSSxFQUFFO0FBQUcsWUFBRCxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFBRSxTQUFBO0FBQzdCLFFBQUksSUFBSSxNQUFNLEVBQUU7QUFBRyxZQUFELEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUFFLFNBQUE7QUFDakM7QUFFQTtBQUFTO0FBRUs7QUFFRDtBQUFTLElBQVosb0JBQW9CLENBQUMsR0FBc0I7QUFDckQsUUFBSSx1QkFBTSxVQUFVLEdBQUcsMEJBQTBCLENBQUM7QUFDbEQsUUFBSSx1QkFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3hELFFBQUksSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFO0FBQUcsWUFBRCxRQUFRLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFBRSxTQUFBO0FBQzNHLFFBQUksSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO0FBQUcsWUFBRCxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFBRSxTQUFBO0FBQy9GLFFBQUksSUFBSSxHQUFHLENBQUMsY0FBYyxFQUFFO0FBQUcsWUFBRCxRQUFRLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFBRSxTQUFBO0FBQ3ZILFFBQUksSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7QUFBRyxZQUFELFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUFFLFNBQUE7QUFDL0gsUUFBSSxJQUFJLEdBQUcsQ0FBQyxhQUFhLEVBQUU7QUFBRyxZQUFELFFBQVEsQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUFFLFNBQUE7QUFDbkgsUUFBSSxJQUFJLEdBQUcsQ0FBQyxhQUFhLEVBQUU7QUFBRyxZQUFELFFBQVEsQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUFFLFNBQUE7QUFDbkgsUUFBSSxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUU7QUFBRyxZQUFELFFBQVEsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUFFLFNBQUE7QUFDL0csUUFBSSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtBQUFHLFlBQUQsUUFBUSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQUUsU0FBQTtBQUMvSCxRQUFJLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFO0FBQUcsWUFBRCxRQUFRLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFBRSxTQUFBO0FBQ25JLFFBQUksSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFO0FBQUcsWUFBRCxRQUFRLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFBRSxTQUFBO0FBQzNHLFFBQUksT0FBTyxRQUFRLENBQUM7QUFDcEI7QUFFQTtBQUFTO0FBQXVCO0FBQW9CO0FBQVMsSUFBbkQsb0JBQW9CLENBQUMsR0FBNkI7QUFDNUQsUUFBSSx1QkFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3RELFFBQUksT0FBTyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3pEO0FBRUE7QUFBUztBQUFvQjtBQUFTLElBQTVCLGFBQWE7QUFBTSxRQUN6Qix1QkFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNoRCxRQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdDLFFBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMvQyxRQUFJLE9BQU8sYUFBYSxDQUFDO0FBQ3pCO0FBRUE7QUFBUztBQUF1QjtBQUFvQjtBQUNoRCxJQURNLFlBQVksQ0FBQyxHQUE2QjtBQUNwRCxRQUFJLHVCQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUztBQUNsRSxZQUFNLE9BQU8sU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRCxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDcEU7QUFFQTtBQUFTO0FBQXdCO0FBQ3RCO0FBQVMsSUFEVixPQUFPLENBQUMsSUFBbUI7QUFDckMsUUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLEVBQUU7QUFBRyxZQUFELE9BQU8sSUFBSSxDQUFDO0FBQUUsU0FBQTtBQUNwRixRQUFJLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO0FBQzdEO0FBRUE7QUFBUztBQUF3QjtBQUNwQjtBQUFTLElBRFosS0FBSyxDQUFDLElBQW1CO0FBQ25DLFFBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxFQUFFO0FBQUcsWUFBRCxPQUFPLElBQUksQ0FBQztBQUFFLFNBQUE7QUFDbEYsUUFBSSxPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUN0RDtBQUNFO2tEQW5lRCxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFLGlCQUFpQixtQkFDM0IsUUFBUSxFQUFFO3dMQU1UO0FBQ0QsTUFBTSxFQUFFLENBQUM7OztxRUFJUixDQUFDLGVBQ0g7Ozs7Ozs7K01BQ0s7QUFBRTtBQUFjO0FBQW9CO0FBRTVCLFlBNUJMLFlBQVk7QUFBTSxZQUQwQixTQUFTO0FBQU0sWUFPM0QsaUJBQWlCO0FBQU0sWUFIdkIsaUJBQWlCLHVCQTRHckIsTUFBTSxTQUFDLGtCQUFrQjtBQUFXO0FBQUk7QUFFakMsb0JBbEZULEtBQUssU0FBQyxLQUFLO0FBQVMseUJBU3BCLEtBQUssU0FBQyxVQUFVO0FBQVMsc0JBUXpCLEtBQUssU0FBQyxPQUFPO0FBQVMsdUJBU3RCLEtBQUssU0FBQyxRQUFRO0FBQVMsMEJBT3ZCLFNBQVMsU0FBQyxnQkFBZ0I7QUFBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUU7QUFBSztBQUc5QztBQUF5QjtBQUNoQjtBQTZhVixrQkFBa0IsSUFBbUIsRUFBRSxTQUFpQjtBQUN4RCxJQUFFLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFBRyxRQUFELE9BQU8sS0FBSyxDQUFDO0FBQUUsS0FBQTtBQUM5QixJQUFFLHVCQUFNLElBQUksR0FBRyxJQUFJLFlBQVksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3ZELElBQUUsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksQ0FBQztBQUN0RCxDQUFDO0FBQUM7QUFDRjtBQUFLO0FBQW1DO0FBQTBDO0FDdmZsRixXQUt1RCwwQkFBMEI7QUFJakY7QUFBMkI7K0NBTDFCLFFBQVEsU0FBQyxtQkFDUixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRTtpQkFBa0IsRUFBRSxRQUFRLElBQTRCLEVBQUUsQ0FBQyxtQkFDbEYsWUFBWSxFQUFFLENBQUMsb0JBQW9CLENBQUM7ZUFDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUMsZ0JBQ2hDOzs7Ozs7Ozs7Z01BQ0s7QUFBQztBQUFDO0FBQUs7QUFDRDtBQUEwQztBQUFJO0FBQUM7QUFBSztBQUFtQztBQUEwQztBQUFJO0FBQUM7O0FOVkEsQUEwQkEsQUFtQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUNsRkEsQUFxQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQW5CQSxBQUFBLEFBTUEsQUFBQSxBQUdBLEFBQUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBZUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQzVMQSxBQUdBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQ25CQSxBQWFBLEFBRkEsQUFBQSxBQUVBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBaENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUNSQSxBQVFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFFQSxBQy9GQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWlCQSxBQWlGQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUF0Q0EsQUFBQSxBQVlBLEFBQUEsQUFHQSxBQUFBLEFBR0EsQUFBQSxBQUdBLEFBQUEsQUFtQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQW5HQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBc0VBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUlBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBamVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBTUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFDQSxBQXpCQSxBQUFBLEFBREEsQUFBQSxBQU9BLEFBQUEsQUFIQSxBQUFBLEFBNEdBLEFBQUEsQUFBQSxBQUFBLEFBaEZBLEFBQUEsQUFBQSxBQUFBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFpYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQ3RmQSxBQUtBLEFBQUEsQUFJQSxBQUxBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEltYWdlVmlld2VyQ29uZmlnIHtcclxuICB3aWR0aD86IG51bWJlcjtcclxuICBoZWlnaHQ/OiBudW1iZXI7XHJcbiAgYmdTdHlsZT86IHN0cmluZztcclxuICBzY2FsZVN0ZXA/OiBudW1iZXI7XHJcbiAgcm90YXRlU3RlcHBlcj86IGJvb2xlYW47XHJcbiAgYnV0dG9uU3R5bGU/OiBCdXR0b25TdHlsZTtcclxuICBsb2FkaW5nTWVzc2FnZT86IHN0cmluZztcclxuICB0b29sdGlwcz86IHtcclxuICAgIGVuYWJsZWQ/OiBib29sZWFuLFxyXG4gICAgYmdTdHlsZT86IHN0cmluZyxcclxuICAgIGJnQWxwaGE/OiBudW1iZXIsXHJcbiAgICB0ZXh0U3R5bGU/OiBzdHJpbmcsXHJcbiAgICB0ZXh0QWxwaGE/OiBudW1iZXIsXHJcbiAgICBwYWRkaW5nPzogbnVtYmVyLFxyXG4gICAgcmFkaXVzPzogbnVtYmVyXHJcbiAgfTtcclxuICBuZXh0UGFnZUJ1dHRvbj86IEJ1dHRvbkNvbmZpZztcclxuICBiZWZvcmVQYWdlQnV0dG9uPzogQnV0dG9uQ29uZmlnO1xyXG4gIHpvb21PdXRCdXR0b24/OiBCdXR0b25Db25maWc7XHJcbiAgem9vbUluQnV0dG9uPzogQnV0dG9uQ29uZmlnO1xyXG4gIHJvdGF0ZUxlZnRCdXR0b24/OiBCdXR0b25Db25maWc7XHJcbiAgcm90YXRlUmlnaHRCdXR0b24/OiBCdXR0b25Db25maWc7XHJcbiAgcmVzZXRCdXR0b24/OiBCdXR0b25Db25maWc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQnV0dG9uU3R5bGUge1xyXG4gIGljb25Gb250RmFtaWx5Pzogc3RyaW5nO1xyXG4gIGFscGhhPzogbnVtYmVyO1xyXG4gIGhvdmVyQWxwaGE/OiBudW1iZXI7XHJcbiAgYmdTdHlsZT86IHN0cmluZztcclxuICBpY29uU3R5bGU/OiBzdHJpbmc7XHJcbiAgYm9yZGVyU3R5bGU/OiBzdHJpbmc7XHJcbiAgYm9yZGVyV2lkdGg/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQnV0dG9uQ29uZmlnIHtcclxuICBpY29uPzogc3RyaW5nO1xyXG4gIHRvb2x0aXA/OiBzdHJpbmc7XHJcbiAgc29ydElkPzogbnVtYmVyO1xyXG4gIHNob3c/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQnV0dG9uQ29uZmlnKGljb24/OiBzdHJpbmcsIHRvb2x0aXA/OiBzdHJpbmcsIHNvcnRJZDogbnVtYmVyID0gMCwgc2hvdzogYm9vbGVhbiA9IHRydWUpIHtcclxuICByZXR1cm4geyBpY29uOiBpY29uLCB0b29sdGlwOiB0b29sdGlwLCBzb3J0SWQ6IHNvcnRJZCwgc2hvdzogc2hvdyB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSU1BR0VWSUVXRVJfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPEltYWdlVmlld2VyQ29uZmlnPignaW1hZ2V2aWV3ZXIuY29uZmlnJyk7XHJcblxyXG5leHBvcnQgbGV0IElNQUdFVklFV0VSX0NPTkZJR19ERUZBVUxUOiBJbWFnZVZpZXdlckNvbmZpZyA9IHtcclxuICB3aWR0aDogODAwLCAvLyBjb21wb25lbnQgZGVmYXVsdCB3aWR0aFxyXG4gIGhlaWdodDogNjAwLCAvLyBjb21wb25lbnQgZGVmYXVsdCBoZWlnaHRcclxuICBiZ1N0eWxlOiAnI0VDRUZGMScsIC8vIGNvbXBvbmVudCBiYWNrZ3JvdW5kIHN0eWxlXHJcbiAgc2NhbGVTdGVwOiAwLjEsIC8vIHpvb20gc2NhbGUgc3RlcCAodXNpbmcgdGhlIHpvb20gaW4vb3V0IGJ1dHRvbnMpXHJcbiAgcm90YXRlU3RlcHBlcjogZmFsc2UsXHJcbiAgbG9hZGluZ01lc3NhZ2U6ICdMb2FkaW5nLi4uJyxcclxuICBidXR0b25TdHlsZToge1xyXG4gICAgaWNvbkZvbnRGYW1pbHk6ICdNYXRlcmlhbCBJY29ucycsIC8vIGZvbnQgdXNlZCB0byByZW5kZXIgdGhlIGJ1dHRvbiBpY29uc1xyXG4gICAgYWxwaGE6IDAuNSwgLy8gYnV0dG9ucycgdHJhbnNwYXJlbmNlIHZhbHVlXHJcbiAgICBob3ZlckFscGhhOiAwLjcsIC8vIGJ1dHRvbnMnIHRyYW5zcGFyZW5jZSB2YWx1ZSB3aGVuIG1vdXNlIGlzIG92ZXJcclxuICAgIGJnU3R5bGU6ICcjMDAwMDAwJywgLy8gIGJ1dHRvbnMnIGJhY2tncm91bmQgc3R5bGVcclxuICAgIGljb25TdHlsZTogJyNmZmZmZmYnLCAvLyBidXR0b25zJyBpY29uIGNvbG9yc1xyXG4gICAgYm9yZGVyU3R5bGU6ICcjMDAwMDAwJywgLy8gYnV0dG9ucycgYm9yZGVyIHN0eWxlXHJcbiAgICBib3JkZXJXaWR0aDogMCAvLyBidXR0b25zJyBib3JkZXIgd2lkdGggKDAgPT0gZGlzYWJsZWQpXHJcbiAgfSxcclxuICB0b29sdGlwczoge1xyXG4gICAgZW5hYmxlZDogdHJ1ZSwgLy8gZW5hYmxlIG9yIGRpc2FibGUgdG9vbHRpcHMgZm9yIGJ1dHRvbnNcclxuICAgIGJnU3R5bGU6ICcjMDAwMDAwJywgLy8gdG9vbHRpcCBiYWNrZ3JvdW5kIHN0eWxlXHJcbiAgICBiZ0FscGhhOiAwLjUsIC8vIHRvb2x0aXAgYmFja2dyb3VuZCB0cmFuc3BhcmVuY2VcclxuICAgIHRleHRTdHlsZTogJyNmZmZmZmYnLCAvLyB0b29sdGlwJ3MgdGV4dCBzdHlsZVxyXG4gICAgdGV4dEFscGhhOiAwLjksIC8vIHRvb2x0aXAncyB0ZXh0IHRyYW5zcGFyZW5jZVxyXG4gICAgcGFkZGluZzogMTUsIC8vIHRvb2x0aXAgcGFkZGluZ1xyXG4gICAgcmFkaXVzOiAyMCAvLyB0b29sdGlwIGJvcmRlciByYWRpdXNcclxuICB9LFxyXG4gIG5leHRQYWdlQnV0dG9uOiBjcmVhdGVCdXR0b25Db25maWcoU3RyaW5nLmZyb21DaGFyQ29kZSgweEU0MDkpLCAnTmV4dCBwYWdlJywgMCksXHJcbiAgYmVmb3JlUGFnZUJ1dHRvbjogY3JlYXRlQnV0dG9uQ29uZmlnKFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFNDA4KSwgJ1ByZXZpb3VzIHBhZ2UnLCAxKSxcclxuICB6b29tT3V0QnV0dG9uOiBjcmVhdGVCdXR0b25Db25maWcoU3RyaW5nLmZyb21DaGFyQ29kZSgweEU5MDApLCAnWm9vbSBvdXQnLCAwKSxcclxuICB6b29tSW5CdXR0b246IGNyZWF0ZUJ1dHRvbkNvbmZpZyhTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RThGRiksICdab29tIGluJywgMSksXHJcbiAgcm90YXRlTGVmdEJ1dHRvbjogY3JlYXRlQnV0dG9uQ29uZmlnKFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFNDE5KSwgJ1JvdGF0ZSBsZWZ0JywgMiksXHJcbiAgcm90YXRlUmlnaHRCdXR0b246IGNyZWF0ZUJ1dHRvbkNvbmZpZyhTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RTQxQSksICdSb3RhdGUgcmlnaHQnLCAzKSxcclxuICByZXNldEJ1dHRvbjogY3JlYXRlQnV0dG9uQ29uZmlnKFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFODYzKSwgJ1Jlc2V0JywgNClcclxufTtcclxuIiwiaW1wb3J0IHsgQnV0dG9uQ29uZmlnLCBCdXR0b25TdHlsZSwgSW1hZ2VWaWV3ZXJDb25maWcgfSBmcm9tICcuL2ltYWdldmlld2VyLmNvbmZpZyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCdXR0b24ge1xyXG4gIC8vI3JlZ2lvbiBQcm9wZXJ0aWVzXHJcbiAgc29ydElkID0gMDtcclxuXHJcbiAgaWNvbjogc3RyaW5nO1xyXG4gIHRvb2x0aXA6IHN0cmluZztcclxuXHJcbiAgLy8gaG92ZXIgc3RhdGVcclxuICBob3ZlcjogYm9vbGVhbiB8ICgoKSA9PiBib29sZWFuKSA9IGZhbHNlO1xyXG5cclxuICAvLyBzaG93L2hpZGUgYnV0dG9uXHJcbiAgZGlzcGxheSA9IHRydWU7XHJcblxyXG4gIC8vIGRyYXduIG9uIHBvc2l0aW9uXHJcbiAgcHJpdmF0ZSBkcmF3UG9zaXRpb24gPSBudWxsO1xyXG4gIHByaXZhdGUgZHJhd1JhZGl1cyA9IDA7XHJcbiAgLy8jZW5kcmVnaW9uXHJcblxyXG4gIC8vI3JlZ2lvbiBMaWZlY3ljbGUgZXZlbnRzXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBjb25maWc6IEJ1dHRvbkNvbmZpZyxcclxuICAgIHByaXZhdGUgc3R5bGU6IEJ1dHRvblN0eWxlXHJcbiAgKSB7XHJcbiAgICB0aGlzLnNvcnRJZCA9IGNvbmZpZy5zb3J0SWQ7XHJcbiAgICB0aGlzLmRpc3BsYXkgPSBjb25maWcuc2hvdztcclxuICAgIHRoaXMuaWNvbiA9IGNvbmZpZy5pY29uO1xyXG4gICAgdGhpcy50b29sdGlwID0gY29uZmlnLnRvb2x0aXA7XHJcbiAgfVxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyNyZWdpb24gRXZlbnRzXHJcbiAgLy8gY2xpY2sgYWN0aW9uXHJcbiAgb25DbGljayhldnQpIHsgYWxlcnQoJ25vIGNsaWNrIGFjdGlvbiBzZXQhJyk7IHJldHVybiB0cnVlOyB9XHJcblxyXG4gIC8vIG1vdXNlIGRvd24gYWN0aW9uXHJcbiAgb25Nb3VzZURvd24oZXZ0KSB7IHJldHVybiBmYWxzZTsgfVxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyNyZWdpb24gRHJhdyBCdXR0b25cclxuICBkcmF3KGN0eCwgeCwgeSwgcmFkaXVzKSB7XHJcbiAgICB0aGlzLmRyYXdQb3NpdGlvbiA9IHsgeDogeCwgeTogeSB9O1xyXG4gICAgdGhpcy5kcmF3UmFkaXVzID0gcmFkaXVzO1xyXG5cclxuICAgIC8vIHByZXNlcnZlIGNvbnRleHRcclxuICAgIGN0eC5zYXZlKCk7XHJcblxyXG4gICAgLy8gZHJhd2luZyBzZXR0aW5nc1xyXG4gICAgY29uc3QgaXNIb3ZlciA9ICh0eXBlb2YgdGhpcy5ob3ZlciA9PT0gJ2Z1bmN0aW9uJykgPyB0aGlzLmhvdmVyKCkgOiB0aGlzLmhvdmVyO1xyXG4gICAgY3R4Lmdsb2JhbEFscGhhID0gKGlzSG92ZXIpID8gdGhpcy5zdHlsZS5ob3ZlckFscGhhIDogdGhpcy5zdHlsZS5hbHBoYTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnN0eWxlLmJnU3R5bGU7XHJcbiAgICBjdHgubGluZVdpZHRoID0gMDtcclxuXHJcbiAgICAvLyBkcmF3IGNpcmNsZVxyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgIGN0eC5maWxsKCk7XHJcbiAgICBpZiAodGhpcy5zdHlsZS5ib3JkZXJXaWR0aCA+IDApIHtcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMuc3R5bGUuYm9yZGVyV2lkdGg7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3R5bGUuYm9yZGVyU3R5bGU7XHJcbiAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBkcmF3IGljb25cclxuICAgIGlmICh0aGlzLmljb24gIT09IG51bGwpIHtcclxuICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgLy8gY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1vdXQnO1xyXG4gICAgICB0aGlzLmRyYXdJY29uRm9udChjdHgsIHgsIHksIHJhZGl1cyk7XHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVzdG9yZSBjb250ZXh0XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkcmF3SWNvbkZvbnQoY3R4LCBjZW50cmVYLCBjZW50cmVZLCBzaXplKSB7XHJcbiAgICAvLyBmb250IHNldHRpbmdzXHJcbiAgICBjdHguZm9udCA9IHNpemUgKyAncHggJyArIHRoaXMuc3R5bGUuaWNvbkZvbnRGYW1pbHk7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5zdHlsZS5pY29uU3R5bGU7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIHBvc2l0aW9uXHJcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IGN0eC5tZWFzdXJlVGV4dCh0aGlzLmljb24pO1xyXG4gICAgY29uc3QgeCA9IGNlbnRyZVggLSB0ZXh0U2l6ZS53aWR0aCAvIDI7XHJcbiAgICBjb25zdCB5ID0gY2VudHJlWSArIHNpemUgLyAyO1xyXG5cclxuICAgIC8vIGRyYXcgaXRcclxuICAgIGN0eC5maWxsVGV4dCh0aGlzLmljb24sIHgsIHkpO1xyXG4gIH1cclxuICAvLyNlbmRyZWdpb25cclxuXHJcbiAgLy8jcmVnaW9uIFV0aWxzXHJcbiAgaXNXaXRoaW5Cb3VuZHMoeCwgeSkge1xyXG4gICAgaWYgKHRoaXMuZHJhd1Bvc2l0aW9uID09PSBudWxsKSB7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgY29uc3QgZHggPSBNYXRoLmFicyh0aGlzLmRyYXdQb3NpdGlvbi54IC0geCksIGR5ID0gTWF0aC5hYnModGhpcy5kcmF3UG9zaXRpb24ueSAtIHkpO1xyXG4gICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5IDw9IHRoaXMuZHJhd1JhZGl1cyAqIHRoaXMuZHJhd1JhZGl1cztcclxuICB9XHJcbiAgLy8jZW5kcmVnaW9uXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3cG9ydCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcixcclxuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcixcclxuICAgIHB1YmxpYyBzY2FsZTogbnVtYmVyLFxyXG4gICAgcHVibGljIHJvdGF0aW9uOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgeDogbnVtYmVyLFxyXG4gICAgcHVibGljIHk6IG51bWJlclxyXG4gICkge31cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaW1lbnNpb24geyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgfVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlc291cmNlTG9hZGVyIHtcclxuICBwdWJsaWMgc3JjOiBzdHJpbmc7XHJcbiAgcHVibGljIHNvdXJjZURpbTogeyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9O1xyXG4gIHB1YmxpYyB2aWV3cG9ydDogVmlld3BvcnQgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAsIHNjYWxlOiAxLCByb3RhdGlvbjogMCwgeDogMCwgeTogMCB9O1xyXG4gIHB1YmxpYyBtaW5TY2FsZSA9IDA7XHJcbiAgcHVibGljIG1heFNjYWxlID0gNDtcclxuICBwdWJsaWMgY3VycmVudEl0ZW0gPSAxO1xyXG4gIHB1YmxpYyB0b3RhbEl0ZW0gPSAxO1xyXG4gIHB1YmxpYyBzaG93SXRlbXNRdWFudGl0eSA9IGZhbHNlO1xyXG4gIHB1YmxpYyBsb2FkZWQgPSBmYWxzZTtcclxuICBwdWJsaWMgbG9hZGluZyA9IGZhbHNlO1xyXG4gIHB1YmxpYyByZW5kZXJpbmcgPSBmYWxzZTtcclxuXHJcbiAgcHJvdGVjdGVkIF9pbWFnZTtcclxuICBwcm90ZWN0ZWQgcmVzb3VyY2VDaGFuZ2UgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcblxyXG4gIGFic3RyYWN0IHNldFVwKCk7XHJcbiAgYWJzdHJhY3QgbG9hZFJlc291cmNlKCk7XHJcblxyXG4gIHB1YmxpYyByZXNldFZpZXdwb3J0KGNhbnZhc0RpbTogRGltZW5zaW9uKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMubG9hZGVkIHx8ICFjYW52YXNEaW0pIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgY29uc3Qgcm90YXRpb24gPSB0aGlzLnZpZXdwb3J0ID8gdGhpcy52aWV3cG9ydC5yb3RhdGlvbiA6IDA7XHJcbiAgICBjb25zdCBpbnZlcnRlZCA9IHRvU3F1YXJlQW5nbGUocm90YXRpb24pIC8gOTAgJSAyICE9PSAwO1xyXG4gICAgY29uc3QgY2FudmFzID0ge1xyXG4gICAgICB3aWR0aDogIWludmVydGVkID8gY2FudmFzRGltLndpZHRoIDogY2FudmFzRGltLmhlaWdodCxcclxuICAgICAgaGVpZ2h0OiAhaW52ZXJ0ZWQgPyBjYW52YXNEaW0uaGVpZ2h0IDogY2FudmFzRGltLndpZHRoXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICgoKGNhbnZhcy5oZWlnaHQgLyB0aGlzLl9pbWFnZS5oZWlnaHQpICogdGhpcy5faW1hZ2Uud2lkdGgpIDw9IGNhbnZhcy53aWR0aCkge1xyXG4gICAgICB0aGlzLnZpZXdwb3J0LnNjYWxlID0gY2FudmFzLmhlaWdodCAvIHRoaXMuX2ltYWdlLmhlaWdodDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudmlld3BvcnQuc2NhbGUgPSBjYW52YXMud2lkdGggLyB0aGlzLl9pbWFnZS53aWR0aDtcclxuICAgIH1cclxuICAgIHRoaXMubWluU2NhbGUgPSB0aGlzLnZpZXdwb3J0LnNjYWxlIC8gNDtcclxuICAgIHRoaXMubWF4U2NhbGUgPSB0aGlzLnZpZXdwb3J0LnNjYWxlICogNDtcclxuXHJcbiAgICAvLyBzdGFydCBwb2ludCB0byBkcmF3IGltYWdlXHJcbiAgICB0aGlzLnZpZXdwb3J0LndpZHRoID0gdGhpcy5faW1hZ2Uud2lkdGggKiB0aGlzLnZpZXdwb3J0LnNjYWxlO1xyXG4gICAgdGhpcy52aWV3cG9ydC5oZWlnaHQgPSB0aGlzLl9pbWFnZS5oZWlnaHQgKiB0aGlzLnZpZXdwb3J0LnNjYWxlO1xyXG4gICAgdGhpcy52aWV3cG9ydC54ID0gKGNhbnZhc0RpbS53aWR0aCAtIHRoaXMudmlld3BvcnQud2lkdGgpIC8gMjtcclxuICAgIHRoaXMudmlld3BvcnQueSA9IChjYW52YXNEaW0uaGVpZ2h0IC0gdGhpcy52aWV3cG9ydC5oZWlnaHQpIC8gMjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KGN0eCwgY29uZmlnOiBJbWFnZVZpZXdlckNvbmZpZywgY2FudmFzRGltOiBEaW1lbnNpb24sIG9uRmluaXNoKSB7XHJcbiAgICAvLyBjbGVhciBjYW52YXNcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzRGltLndpZHRoLCBjYW52YXNEaW0uaGVpZ2h0KTtcclxuXHJcbiAgICAvLyBEcmF3IGJhY2tncm91bmQgY29sb3I7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmJnU3R5bGU7XHJcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzRGltLndpZHRoLCBjYW52YXNEaW0uaGVpZ2h0KTtcclxuXHJcbiAgICAvLyBkcmF3IGltYWdlICh0cmFuc2Zvcm1lZCwgcm90YXRlIGFuZCBzY2FsZWQpXHJcbiAgICBpZiAoIXRoaXMubG9hZGluZyAmJiB0aGlzLmxvYWRlZCkge1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMudmlld3BvcnQueCArIHRoaXMudmlld3BvcnQud2lkdGggLyAyLCB0aGlzLnZpZXdwb3J0LnkgKyB0aGlzLnZpZXdwb3J0LmhlaWdodCAvIDIpO1xyXG4gICAgICBjdHgucm90YXRlKHRoaXMudmlld3BvcnQucm90YXRpb24gKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgY3R4LnNjYWxlKHRoaXMudmlld3BvcnQuc2NhbGUsIHRoaXMudmlld3BvcnQuc2NhbGUpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuX2ltYWdlLCAtdGhpcy5faW1hZ2Uud2lkdGggLyAyLCAtdGhpcy5faW1hZ2UuaGVpZ2h0IC8gMik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gJyMzMzMnO1xyXG4gICAgICBjdHguZm9udCA9ICcyNXB4IFZlcmRhbmEnO1xyXG4gICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgIGN0eC5maWxsVGV4dChjb25maWcubG9hZGluZ01lc3NhZ2UgfHwgJ0xvYWRpbmcuLi4nLCBjYW52YXNEaW0ud2lkdGggLyAyLCBjYW52YXNEaW0uaGVpZ2h0IC8gMik7XHJcbiAgICB9XHJcblxyXG4gICAgb25GaW5pc2goY3R4LCBjb25maWcsIGNhbnZhc0RpbSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb25SZXNvdXJjZUNoYW5nZSgpIHsgcmV0dXJuIHRoaXMucmVzb3VyY2VDaGFuZ2UuYXNPYnNlcnZhYmxlKCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvU3F1YXJlQW5nbGUoYW5nbGU6IG51bWJlcikge1xyXG4gIHJldHVybiA5MCAqICgoTWF0aC50cnVuYyhhbmdsZSAvIDkwKSArIChNYXRoLnRydW5jKGFuZ2xlICUgOTApID4gNDUgPyAxIDogMCkpICUgNCk7XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVzb3VyY2VMb2FkZXIsIERpbWVuc2lvbiwgdG9TcXVhcmVBbmdsZSB9IGZyb20gJy4vaW1hZ2V2aWV3ZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBJbWFnZVZpZXdlckNvbmZpZyB9IGZyb20gJy4vaW1hZ2V2aWV3ZXIuY29uZmlnJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJbWFnZVJlc291cmNlTG9hZGVyIGV4dGVuZHMgUmVzb3VyY2VMb2FkZXIge1xyXG5cclxuICBzZXRVcCgpIHtcclxuICAgIHRoaXMubG9hZFJlc291cmNlKCk7XHJcbiAgfVxyXG5cclxuICBsb2FkUmVzb3VyY2UoKSB7XHJcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuX2ltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoZXZ0KSA9PiB7XHJcbiAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIHRoaXMucmVzb3VyY2VDaGFuZ2UubmV4dCgpO1xyXG4gICAgfSwgZmFsc2UpO1xyXG4gICAgdGhpcy5faW1hZ2Uuc3JjID0gdGhpcy5zcmM7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVEZWYge1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIHBhZ2U6IG51bWJlcjtcclxuICBpbWFnZTogYW55O1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgSW1hZ2VDYWNoZVNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIF9jYWNoZTogQ2FjaGVEZWZbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIGdldCBjYWNoZSgpOiBDYWNoZURlZltdIHtcclxuICAgIHJldHVybiB0aGlzLl9jYWNoZTtcclxuICB9XHJcblxyXG4gIGdldENhY2hlKHVybDogc3RyaW5nLCBwYWdlOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmNhY2hlLmZpbmQoaSA9PiBpLnVybCA9PT0gdXJsICYmIGkucGFnZSA9PT0gcGFnZSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbWFnZSh1cmw6IHN0cmluZywgcGFnZTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBjID0gdGhpcy5nZXRDYWNoZSh1cmwsIHBhZ2UpO1xyXG4gICAgcmV0dXJuIGMgPyBjLmltYWdlIDogbnVsbDtcclxuICB9XHJcblxyXG4gIHNhdmVJbWFnZSh1cmw6IHN0cmluZywgcGFnZTogbnVtYmVyLCBpbWFnZTogYW55KSB7XHJcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuZ2V0Q2FjaGUodXJsLCBwYWdlKTtcclxuICAgIGlmIChjYWNoZSkge1xyXG4gICAgICBjYWNoZS5pbWFnZSA9IGltYWdlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jYWNoZS5wdXNoKHsgdXJsLCBwYWdlLCBpbWFnZSB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2VDYWNoZSgpIHtcclxuICAgIHRoaXMuY2FjaGUuZm9yRWFjaChpID0+IFVSTC5yZXZva2VPYmplY3RVUkwoaS5pbWFnZS5zcmMpKTtcclxuICAgIHRoaXMuX2NhY2hlID0gW107XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJlc291cmNlTG9hZGVyLCBEaW1lbnNpb24sIHRvU3F1YXJlQW5nbGUgfSBmcm9tICcuL2ltYWdldmlld2VyLm1vZGVsJztcclxuaW1wb3J0IHsgSW1hZ2VDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2ltYWdlY2FjaGUuc2VydmljZSc7XHJcbmltcG9ydCB7IEltYWdlVmlld2VyQ29uZmlnIH0gZnJvbSAnLi9pbWFnZXZpZXdlci5jb25maWcnO1xyXG5pbXBvcnQgeyBQREZKU1N0YXRpYywgUERGRG9jdW1lbnRQcm94eSwgUERGUGFnZVByb3h5IH0gZnJvbSAncGRmanMtZGlzdCc7XHJcblxyXG5kZWNsYXJlIHZhciBwZGZqc0xpYjogYW55O1xyXG5kZWNsYXJlIHZhciBwZGZqc1dvcmtlcjogYW55O1xyXG5cclxuZXhwb3J0IGNsYXNzIFBkZlJlc291cmNlTG9hZGVyIGV4dGVuZHMgUmVzb3VyY2VMb2FkZXIge1xyXG4gIHByaXZhdGUgX3BkZjogUERGRG9jdW1lbnRQcm94eTtcclxuICBwcml2YXRlIF9wYWdlOiBQREZQYWdlUHJveHk7XHJcbiAgcHJpdmF0ZSBfcGVuZGluZ1JlbG9hZDogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaW1hZ2VDYWNoZTogSW1hZ2VDYWNoZVNlcnZpY2UpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ1dvcmtlcicgaW4gd2luZG93KSB7XHJcbiAgICAgIGlmIChwZGZqc0xpYiAmJiBwZGZqc0xpYi5HbG9iYWxXb3JrZXJPcHRpb25zICYmICFwZGZqc0xpYi5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYykge1xyXG4gICAgICAgIHBkZmpzTGliLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID0gcGRmanNXb3JrZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuc2hvd0l0ZW1zUXVhbnRpdHkgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0VXAoKSB7XHJcbiAgICBjb25zdCB2bSA9IHRoaXM7XHJcbiAgICBpZiAodm0ubG9hZGluZyB8fCAhdm0uc3JjKSB7IHJldHVybjsgfVxyXG4gICAgY29uc3QgbG9hZGluZ1Rhc2sgPSBwZGZqc0xpYi5nZXREb2N1bWVudCh2bS5zcmMpO1xyXG4gICAgdm0ubG9hZGluZyA9IHRydWU7XHJcbiAgICB2bS5jdXJyZW50SXRlbSA9IDE7XHJcbiAgICBsb2FkaW5nVGFzay50aGVuKChwZGY6IFBERkRvY3VtZW50UHJveHkpID0+IHtcclxuICAgICAgdm0uX3BkZiA9IHBkZjtcclxuICAgICAgdm0udG90YWxJdGVtID0gcGRmLm51bVBhZ2VzO1xyXG4gICAgICB2bS5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICB2bS5sb2FkUmVzb3VyY2UoKTtcclxuICAgIH0sIChyZWFzb246IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKHJlYXNvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxvYWRSZXNvdXJjZSgpIHtcclxuICAgIGNvbnN0IHZtID0gdGhpcztcclxuICAgIGlmICghdm0ubG9hZGVkKSB7XHJcbiAgICAgIHZtLl9wZW5kaW5nUmVsb2FkID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdm0ubG9hZGVkID0gZmFsc2U7XHJcbiAgICBjb25zdCB1cmwgPSB2bS5zcmM7XHJcbiAgICBjb25zdCBwYWdlID0gdm0uY3VycmVudEl0ZW07XHJcblxyXG4gICAgdm0uX3BkZi5nZXRQYWdlKHBhZ2UpLnRoZW4oKHBkZlBhZ2UpID0+IHtcclxuICAgICAgdm0uX3BhZ2UgPSBwZGZQYWdlO1xyXG4gICAgICB2bS5sb2FkSW1hZ2UodXJsLCBwYWdlLCAoKSA9PiB7XHJcbiAgICAgICAgdm0ubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHZtLl9wZW5kaW5nUmVsb2FkKSB7XHJcbiAgICAgICAgICB2bS5fcGVuZGluZ1JlbG9hZCA9IGZhbHNlO1xyXG4gICAgICAgICAgdm0ubG9hZFJlc291cmNlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZtLnJlc291cmNlQ2hhbmdlLm5leHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGxvYWRJbWFnZShzcmM6IHN0cmluZywgcGFnZTogbnVtYmVyLCBvbkZpbmlzaDogKCkgPT4gdm9pZCkge1xyXG4gICAgY29uc3Qgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgY2FjaGVpbWcgPSB2bS5faW1hZ2VDYWNoZS5nZXRJbWFnZShzcmMsIHBhZ2UpO1xyXG4gICAgaWYgKGNhY2hlaW1nKSB7XHJcbiAgICAgIHZtLl9pbWFnZSA9IGNhY2hlaW1nO1xyXG4gICAgICBvbkZpbmlzaCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgY29uc3QgcGFnZVZwID0gdm0uX3BhZ2UuZ2V0Vmlld3BvcnQoMik7XHJcblxyXG4gICAgY2FudmFzLndpZHRoID0gcGFnZVZwLndpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHBhZ2VWcC5oZWlnaHQ7XHJcblxyXG4gICAgY29uc3QgcmVuZGVyQ29udGV4dCA9IHtcclxuICAgICAgY2FudmFzQ29udGV4dDogY29udGV4dCxcclxuICAgICAgdmlld3BvcnQ6IHBhZ2VWcFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbmRlclRhc2sgPSB2bS5fcGFnZS5yZW5kZXIocmVuZGVyQ29udGV4dCk7XHJcbiAgICByZW5kZXJUYXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICBjYW52YXMudG9CbG9iKGJsb2IgPT4ge1xyXG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltZy5vbmxvYWQgPSBvbkZpbmlzaDtcclxuICAgICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICB2bS5faW1hZ2VDYWNoZS5zYXZlSW1hZ2Uoc3JjLCBwYWdlLCBpbWcpO1xyXG4gICAgICAgIHZtLl9pbWFnZSA9IGltZztcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0LCBSZW5kZXJlcjIsIEluamVjdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEltYWdlVmlld2VyQ29uZmlnLCBJTUFHRVZJRVdFUl9DT05GSUcsIElNQUdFVklFV0VSX0NPTkZJR19ERUZBVUxULCBCdXR0b25Db25maWcsIEJ1dHRvblN0eWxlIH0gZnJvbSAnLi9pbWFnZXZpZXdlci5jb25maWcnO1xyXG5pbXBvcnQgeyBWaWV3cG9ydCwgQnV0dG9uLCB0b1NxdWFyZUFuZ2xlLCBSZXNvdXJjZUxvYWRlciB9IGZyb20gJy4vaW1hZ2V2aWV3ZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBJbWFnZVJlc291cmNlTG9hZGVyIH0gZnJvbSAnLi9pbWFnZS5sb2FkZXInO1xyXG5pbXBvcnQgeyBJbWFnZUNhY2hlU2VydmljZSB9IGZyb20gJy4vaW1hZ2VjYWNoZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUGRmUmVzb3VyY2VMb2FkZXIgfSBmcm9tICcuL3BkZi5sb2FkZXInO1xyXG5cclxuY29uc3QgTUlOX1RPT0xUSVBfV0lEVEhfU1BBQ0UgPSA1MDA7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1pbWFnZXZpZXdlcicsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxjYW52YXMgI2ltYWdlQ29udGFpbmVyIFt3aWR0aF09XCJ3aWR0aFwiIFtoZWlnaHRdPVwiaGVpZ2h0XCJcclxuICAgICAgKHRhcCk9XCJvblRhcCgkZXZlbnQpXCIgKHBpbmNoaW4pPVwicHJvY2Vzc1RvdWNoRXZlbnQoJGV2ZW50KVwiIChwaW5jaG91dCk9XCJwcm9jZXNzVG91Y2hFdmVudCgkZXZlbnQpXCJcclxuICAgICAgKHBhbm1vdmUpPVwicHJvY2Vzc1RvdWNoRXZlbnQoJGV2ZW50KVwiIChwYW5lbmQpPVwib25Ub3VjaEVuZCgpXCIgKHJvdGF0ZW1vdmUpPVwicHJvY2Vzc1RvdWNoRXZlbnQoJGV2ZW50KVwiXHJcbiAgICAgICAgKHJvdGF0ZWVuZCk9XCJvblRvdWNoRW5kKClcIj5cclxuICAgIDwvY2FudmFzPlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbYFxyXG4gICAgOmhvc3QgeyBkaXNwbGF5OiBibG9jayB9XHJcbiAgICA6aG9zdCBjYW52YXMgeyBtYXJnaW46IDAgYXV0bzsgZGlzcGxheTogYmxvY2sgfVxyXG4gICAgW2hpZGRlbl0geyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQgfVxyXG4gIGBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbWFnZVZpZXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8vI3JlZ2lvbiBJbnB1dCBwcm9wZXJ0aWVzXHJcbiAgcHJpdmF0ZSBfc3JjOiBzdHJpbmcgfCBGaWxlO1xyXG4gIGdldCBzcmMoKSB7IHJldHVybiB0aGlzLl9zcmM7IH1cclxuICBASW5wdXQoJ3NyYycpIHNldCBzcmModmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fc3JjKSB7IHJldHVybjsgfVxyXG4gICAgdGhpcy5fc3JjID0gdmFsdWU7XHJcbiAgICB0aGlzLnNldFVwUmVzb3VyY2UoKTtcclxuICB9XHJcblxyXG4gIC8vIEZJWCBub3Qgd29ya2lnbiBwcm9wZXJseVxyXG4gIHByaXZhdGUgX2ZpbGV0eXBlOiBzdHJpbmc7XHJcbiAgZ2V0IGZpbGV0eXBlKCkgeyByZXR1cm4gdGhpcy5fZmlsZXR5cGU7IH1cclxuICBASW5wdXQoJ2ZpbGV0eXBlJykgc2V0IGZpbGV0eXBlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fZmlsZXR5cGUpIHsgcmV0dXJuOyB9XHJcbiAgICB0aGlzLl9maWxldHlwZSA9IHZhbHVlO1xyXG4gICAgdGhpcy5zZXRVcFJlc291cmNlKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xyXG4gIGdldCB3aWR0aCgpIHsgcmV0dXJuIHRoaXMuX3dpZHRoOyB9XHJcbiAgQElucHV0KCd3aWR0aCcpIHNldCB3aWR0aCh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlID09PSB0aGlzLl93aWR0aCkgeyByZXR1cm47IH1cclxuICAgIHRoaXMuX3dpZHRoID0gdmFsdWU7XHJcbiAgICBpZiAodGhpcy5fY2FudmFzKSB7IHRoaXMuX2NhbnZhcy53aWR0aCA9IHRoaXMuX3dpZHRoOyB9XHJcbiAgICB0aGlzLnJlc2V0SW1hZ2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xyXG4gIGdldCBoZWlnaHQoKSB7IHJldHVybiB0aGlzLl9oZWlnaHQ7IH1cclxuICBASW5wdXQoJ2hlaWdodCcpIHNldCBoZWlnaHQodmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5faGVpZ2h0KSB7IHJldHVybjsgfVxyXG4gICAgdGhpcy5faGVpZ2h0ID0gdmFsdWU7XHJcbiAgICBpZiAodGhpcy5fY2FudmFzKSB7IHRoaXMuX2NhbnZhcy5oZWlnaHQgPSB0aGlzLl9oZWlnaHQ7IH1cclxuICAgIHRoaXMucmVzZXRJbWFnZSgpO1xyXG4gIH1cclxuXHJcbiAgQFZpZXdDaGlsZCgnaW1hZ2VDb250YWluZXInKSBjYW52YXNSZWY6IGFueTtcclxuICAvLyNlbmRyZWdpb25cclxuXHJcbiAgLy8jcmVnaW9uIFByaXZhdGUgcHJvcGVydGllc1xyXG4gIC8vIENhbnZhcyAyRCBjb250ZXh0XHJcbiAgcHJpdmF0ZSBfY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICBwcml2YXRlIF9jb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblxyXG4gIC8vIGRpcnR5IHN0YXRlXHJcbiAgcHJpdmF0ZSBfZGlydHkgPSB0cnVlO1xyXG5cclxuICAvLyBhY3Rpb24gYnV0dG9uc1xyXG4gIHByaXZhdGUgX25leHRQYWdlQnV0dG9uOiBCdXR0b247XHJcbiAgcHJpdmF0ZSBfYmVmb3JlUGFnZUJ1dHRvbjogQnV0dG9uO1xyXG4gIHByaXZhdGUgX3pvb21PdXRCdXR0b246IEJ1dHRvbjtcclxuICBwcml2YXRlIF96b29tSW5CdXR0b246IEJ1dHRvbjtcclxuICBwcml2YXRlIF9yb3RhdGVMZWZ0QnV0dG9uOiBCdXR0b247XHJcbiAgcHJpdmF0ZSBfcm90YXRlUmlnaHRCdXR0b246IEJ1dHRvbjtcclxuICBwcml2YXRlIF9yZXNldEJ1dHRvbjogQnV0dG9uO1xyXG5cclxuICAvLyBjb250YWlucyBhbGwgYWN0aXZlIGJ1dHRvbnNcclxuICBwcml2YXRlIF9idXR0b25zID0gW107XHJcblxyXG4gIC8vIGN1cnJlbnQgdG9vbCB0aXAgKHVzZWQgdG8gdHJhY2sgY2hhbmdlIG9mIHRvb2wgdGlwKVxyXG4gIHByaXZhdGUgX2N1cnJlbnRUb29sdGlwID0gbnVsbDtcclxuXHJcbiAgLy8gY2FjaGVkIGRhdGEgd2hlbiB0b3VjaCBldmVudHMgc3RhcnRlZFxyXG4gIHByaXZhdGUgX3RvdWNoU3RhcnRTdGF0ZTogYW55ID0ge307XHJcblxyXG4gIC8vIGxpc3Qgb2YgZXZlbnQgbGlzdGVuZXIgZGVzdHJveWVyc1xyXG4gIHByaXZhdGUgX2xpc3RlbkRlc3Ryb3lMaXN0ID0gW107XHJcblxyXG4gIC8vIGltYWdlIC8gUGRmIERyYXdhYmxlIFJlc291cmNlXHJcbiAgcHJpdmF0ZSBfcmVzb3VyY2U6IFJlc291cmNlTG9hZGVyO1xyXG4gIHByaXZhdGUgX3Jlc291cmNlQ2hhbmdlU3ViOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIC8vIENhY2hpbmcgcmVzb3VyY2VMb2FkZXIgaW5zdGFuY2VzIHRvIHJldXNlXHJcbiAgcHJpdmF0ZSBfaW1hZ2VSZXNvdXJjZTogSW1hZ2VSZXNvdXJjZUxvYWRlcjtcclxuICBwcml2YXRlIF9wZGZSZXNvdXJjZTogUGRmUmVzb3VyY2VMb2FkZXI7XHJcblxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyNyZWdpb24gTGlmZWN5Y2xlIGV2ZW50c1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXHJcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgcHJpdmF0ZSBfaW1hZ2VDYWNoZTogSW1hZ2VDYWNoZVNlcnZpY2UsXHJcbiAgICBASW5qZWN0KElNQUdFVklFV0VSX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEltYWdlVmlld2VyQ29uZmlnXHJcbiAgKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMuZXh0ZW5kc0RlZmF1bHRDb25maWcoY29uZmlnKTtcclxuICAgIHRoaXMuX25leHRQYWdlQnV0dG9uID0gbmV3IEJ1dHRvbih0aGlzLmNvbmZpZy5uZXh0UGFnZUJ1dHRvbiwgdGhpcy5jb25maWcuYnV0dG9uU3R5bGUpO1xyXG4gICAgdGhpcy5fYmVmb3JlUGFnZUJ1dHRvbiA9IG5ldyBCdXR0b24odGhpcy5jb25maWcuYmVmb3JlUGFnZUJ1dHRvbiwgdGhpcy5jb25maWcuYnV0dG9uU3R5bGUpO1xyXG4gICAgdGhpcy5fem9vbU91dEJ1dHRvbiA9IG5ldyBCdXR0b24odGhpcy5jb25maWcuem9vbU91dEJ1dHRvbiwgdGhpcy5jb25maWcuYnV0dG9uU3R5bGUpO1xyXG4gICAgdGhpcy5fem9vbUluQnV0dG9uID0gbmV3IEJ1dHRvbih0aGlzLmNvbmZpZy56b29tSW5CdXR0b24sIHRoaXMuY29uZmlnLmJ1dHRvblN0eWxlKTtcclxuICAgIHRoaXMuX3JvdGF0ZUxlZnRCdXR0b24gPSBuZXcgQnV0dG9uKHRoaXMuY29uZmlnLnJvdGF0ZUxlZnRCdXR0b24sIHRoaXMuY29uZmlnLmJ1dHRvblN0eWxlKTtcclxuICAgIHRoaXMuX3JvdGF0ZVJpZ2h0QnV0dG9uID0gbmV3IEJ1dHRvbih0aGlzLmNvbmZpZy5yb3RhdGVSaWdodEJ1dHRvbiwgdGhpcy5jb25maWcuYnV0dG9uU3R5bGUpO1xyXG4gICAgdGhpcy5fcmVzZXRCdXR0b24gPSBuZXcgQnV0dG9uKHRoaXMuY29uZmlnLnJlc2V0QnV0dG9uLCB0aGlzLmNvbmZpZy5idXR0b25TdHlsZSk7XHJcbiAgICB0aGlzLl9idXR0b25zID0gW1xyXG4gICAgICB0aGlzLl96b29tT3V0QnV0dG9uLFxyXG4gICAgICB0aGlzLl96b29tSW5CdXR0b24sXHJcbiAgICAgIHRoaXMuX3JvdGF0ZUxlZnRCdXR0b24sXHJcbiAgICAgIHRoaXMuX3JvdGF0ZVJpZ2h0QnV0dG9uLFxyXG4gICAgICB0aGlzLl9yZXNldEJ1dHRvblxyXG4gICAgXS5maWx0ZXIoaXRlbSA9PiBpdGVtLmRpc3BsYXkpXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnNvcnRJZCAtIGIuc29ydElkKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuX2NhbnZhcyA9IHRoaXMuY2FudmFzUmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB0aGlzLl9jb250ZXh0ID0gdGhpcy5fY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gICAgLy8gc2V0dGluZyBjYW52YXMgZGltZW50aW9uXHJcbiAgICB0aGlzLl9jYW52YXMud2lkdGggPSB0aGlzLndpZHRoIHx8IHRoaXMuY29uZmlnLndpZHRoO1xyXG4gICAgdGhpcy5fY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0IHx8IHRoaXMuY29uZmlnLmhlaWdodDtcclxuXHJcbiAgICAvLyBzZXR0aW5nIGJ1dHRvbnMgYWN0aW9uc1xyXG4gICAgdGhpcy5fbmV4dFBhZ2VCdXR0b24ub25DbGljayA9IChldnQpID0+IHsgdGhpcy5uZXh0UGFnZSgpOyByZXR1cm4gZmFsc2U7IH07XHJcbiAgICB0aGlzLl9iZWZvcmVQYWdlQnV0dG9uLm9uQ2xpY2sgPSAoZXZ0KSA9PiB7IHRoaXMucHJldmlvdXNQYWdlKCk7IHJldHVybiBmYWxzZTsgfTtcclxuICAgIHRoaXMuX3pvb21PdXRCdXR0b24ub25DbGljayA9IChldnQpID0+IHsgdGhpcy56b29tT3V0KCk7IHJldHVybiBmYWxzZTsgfTtcclxuICAgIHRoaXMuX3pvb21JbkJ1dHRvbi5vbkNsaWNrID0gKGV2dCkgPT4geyB0aGlzLnpvb21JbigpOyByZXR1cm4gZmFsc2U7IH07XHJcbiAgICB0aGlzLl9yb3RhdGVMZWZ0QnV0dG9uLm9uQ2xpY2sgPSAoZXZ0KSA9PiB7IHRoaXMucm90YXRlTGVmdCgpOyByZXR1cm4gZmFsc2U7IH07XHJcbiAgICB0aGlzLl9yb3RhdGVSaWdodEJ1dHRvbi5vbkNsaWNrID0gKGV2dCkgPT4geyB0aGlzLnJvdGF0ZVJpZ2h0KCk7IHJldHVybiBmYWxzZTsgfTtcclxuICAgIHRoaXMuX3Jlc2V0QnV0dG9uLm9uQ2xpY2sgPSAoZXZ0KSA9PiB7IHRoaXMucmVzZXRJbWFnZSgpOyByZXR1cm4gZmFsc2U7IH07XHJcblxyXG4gICAgLy8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVDYW52YXMoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgLy8gdW5yZWdpc3RlIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgdGhpcy5fbGlzdGVuRGVzdHJveUxpc3QuZm9yRWFjaChsaXN0ZW5EZXN0cm95ID0+IHtcclxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5EZXN0cm95ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgbGlzdGVuRGVzdHJveSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX2ltYWdlQ2FjaGUuZGlzcG9zZUNhY2hlKCk7XHJcbiAgfVxyXG5cclxuICBzZXRVcFJlc291cmNlKCkge1xyXG4gICAgaWYgKHRoaXMuaXNJbWFnZSh0aGlzLnNyYykgJiYgKCF0aGlzLl9yZXNvdXJjZSB8fCAhKHRoaXMuX3Jlc291cmNlIGluc3RhbmNlb2YgSW1hZ2VSZXNvdXJjZUxvYWRlcikpKSB7XHJcbiAgICAgIGlmICh0aGlzLl9yZXNvdXJjZUNoYW5nZVN1Yikge1xyXG4gICAgICAgIHRoaXMuX3Jlc291cmNlQ2hhbmdlU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF0aGlzLl9pbWFnZVJlc291cmNlKSB7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VSZXNvdXJjZSA9IG5ldyBJbWFnZVJlc291cmNlTG9hZGVyKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fcmVzb3VyY2UgPSB0aGlzLl9pbWFnZVJlc291cmNlO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUGRmKHRoaXMuc3JjKSAmJiAoIXRoaXMuX3Jlc291cmNlIHx8ICEodGhpcy5fcmVzb3VyY2UgaW5zdGFuY2VvZiBQZGZSZXNvdXJjZUxvYWRlcikpKSB7XHJcbiAgICAgIGlmICh0aGlzLl9yZXNvdXJjZUNoYW5nZVN1Yikge1xyXG4gICAgICAgIHRoaXMuX3Jlc291cmNlQ2hhbmdlU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF0aGlzLl9wZGZSZXNvdXJjZSkge1xyXG4gICAgICAgIHRoaXMuX3BkZlJlc291cmNlID0gbmV3IFBkZlJlc291cmNlTG9hZGVyKHRoaXMuX2ltYWdlQ2FjaGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX3Jlc291cmNlID0gdGhpcy5fcGRmUmVzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5fcmVzb3VyY2UpIHtcclxuICAgICAgdGhpcy5fcmVzb3VyY2Uuc3JjID0gdGhpcy5zcmMgaW5zdGFuY2VvZiBGaWxlID8gVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLnNyYykgOiB0aGlzLnNyYztcclxuICAgICAgdGhpcy5fcmVzb3VyY2VDaGFuZ2VTdWIgPSB0aGlzLl9yZXNvdXJjZS5vblJlc291cmNlQ2hhbmdlKCkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNhbnZhcygpO1xyXG4gICAgICAgIGlmICh0aGlzLnNyYyBpbnN0YW5jZW9mIEZpbGUpIHtcclxuICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodGhpcy5fcmVzb3VyY2Uuc3JjKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9yZXNvdXJjZS5zZXRVcCgpO1xyXG4gICAgICB0aGlzLnJlc2V0SW1hZ2UoKTtcclxuICAgICAgaWYgKHRoaXMuX2NvbnRleHQpIHsgdGhpcy51cGRhdGVDYW52YXMoKTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyNlbmRyZWdpb25cclxuXHJcbiAgLy8jcmVnaW9uIFRvdWNoIGV2ZW50c1xyXG4gIG9uVGFwKGV2dCkge1xyXG4gICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IHRoaXMuZ2V0VUlFbGVtZW50KHRoaXMuc2NyZWVuVG9DYW52YXNDZW50cmUoZXZ0LmNlbnRlcikpO1xyXG4gICAgaWYgKGFjdGl2ZUVsZW1lbnQgIT09IG51bGwpIHsgYWN0aXZlRWxlbWVudC5vbkNsaWNrKGV2dCk7IH1cclxuICB9XHJcblxyXG4gIG9uVG91Y2hFbmQoKSB7XHJcbiAgICB0aGlzLl90b3VjaFN0YXJ0U3RhdGUudmlld3BvcnQgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLl90b3VjaFN0YXJ0U3RhdGUuc2NhbGUgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLl90b3VjaFN0YXJ0U3RhdGUucm90YXRlID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgcHJvY2Vzc1RvdWNoRXZlbnQoZXZ0KSB7XHJcbiAgICAvLyBwcm9jZXNzIHBhblxyXG4gICAgaWYgKCF0aGlzLl90b3VjaFN0YXJ0U3RhdGUudmlld3BvcnQpIHsgdGhpcy5fdG91Y2hTdGFydFN0YXRlLnZpZXdwb3J0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fcmVzb3VyY2Uudmlld3BvcnQpOyB9XHJcblxyXG4gICAgY29uc3Qgdmlld3BvcnQgPSB0aGlzLl9yZXNvdXJjZS52aWV3cG9ydDtcclxuICAgIHZpZXdwb3J0LnggPSB0aGlzLl90b3VjaFN0YXJ0U3RhdGUudmlld3BvcnQueCArIGV2dC5kZWx0YVg7XHJcbiAgICB2aWV3cG9ydC55ID0gdGhpcy5fdG91Y2hTdGFydFN0YXRlLnZpZXdwb3J0LnkgKyBldnQuZGVsdGFZO1xyXG5cclxuICAgIC8vIHByb2Nlc3MgcGluY2ggaW4vb3V0XHJcbiAgICBpZiAoIXRoaXMuX3RvdWNoU3RhcnRTdGF0ZS5zY2FsZSkgeyB0aGlzLl90b3VjaFN0YXJ0U3RhdGUuc2NhbGUgPSB0aGlzLl9yZXNvdXJjZS52aWV3cG9ydC5zY2FsZTsgfVxyXG4gICAgY29uc3QgbmV3U2NhbGUgPSB0aGlzLl90b3VjaFN0YXJ0U3RhdGUuc2NhbGUgKiBldnQuc2NhbGU7XHJcbiAgICB2aWV3cG9ydC5zY2FsZSA9IG5ld1NjYWxlID4gdGhpcy5fcmVzb3VyY2UubWF4U2NhbGUgPyB0aGlzLl9yZXNvdXJjZS5tYXhTY2FsZSA6XHJcbiAgICAgIG5ld1NjYWxlIDwgdGhpcy5fcmVzb3VyY2UubWluU2NhbGUgPyB0aGlzLl9yZXNvdXJjZS5taW5TY2FsZSA6IG5ld1NjYWxlO1xyXG5cclxuICAgIC8vIHByb2Nlc3Mgcm90YXRlIGxlZnQvcmlnaHRcclxuICAgIGlmICghdGhpcy5fdG91Y2hTdGFydFN0YXRlLnJvdGF0ZSkgeyB0aGlzLl90b3VjaFN0YXJ0U3RhdGUucm90YXRlID0geyByb3RhdGlvbjogdmlld3BvcnQucm90YXRpb24sIHN0YXJ0Um90YXRlOiBldnQucm90YXRpb24gfTsgfVxyXG4gICAgaWYgKGV2dC5yb3RhdGlvbiAhPT0gMCkge1xyXG4gICAgICBjb25zdCBuZXdBbmdsZSA9IHRoaXMuX3RvdWNoU3RhcnRTdGF0ZS5yb3RhdGUucm90YXRpb24gKyBldnQucm90YXRpb24gLSB0aGlzLl90b3VjaFN0YXJ0U3RhdGUucm90YXRlLnN0YXJ0Um90YXRlO1xyXG4gICAgICB2aWV3cG9ydC5yb3RhdGlvbiA9IHRoaXMuY29uZmlnLnJvdGF0ZVN0ZXBwZXIgPyB0b1NxdWFyZUFuZ2xlKG5ld0FuZ2xlKSA6IG5ld0FuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gIH1cclxuICAvLyNlbmRyZWdpb25cclxuXHJcbiAgLy8jcmVnaW9uIE1vdXNlIEV2ZW50c1xyXG4gIHByaXZhdGUgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvLyB6b29taW5nXHJcbiAgICB0aGlzLl9saXN0ZW5EZXN0cm95TGlzdC5wdXNoKHRoaXMuX3JlbmRlcmVyLmxpc3Rlbih0aGlzLl9jYW52YXMsICdET01Nb3VzZVNjcm9sbCcsIChldnQpID0+IHRoaXMub25Nb3VzZVdoZWVsKGV2dCkpKTtcclxuICAgIHRoaXMuX2xpc3RlbkRlc3Ryb3lMaXN0LnB1c2godGhpcy5fcmVuZGVyZXIubGlzdGVuKHRoaXMuX2NhbnZhcywgJ21vdXNld2hlZWwnLCAoZXZ0KSA9PiB0aGlzLm9uTW91c2VXaGVlbChldnQpKSk7XHJcblxyXG4gICAgLy8gc2hvdyB0b29sdGlwIHdoZW4gbW91c2VvdmVyIGl0XHJcbiAgICB0aGlzLl9saXN0ZW5EZXN0cm95TGlzdC5wdXNoKHRoaXMuX3JlbmRlcmVyLmxpc3Rlbih0aGlzLl9jYW52YXMsICdtb3VzZW1vdmUnLCAoZXZ0KSA9PlxyXG4gICAgICB0aGlzLmNoZWNrVG9vbHRpcEFjdGl2YXRpb24odGhpcy5zY3JlZW5Ub0NhbnZhc0NlbnRyZSh7IHg6IGV2dC5jbGllbnRYLCB5OiBldnQuY2xpZW50WSB9KSlcclxuICAgICkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlV2hlZWwoZXZ0KSB7XHJcbiAgICBpZiAoIWV2dCkgeyBldnQgPSBldmVudDsgfVxyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAoZXZ0LmRldGFpbCA8IDAgfHwgZXZ0LndoZWVsRGVsdGEgPiAwKSB7IC8vIHVwIC0+IGxhcmdlclxyXG4gICAgICB0aGlzLnpvb21JbigpO1xyXG4gICAgfSBlbHNlIHsgLy8gZG93biAtPiBzbWFsbGVyXHJcbiAgICAgIHRoaXMuem9vbU91dCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja1Rvb2x0aXBBY3RpdmF0aW9uKHBvczogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9KSB7XHJcbiAgICB0aGlzLmdldFVJRWxlbWVudHMoKS5mb3JFYWNoKHggPT4geC5ob3ZlciA9IGZhbHNlKTtcclxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSB0aGlzLmdldFVJRWxlbWVudChwb3MpO1xyXG4gICAgY29uc3Qgb2xkVG9vbFRpcCA9IHRoaXMuX2N1cnJlbnRUb29sdGlwO1xyXG4gICAgaWYgKGFjdGl2ZUVsZW1lbnQgIT09IG51bGwpIHtcclxuICAgICAgaWYgKHR5cGVvZiBhY3RpdmVFbGVtZW50LmhvdmVyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuaG92ZXIgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgYWN0aXZlRWxlbWVudC50b29sdGlwICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRUb29sdGlwID0gYWN0aXZlRWxlbWVudC50b29sdGlwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAob2xkVG9vbFRpcCAhPT0gdGhpcy5fY3VycmVudFRvb2x0aXApIHsgdGhpcy5fZGlydHkgPSB0cnVlOyB9XHJcbiAgfVxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyNyZWdpb24gQnV0dG9uIEFjdGlvbnNcclxuXHJcbiAgcHJpdmF0ZSBuZXh0UGFnZSgpIHtcclxuICAgIGlmICghdGhpcy5fcmVzb3VyY2UpIHsgcmV0dXJuOyB9XHJcbiAgICBpZiAodGhpcy5fcmVzb3VyY2UuY3VycmVudEl0ZW0gPj0gdGhpcy5fcmVzb3VyY2UudG90YWxJdGVtKSB7IHJldHVybjsgfVxyXG4gICAgaWYgKHRoaXMuX3Jlc291cmNlLmN1cnJlbnRJdGVtIDwgMSkgeyB0aGlzLl9yZXNvdXJjZS5jdXJyZW50SXRlbSA9IDA7IH1cclxuICAgIHRoaXMuX3Jlc291cmNlLmN1cnJlbnRJdGVtKys7XHJcbiAgICB0aGlzLl9yZXNvdXJjZS5sb2FkUmVzb3VyY2UoKTtcclxuICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcHJldmlvdXNQYWdlKCkge1xyXG4gICAgaWYgKCF0aGlzLl9yZXNvdXJjZSkgeyByZXR1cm47IH1cclxuICAgIGlmICh0aGlzLl9yZXNvdXJjZS5jdXJyZW50SXRlbSA8PSAxKSB7IHJldHVybjsgfVxyXG4gICAgaWYgKHRoaXMuX3Jlc291cmNlLmN1cnJlbnRJdGVtID4gdGhpcy5fcmVzb3VyY2UudG90YWxJdGVtKSB7IHRoaXMuX3Jlc291cmNlLmN1cnJlbnRJdGVtID0gdGhpcy5fcmVzb3VyY2UudG90YWxJdGVtICsgMTsgfVxyXG4gICAgdGhpcy5fcmVzb3VyY2UuY3VycmVudEl0ZW0tLTtcclxuICAgIHRoaXMuX3Jlc291cmNlLmxvYWRSZXNvdXJjZSgpO1xyXG4gICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB6b29tSW4oKSB7XHJcbiAgICBpZiAoIXRoaXMuX3Jlc291cmNlKSB7IHJldHVybjsgfVxyXG4gICAgY29uc3QgbmV3U2NhbGUgPSB0aGlzLl9yZXNvdXJjZS52aWV3cG9ydC5zY2FsZSAqICgxICsgdGhpcy5jb25maWcuc2NhbGVTdGVwKTtcclxuICAgIHRoaXMuX3Jlc291cmNlLnZpZXdwb3J0LnNjYWxlID0gbmV3U2NhbGUgPiB0aGlzLl9yZXNvdXJjZS5tYXhTY2FsZSA/IHRoaXMuX3Jlc291cmNlLm1heFNjYWxlIDogbmV3U2NhbGU7XHJcbiAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHpvb21PdXQoKSB7XHJcbiAgICBpZiAoIXRoaXMuX3Jlc291cmNlKSB7IHJldHVybjsgfVxyXG4gICAgY29uc3QgbmV3U2NhbGUgPSB0aGlzLl9yZXNvdXJjZS52aWV3cG9ydC5zY2FsZSAqICgxIC0gdGhpcy5jb25maWcuc2NhbGVTdGVwKTtcclxuICAgIHRoaXMuX3Jlc291cmNlLnZpZXdwb3J0LnNjYWxlID0gbmV3U2NhbGUgPCB0aGlzLl9yZXNvdXJjZS5taW5TY2FsZSA/IHRoaXMuX3Jlc291cmNlLm1pblNjYWxlIDogbmV3U2NhbGU7XHJcbiAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJvdGF0ZUxlZnQoKSB7XHJcbiAgICBpZiAoIXRoaXMuX3Jlc291cmNlKSB7IHJldHVybjsgfVxyXG4gICAgY29uc3Qgdmlld3BvcnQgPSB0aGlzLl9yZXNvdXJjZS52aWV3cG9ydDtcclxuICAgIHZpZXdwb3J0LnJvdGF0aW9uID0gdmlld3BvcnQucm90YXRpb24gPT09IDAgPyAyNzAgOiB2aWV3cG9ydC5yb3RhdGlvbiAtIDkwO1xyXG4gICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByb3RhdGVSaWdodCgpIHtcclxuICAgIGlmICghdGhpcy5fcmVzb3VyY2UpIHsgcmV0dXJuOyB9XHJcbiAgICBjb25zdCB2aWV3cG9ydCA9IHRoaXMuX3Jlc291cmNlLnZpZXdwb3J0O1xyXG4gICAgdmlld3BvcnQucm90YXRpb24gPSB2aWV3cG9ydC5yb3RhdGlvbiA9PT0gMjcwID8gMCA6IHZpZXdwb3J0LnJvdGF0aW9uICsgOTA7XHJcbiAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlc2V0SW1hZ2UoKSB7XHJcbiAgICBpZiAoIXRoaXMuX3Jlc291cmNlKSB7IHJldHVybjsgfVxyXG4gICAgdGhpcy5fcmVzb3VyY2UucmVzZXRWaWV3cG9ydCh0aGlzLl9jYW52YXMpO1xyXG4gICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gIH1cclxuICAvLyNlbmRyZWdpb25cclxuXHJcbiAgLy8jcmVnaW9uIERyYXcgQ2FudmFzXHJcbiAgcHJpdmF0ZSB1cGRhdGVDYW52YXMoKSB7XHJcbiAgICB0aGlzLnJlc2V0SW1hZ2UoKTtcclxuXHJcbiAgICAvLyBzdGFydCBuZXcgcmVuZGVyIGxvb3BcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHZtID0gdGhpcztcclxuICAgIC8vIG9ubHkgcmUtcmVuZGVyIGlmIGRpcnR5XHJcbiAgICBpZiAodGhpcy5fZGlydHkgJiYgdGhpcy5fcmVzb3VyY2UpIHtcclxuICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcclxuXHJcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2NvbnRleHQ7XHJcbiAgICAgIGN0eC5zYXZlKCk7XHJcblxyXG4gICAgICB0aGlzLl9yZXNvdXJjZS5kcmF3KGN0eCwgdGhpcy5jb25maWcsIHRoaXMuX2NhbnZhcywgKCkgPT4ge1xyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgIGlmICh2bS5fcmVzb3VyY2UubG9hZGVkKSB7XHJcbiAgICAgICAgICAvLyBkcmF3IGJ1dHRvbnNcclxuICAgICAgICAgIHRoaXMuZHJhd0J1dHRvbnMoY3R4KTtcclxuXHJcbiAgICAgICAgICAvLyBkcmF3IHBhZ2luYXRvclxyXG4gICAgICAgICAgaWYgKHRoaXMuX3Jlc291cmNlLnNob3dJdGVtc1F1YW50aXR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1BhZ2luYXRvcihjdHgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5yZW5kZXIoKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRyYXdCdXR0b25zKGN0eCkge1xyXG4gICAgY29uc3QgcGFkZGluZyA9IHRoaXMuY29uZmlnLnRvb2x0aXBzLnBhZGRpbmc7XHJcbiAgICBjb25zdCByYWRpdXMgPSB0aGlzLmNvbmZpZy50b29sdGlwcy5yYWRpdXM7XHJcbiAgICBjb25zdCBnYXAgPSAyICogcmFkaXVzICsgcGFkZGluZztcclxuICAgIGNvbnN0IHggPSB0aGlzLl9jYW52YXMud2lkdGggLSByYWRpdXMgLSBwYWRkaW5nO1xyXG4gICAgY29uc3QgeSA9IHRoaXMuX2NhbnZhcy5oZWlnaHQgLSByYWRpdXMgLSBwYWRkaW5nO1xyXG5cclxuICAgIC8vIGRyYXcgYnV0dG9uc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9idXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMuX2J1dHRvbnNbaV0uZHJhdyhjdHgsIHgsIHkgLSBnYXAgKiBpLCByYWRpdXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRyYXcgdG9vbHRpcFxyXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRUb29sdGlwICE9PSBudWxsICYmIHRoaXMuX2NhbnZhcy53aWR0aCA+IE1JTl9UT09MVElQX1dJRFRIX1NQQUNFKSB7XHJcbiAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgIGNvbnN0IGZvbnRTaXplID0gcmFkaXVzO1xyXG4gICAgICBjdHguZm9udCA9IGZvbnRTaXplICsgJ3B4IHNhbnMtc2VyaWYnO1xyXG5cclxuICAgICAgLy8gY2FsY3VsYXRlIHBvc2l0aW9uXHJcbiAgICAgIGNvbnN0IHRleHRTaXplID0gY3R4Lm1lYXN1cmVUZXh0KHRoaXMuX2N1cnJlbnRUb29sdGlwKS53aWR0aFxyXG4gICAgICAgICwgcmVjdFdpZHRoID0gdGV4dFNpemUgKyBwYWRkaW5nXHJcbiAgICAgICAgLCByZWN0SGVpZ2h0ID0gZm9udFNpemUgKiAwLjcwICsgcGFkZGluZ1xyXG4gICAgICAgICwgcmVjdFggPSB0aGlzLl9jYW52YXMud2lkdGhcclxuICAgICAgICAgIC0gKDIgKiByYWRpdXMgKyAyICogcGFkZGluZykgLy8gYnV0dG9uc1xyXG4gICAgICAgICAgLSByZWN0V2lkdGhcclxuICAgICAgICAsIHJlY3RZID0gdGhpcy5fY2FudmFzLmhlaWdodCAtIHJlY3RIZWlnaHQgLSBwYWRkaW5nXHJcbiAgICAgICAgLCB0ZXh0WCA9IHJlY3RYICsgMC41ICogcGFkZGluZ1xyXG4gICAgICAgICwgdGV4dFkgPSB0aGlzLl9jYW52YXMuaGVpZ2h0IC0gMS41ICogcGFkZGluZztcclxuXHJcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY29uZmlnLnRvb2x0aXBzLmJnQWxwaGE7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbmZpZy50b29sdGlwcy5iZ1N0eWxlO1xyXG4gICAgICB0aGlzLmRyYXdSb3VuZFJlY3RhbmdsZShjdHgsIHJlY3RYLCByZWN0WSwgcmVjdFdpZHRoLCByZWN0SGVpZ2h0LCA4LCB0cnVlLCBmYWxzZSk7XHJcblxyXG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSB0aGlzLmNvbmZpZy50b29sdGlwcy50ZXh0QWxwaGE7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbmZpZy50b29sdGlwcy50ZXh0U3R5bGU7XHJcbiAgICAgIGN0eC5maWxsVGV4dCh0aGlzLl9jdXJyZW50VG9vbHRpcCwgdGV4dFgsIHRleHRZKTtcclxuXHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRyYXdQYWdpbmF0b3IoY3R4KSB7XHJcbiAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5jb25maWcudG9vbHRpcHMucGFkZGluZztcclxuICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMuY29uZmlnLnRvb2x0aXBzLnJhZGl1cztcclxuICAgIGNvbnN0IGxhYmVsV2lkdGggPSA1MDtcclxuICAgIGNvbnN0IHgxID0gKHRoaXMuX2NhbnZhcy53aWR0aCAtIGxhYmVsV2lkdGgpIC8gMiAtIHJhZGl1cyAtIHBhZGRpbmc7IC8vIFByZXZQYWdlQnV0dG9uXHJcbiAgICBjb25zdCB4MiA9IHRoaXMuX2NhbnZhcy53aWR0aCAvIDI7IC8vIExhYmVsXHJcbiAgICBjb25zdCB4MyA9ICh0aGlzLl9jYW52YXMud2lkdGggKyBsYWJlbFdpZHRoKSAvIDIgKyByYWRpdXMgKyBwYWRkaW5nOyAvLyBOZXh0UGFnZUJ1dHRvblxyXG4gICAgY29uc3QgeSA9IHRoaXMuX2NhbnZhcy5oZWlnaHQgLSByYWRpdXMgLSBwYWRkaW5nO1xyXG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLl9yZXNvdXJjZS5jdXJyZW50SXRlbSArICcvJyArIHRoaXMuX3Jlc291cmNlLnRvdGFsSXRlbTtcclxuICAgIGNvbnN0IGZvbnRTaXplID0gMjU7XHJcblxyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIHRoaXMuX2JlZm9yZVBhZ2VCdXR0b24uZHJhdyhjdHgsIHgxLCB5LCByYWRpdXMpO1xyXG4gICAgdGhpcy5fbmV4dFBhZ2VCdXR0b24uZHJhdyhjdHgsIHgzLCB5LCByYWRpdXMpO1xyXG4gICAgY3R4LnJlc3RvcmUoKTtcclxuXHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgY3R4LmZvbnQgPSBmb250U2l6ZSArICdweCBWZXJkYW5hJztcclxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIGN0eC5maWxsVGV4dChsYWJlbCwgeDIsIHRoaXMuX2NhbnZhcy5oZWlnaHQgLSBwYWRkaW5nIC0gZm9udFNpemUgLyAyLCBsYWJlbFdpZHRoKTtcclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRyYXdSb3VuZFJlY3RhbmdsZShjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cywgZmlsbCwgc3Ryb2tlKSB7XHJcbiAgICByYWRpdXMgPSAodHlwZW9mIHJhZGl1cyA9PT0gJ251bWJlcicpID8gcmFkaXVzIDogNTtcclxuICAgIGZpbGwgPSAodHlwZW9mIGZpbGwgPT09ICdib29sZWFuJykgPyBmaWxsIDogdHJ1ZTsgLy8gZmlsbCA9IGRlZmF1bHRcclxuICAgIHN0cm9rZSA9ICh0eXBlb2Ygc3Ryb2tlID09PSAnYm9vbGVhbicpID8gc3Ryb2tlIDogZmFsc2U7XHJcblxyXG4gICAgLy8gZHJhdyByb3VuZCByZWN0YW5nbGVcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oeCArIHJhZGl1cywgeSk7XHJcbiAgICBjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XHJcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJhZGl1cyk7XHJcbiAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XHJcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHJhZGl1cywgeSArIGhlaWdodCk7XHJcbiAgICBjdHgubGluZVRvKHggKyByYWRpdXMsIHkgKyBoZWlnaHQpO1xyXG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XHJcbiAgICBjdHgubGluZVRvKHgsIHkgKyByYWRpdXMpO1xyXG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cywgeSk7XHJcbiAgICBjdHguY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgaWYgKGZpbGwpIHsgY3R4LmZpbGwoKTsgfVxyXG4gICAgaWYgKHN0cm9rZSkgeyBjdHguc3Ryb2tlKCk7IH1cclxuICB9XHJcblxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyNyZWdpb24gVXRpbHNcclxuXHJcbiAgcHJpdmF0ZSBleHRlbmRzRGVmYXVsdENvbmZpZyhjZmc6IEltYWdlVmlld2VyQ29uZmlnKSB7XHJcbiAgICBjb25zdCBkZWZhdWx0Q2ZnID0gSU1BR0VWSUVXRVJfQ09ORklHX0RFRkFVTFQ7XHJcbiAgICBjb25zdCBsb2NhbENmZyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDZmcsIGNmZyk7XHJcbiAgICBpZiAoY2ZnLmJ1dHRvblN0eWxlKSB7IGxvY2FsQ2ZnLmJ1dHRvblN0eWxlID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q2ZnLmJ1dHRvblN0eWxlLCBjZmcuYnV0dG9uU3R5bGUpOyB9XHJcbiAgICBpZiAoY2ZnLnRvb2x0aXBzKSB7IGxvY2FsQ2ZnLnRvb2x0aXBzID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q2ZnLnRvb2x0aXBzLCBjZmcudG9vbHRpcHMpOyB9XHJcbiAgICBpZiAoY2ZnLm5leHRQYWdlQnV0dG9uKSB7IGxvY2FsQ2ZnLm5leHRQYWdlQnV0dG9uID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q2ZnLm5leHRQYWdlQnV0dG9uLCBjZmcubmV4dFBhZ2VCdXR0b24pOyB9XHJcbiAgICBpZiAoY2ZnLmJlZm9yZVBhZ2VCdXR0b24pIHsgbG9jYWxDZmcuYmVmb3JlUGFnZUJ1dHRvbiA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdENmZy5iZWZvcmVQYWdlQnV0dG9uLCBjZmcuYmVmb3JlUGFnZUJ1dHRvbik7IH1cclxuICAgIGlmIChjZmcuem9vbU91dEJ1dHRvbikgeyBsb2NhbENmZy56b29tT3V0QnV0dG9uID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q2ZnLnpvb21PdXRCdXR0b24sIGNmZy56b29tT3V0QnV0dG9uKTsgfVxyXG4gICAgaWYgKGNmZy56b29tT3V0QnV0dG9uKSB7IGxvY2FsQ2ZnLnpvb21PdXRCdXR0b24gPSBPYmplY3QuYXNzaWduKGRlZmF1bHRDZmcuem9vbU91dEJ1dHRvbiwgY2ZnLnpvb21PdXRCdXR0b24pOyB9XHJcbiAgICBpZiAoY2ZnLnpvb21JbkJ1dHRvbikgeyBsb2NhbENmZy56b29tSW5CdXR0b24gPSBPYmplY3QuYXNzaWduKGRlZmF1bHRDZmcuem9vbUluQnV0dG9uLCBjZmcuem9vbUluQnV0dG9uKTsgfVxyXG4gICAgaWYgKGNmZy5yb3RhdGVMZWZ0QnV0dG9uKSB7IGxvY2FsQ2ZnLnJvdGF0ZUxlZnRCdXR0b24gPSBPYmplY3QuYXNzaWduKGRlZmF1bHRDZmcucm90YXRlTGVmdEJ1dHRvbiwgY2ZnLnJvdGF0ZUxlZnRCdXR0b24pOyB9XHJcbiAgICBpZiAoY2ZnLnJvdGF0ZVJpZ2h0QnV0dG9uKSB7IGxvY2FsQ2ZnLnJvdGF0ZVJpZ2h0QnV0dG9uID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q2ZnLnJvdGF0ZVJpZ2h0QnV0dG9uLCBjZmcucm90YXRlUmlnaHRCdXR0b24pOyB9XHJcbiAgICBpZiAoY2ZnLnJlc2V0QnV0dG9uKSB7IGxvY2FsQ2ZnLnJlc2V0QnV0dG9uID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q2ZnLnJlc2V0QnV0dG9uLCBjZmcucmVzZXRCdXR0b24pOyB9XHJcbiAgICByZXR1cm4gbG9jYWxDZmc7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNjcmVlblRvQ2FudmFzQ2VudHJlKHBvczogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9KSB7XHJcbiAgICBjb25zdCByZWN0ID0gdGhpcy5fY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgcmV0dXJuIHsgeDogcG9zLnggLSByZWN0LmxlZnQsIHk6IHBvcy55IC0gcmVjdC50b3AgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VUlFbGVtZW50cygpOiBCdXR0b25bXSB7XHJcbiAgICBjb25zdCBob3ZlckVsZW1lbnRzID0gdGhpcy5fYnV0dG9ucy5zbGljZSgpO1xyXG4gICAgaG92ZXJFbGVtZW50cy5wdXNoKHRoaXMuX25leHRQYWdlQnV0dG9uKTtcclxuICAgIGhvdmVyRWxlbWVudHMucHVzaCh0aGlzLl9iZWZvcmVQYWdlQnV0dG9uKTtcclxuICAgIHJldHVybiBob3ZlckVsZW1lbnRzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRVSUVsZW1lbnQocG9zOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0pIHtcclxuICAgIGNvbnN0IGFjdGl2ZVVJRWxlbWVudCA9IHRoaXMuZ2V0VUlFbGVtZW50cygpLmZpbHRlcigodWlFbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiB1aUVsZW1lbnQuaXNXaXRoaW5Cb3VuZHMocG9zLngsIHBvcy55KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIChhY3RpdmVVSUVsZW1lbnQubGVuZ3RoID4gMCkgPyBhY3RpdmVVSUVsZW1lbnRbMF0gOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc0ltYWdlKGZpbGU6IHN0cmluZyB8IEZpbGUpIHtcclxuICAgIGlmICh0aGlzLl9maWxldHlwZSAmJiB0aGlzLl9maWxldHlwZS50b0xvd2VyQ2FzZSgpID09PSAnaW1hZ2UnKSB7IHJldHVybiB0cnVlOyB9XHJcbiAgICByZXR1cm4gdGVzdEZpbGUoZmlsZSwgJ1xcXFwuKHBuZ3xqcGd8anBlZ3xnaWYpfGltYWdlL3BuZycpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc1BkZihmaWxlOiBzdHJpbmcgfCBGaWxlKSB7XHJcbiAgICBpZiAodGhpcy5fZmlsZXR5cGUgJiYgdGhpcy5fZmlsZXR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3BkZicpIHsgcmV0dXJuIHRydWU7IH1cclxuICAgIHJldHVybiB0ZXN0RmlsZShmaWxlLCAnXFxcXC4ocGRmKXxhcHBsaWNhdGlvbi9wZGYnKTtcclxuICB9XHJcbiAgLy8jZW5kcmVnaW9uXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRlc3RGaWxlKGZpbGU6IHN0cmluZyB8IEZpbGUsIHJlZ2V4VGVzdDogc3RyaW5nKSB7XHJcbiAgaWYgKCFmaWxlKSB7IHJldHVybiBmYWxzZTsgfVxyXG4gIGNvbnN0IG5hbWUgPSBmaWxlIGluc3RhbmNlb2YgRmlsZSA/IGZpbGUubmFtZSA6IGZpbGU7XHJcbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKS5tYXRjaChyZWdleFRlc3QpICE9PSBudWxsO1xyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEltYWdlVmlld2VyQ29tcG9uZW50IH0gZnJvbSAnLi9pbWFnZXZpZXdlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBJTUFHRVZJRVdFUl9DT05GSUcsIElNQUdFVklFV0VSX0NPTkZJR19ERUZBVUxUIH0gZnJvbSAnLi9pbWFnZXZpZXdlci5jb25maWcnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IElNQUdFVklFV0VSX0NPTkZJRywgdXNlVmFsdWU6IElNQUdFVklFV0VSX0NPTkZJR19ERUZBVUxUIH1dLFxyXG4gIGRlY2xhcmF0aW9uczogW0ltYWdlVmlld2VyQ29tcG9uZW50XSxcclxuICBleHBvcnRzOiBbSW1hZ2VWaWV3ZXJDb21wb25lbnRdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW1hZ2VWaWV3ZXJNb2R1bGUgeyB9XHJcbiJdfQ==