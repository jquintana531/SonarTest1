/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function CacheDef() { }
function CacheDef_tsickle_Closure_declarations() {
    /** @type {?} */
    CacheDef.prototype.url;
    /** @type {?} */
    CacheDef.prototype.page;
    /** @type {?} */
    CacheDef.prototype.image;
}
export class ImageCacheService {
    constructor() {
        this._cache = [];
    }
    /**
     * @return {?}
     */
    get cache() {
        return this._cache;
    }
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    getCache(url, page) {
        return this.cache.find(i => i.url === url && i.page === page);
    }
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    getImage(url, page) {
        const /** @type {?} */ c = this.getCache(url, page);
        return c ? c.image : null;
    }
    /**
     * @param {?} url
     * @param {?} page
     * @param {?} image
     * @return {?}
     */
    saveImage(url, page, image) {
        const /** @type {?} */ cache = this.getCache(url, page);
        if (cache) {
            cache.image = image;
        }
        else {
            this.cache.push({ url, page, image });
        }
    }
    /**
     * @return {?}
     */
    disposeCache() {
        this.cache.forEach(i => URL.revokeObjectURL(i.image.src));
        this._cache = [];
    }
}
ImageCacheService.ɵfac = function ImageCacheService_Factory(t) { return new (t || ImageCacheService)(); };
ImageCacheService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImageCacheService, factory: ImageCacheService.ɵfac, providedIn: 'root' });
/** @nocollapse */
ImageCacheService.ctorParameters = () => [];
/** @nocollapse */ ImageCacheService.ngInjectableDef = i0.defineInjectable({ factory: function ImageCacheService_Factory() { return new ImageCacheService(); }, token: ImageCacheService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageCacheService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
function ImageCacheService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageCacheService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageCacheService.ctorParameters;
    /** @type {?} */
    ImageCacheService.prototype._cache;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VjYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJAaGFsbHlzb25oL25neC1pbWFnZXZpZXdlci9saWIvaW1hZ2VjYWNoZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDO0FBRU87QUFBSztBQUNKOztBQUFLO0FBSUw7QUFDZTtBQUVkO0FBRVQ7QUFFQTtBQUNDO0FBQXNCO0FBR0Q7QUFWdEIsTUFBTTtBQUNOLElBR0U7QUFBaUIsc0JBRlksRUFBRTtBQUNqQyxLQUNrQjtBQUNsQjtBQUNPO0FBQW9CO0FBQ3BCLElBREwsSUFBSSxLQUFLO0FBQU0sUUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QixLQUFHO0FBQ0g7QUFDTztBQUF1QjtBQUNqQjtBQUFvQjtBQUFTLElBRHhDLFFBQVEsQ0FBQyxHQUFXLEVBQUUsSUFBWTtBQUNwQyxRQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7QUFDbEUsS0FBRztBQUNIO0FBQ087QUFBdUI7QUFDakI7QUFBb0I7QUFDaEMsSUFGQyxRQUFRLENBQUMsR0FBVyxFQUFFLElBQVk7QUFDcEMsUUFBSSx1QkFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkMsUUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDOUIsS0FBRztBQUNIO0FBQ087QUFBdUI7QUFDOUI7QUFBeUI7QUFDekI7QUFBUyxJQUZQLFNBQVMsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEtBQVU7QUFDakQsUUFBSSx1QkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0MsUUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFlBQU0sS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDMUIsU0FBSztBQUFFLFFBQUQsSUFBSSxDQUFDLENBQUM7QUFDWixZQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLFNBQUs7QUFDTCxLQUFHO0FBQ0g7QUFDTztBQUNBO0FBQVMsSUFEZCxZQUFZO0FBQ2QsUUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlELFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDckIsS0FBRztBQUNIOytDQWpDQyxVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFO3FKQUM1QjtBQUFFO0FBQW9CO0FBSTVCOzs7O2dEQVVTO0FBQUU7QUFDb0I7QUFJTDtBQUNuQjtBQUFTO0FBQW9CO0FBUWhDO0FBQVM7QUFDbUI7QUFBc0I7OztBQXRDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBU0EsQUFBQSxBQUlBLEFBRkEsQUFBQSxBQUVBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBaENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlRGVmIHtcclxuICB1cmw6IHN0cmluZztcclxuICBwYWdlOiBudW1iZXI7XHJcbiAgaW1hZ2U6IGFueTtcclxufVxyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIEltYWdlQ2FjaGVTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBfY2FjaGU6IENhY2hlRGVmW10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBnZXQgY2FjaGUoKTogQ2FjaGVEZWZbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY2FjaGU7XHJcbiAgfVxyXG5cclxuICBnZXRDYWNoZSh1cmw6IHN0cmluZywgcGFnZTogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5maW5kKGkgPT4gaS51cmwgPT09IHVybCAmJiBpLnBhZ2UgPT09IHBhZ2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW1hZ2UodXJsOiBzdHJpbmcsIHBhZ2U6IG51bWJlcikge1xyXG4gICAgY29uc3QgYyA9IHRoaXMuZ2V0Q2FjaGUodXJsLCBwYWdlKTtcclxuICAgIHJldHVybiBjID8gYy5pbWFnZSA6IG51bGw7XHJcbiAgfVxyXG5cclxuICBzYXZlSW1hZ2UodXJsOiBzdHJpbmcsIHBhZ2U6IG51bWJlciwgaW1hZ2U6IGFueSkge1xyXG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLmdldENhY2hlKHVybCwgcGFnZSk7XHJcbiAgICBpZiAoY2FjaGUpIHtcclxuICAgICAgY2FjaGUuaW1hZ2UgPSBpbWFnZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2FjaGUucHVzaCh7IHVybCwgcGFnZSwgaW1hZ2UgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlQ2FjaGUoKSB7XHJcbiAgICB0aGlzLmNhY2hlLmZvckVhY2goaSA9PiBVUkwucmV2b2tlT2JqZWN0VVJMKGkuaW1hZ2Uuc3JjKSk7XHJcbiAgICB0aGlzLl9jYWNoZSA9IFtdO1xyXG4gIH1cclxufVxyXG4iXX0=