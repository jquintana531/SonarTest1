/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, ViewChild, Renderer2, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ImageViewerConfig, IMAGEVIEWER_CONFIG, IMAGEVIEWER_CONFIG_DEFAULT } from './imageviewer.config';
import { Button, toSquareAngle } from './imageviewer.model';
import { ImageResourceLoader } from './image.loader';
import { ImageCacheService } from './imagecache.service';
import { PdfResourceLoader } from './pdf.loader';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from './imagecache.service';
import * as ɵngcc3 from './imageviewer.config';

var _c0 = ["imageContainer"];
var /** @type {?} */ MIN_TOOLTIP_WIDTH_SPACE = 500;
var ImageViewerComponent = /** @class */ (function () {
    //#endregion
    //#region Lifecycle events
    function ImageViewerComponent(_sanitizer, _renderer, _imageCache, config) {
        this._sanitizer = _sanitizer;
        this._renderer = _renderer;
        this._imageCache = _imageCache;
        this.config = config;
        this._dirty = true;
        this._buttons = [];
        this._currentTooltip = null;
        this._touchStartState = {};
        this._listenDestroyList = [];
        this.config = this.extendsDefaultConfig(config);
        this._nextPageButton = new Button(this.config.nextPageButton, this.config.buttonStyle);
        this._beforePageButton = new Button(this.config.beforePageButton, this.config.buttonStyle);
        this._zoomOutButton = new Button(this.config.zoomOutButton, this.config.buttonStyle);
        this._zoomInButton = new Button(this.config.zoomInButton, this.config.buttonStyle);
        this._rotateLeftButton = new Button(this.config.rotateLeftButton, this.config.buttonStyle);
        this._rotateRightButton = new Button(this.config.rotateRightButton, this.config.buttonStyle);
        this._resetButton = new Button(this.config.resetButton, this.config.buttonStyle);
        this._buttons = [
            this._zoomOutButton,
            this._zoomInButton,
            this._rotateLeftButton,
            this._rotateRightButton,
            this._resetButton
        ].filter(function (item) { return item.display; })
            .sort(function (a, b) { return a.sortId - b.sortId; });
    }
    Object.defineProperty(ImageViewerComponent.prototype, "src", {
        get: /**
         * @return {?}
         */
        function () { return this._src; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === this._src) {
                return;
            }
            this._src = value;
            this.setUpResource();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageViewerComponent.prototype, "filetype", {
        get: /**
         * @return {?}
         */
        function () { return this._filetype; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === this._filetype) {
                return;
            }
            this._filetype = value;
            this.setUpResource();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageViewerComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () { return this._width; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === this._width) {
                return;
            }
            this._width = value;
            if (this._canvas) {
                this._canvas.width = this._width;
            }
            this.resetImage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageViewerComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () { return this._height; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === this._height) {
                return;
            }
            this._height = value;
            if (this._canvas) {
                this._canvas.height = this._height;
            }
            this.resetImage();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._canvas = this.canvasRef.nativeElement;
        this._context = this._canvas.getContext('2d');
        // setting canvas dimention
        this._canvas.width = this.width || this.config.width;
        this._canvas.height = this.height || this.config.height;
        // setting buttons actions
        this._nextPageButton.onClick = function (evt) { _this.nextPage(); return false; };
        this._beforePageButton.onClick = function (evt) { _this.previousPage(); return false; };
        this._zoomOutButton.onClick = function (evt) { _this.zoomOut(); return false; };
        this._zoomInButton.onClick = function (evt) { _this.zoomIn(); return false; };
        this._rotateLeftButton.onClick = function (evt) { _this.rotateLeft(); return false; };
        this._rotateRightButton.onClick = function (evt) { _this.rotateRight(); return false; };
        this._resetButton.onClick = function (evt) { _this.resetImage(); return false; };
        // register event listeners
        this.addEventListeners();
        this.updateCanvas();
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // unregiste event listeners
        this._listenDestroyList.forEach(function (listenDestroy) {
            if (typeof listenDestroy === 'function') {
                listenDestroy();
            }
        });
        this._imageCache.disposeCache();
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.setUpResource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isImage(this.src) && (!this._resource || !(this._resource instanceof ImageResourceLoader))) {
            if (this._resourceChangeSub) {
                this._resourceChangeSub.unsubscribe();
            }
            if (!this._imageResource) {
                this._imageResource = new ImageResourceLoader();
            }
            this._resource = this._imageResource;
        }
        else if (this.isPdf(this.src) && (!this._resource || !(this._resource instanceof PdfResourceLoader))) {
            if (this._resourceChangeSub) {
                this._resourceChangeSub.unsubscribe();
            }
            if (!this._pdfResource) {
                this._pdfResource = new PdfResourceLoader(this._imageCache);
            }
            this._resource = this._pdfResource;
        }
        if (this._resource) {
            this._resource.src = this.src instanceof File ? URL.createObjectURL(this.src) : this.src;
            this._resourceChangeSub = this._resource.onResourceChange().subscribe(function () {
                _this.updateCanvas();
                if (_this.src instanceof File) {
                    URL.revokeObjectURL(_this._resource.src);
                }
            });
            this._resource.setUp();
            this.resetImage();
            if (this._context) {
                this.updateCanvas();
            }
        }
    };
    //#endregion
    //#region Touch events
    /**
     * @param {?} evt
     * @return {?}
     */
    ImageViewerComponent.prototype.onTap = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        var /** @type {?} */ activeElement = this.getUIElement(this.screenToCanvasCentre(evt.center));
        if (activeElement !== null) {
            activeElement.onClick(evt);
        }
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.onTouchEnd = /**
     * @return {?}
     */
    function () {
        this._touchStartState.viewport = undefined;
        this._touchStartState.scale = undefined;
        this._touchStartState.rotate = undefined;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    ImageViewerComponent.prototype.processTouchEvent = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        // process pan
        if (!this._touchStartState.viewport) {
            this._touchStartState.viewport = Object.assign({}, this._resource.viewport);
        }
        var /** @type {?} */ viewport = this._resource.viewport;
        viewport.x = this._touchStartState.viewport.x + evt.deltaX;
        viewport.y = this._touchStartState.viewport.y + evt.deltaY;
        // process pinch in/out
        if (!this._touchStartState.scale) {
            this._touchStartState.scale = this._resource.viewport.scale;
        }
        var /** @type {?} */ newScale = this._touchStartState.scale * evt.scale;
        viewport.scale = newScale > this._resource.maxScale ? this._resource.maxScale :
            newScale < this._resource.minScale ? this._resource.minScale : newScale;
        // process rotate left/right
        if (!this._touchStartState.rotate) {
            this._touchStartState.rotate = { rotation: viewport.rotation, startRotate: evt.rotation };
        }
        if (evt.rotation !== 0) {
            var /** @type {?} */ newAngle = this._touchStartState.rotate.rotation + evt.rotation - this._touchStartState.rotate.startRotate;
            viewport.rotation = this.config.rotateStepper ? toSquareAngle(newAngle) : newAngle;
        }
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.addEventListeners = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // zooming
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'DOMMouseScroll', function (evt) { return _this.onMouseWheel(evt); }));
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'mousewheel', function (evt) { return _this.onMouseWheel(evt); }));
        // show tooltip when mouseover it
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'mousemove', function (evt) {
            return _this.checkTooltipActivation(_this.screenToCanvasCentre({ x: evt.clientX, y: evt.clientY }));
        }));
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    ImageViewerComponent.prototype.onMouseWheel = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (!evt) {
            evt = event;
        }
        evt.preventDefault();
        if (evt.detail < 0 || evt.wheelDelta > 0) {
            // up -> larger
            this.zoomIn();
        }
        else {
            // down -> smaller
            this.zoomOut();
        }
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    ImageViewerComponent.prototype.checkTooltipActivation = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.getUIElements().forEach(function (x) { return x.hover = false; });
        var /** @type {?} */ activeElement = this.getUIElement(pos);
        var /** @type {?} */ oldToolTip = this._currentTooltip;
        if (activeElement !== null) {
            if (typeof activeElement.hover !== 'undefined') {
                activeElement.hover = true;
            }
            if (typeof activeElement.tooltip !== 'undefined') {
                this._currentTooltip = activeElement.tooltip;
            }
        }
        if (oldToolTip !== this._currentTooltip) {
            this._dirty = true;
        }
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        if (!this._resource) {
            return;
        }
        if (this._resource.currentItem >= this._resource.totalItem) {
            return;
        }
        if (this._resource.currentItem < 1) {
            this._resource.currentItem = 0;
        }
        this._resource.currentItem++;
        this._resource.loadResource();
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.previousPage = /**
     * @return {?}
     */
    function () {
        if (!this._resource) {
            return;
        }
        if (this._resource.currentItem <= 1) {
            return;
        }
        if (this._resource.currentItem > this._resource.totalItem) {
            this._resource.currentItem = this._resource.totalItem + 1;
        }
        this._resource.currentItem--;
        this._resource.loadResource();
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.zoomIn = /**
     * @return {?}
     */
    function () {
        if (!this._resource) {
            return;
        }
        var /** @type {?} */ newScale = this._resource.viewport.scale * (1 + this.config.scaleStep);
        this._resource.viewport.scale = newScale > this._resource.maxScale ? this._resource.maxScale : newScale;
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.zoomOut = /**
     * @return {?}
     */
    function () {
        if (!this._resource) {
            return;
        }
        var /** @type {?} */ newScale = this._resource.viewport.scale * (1 - this.config.scaleStep);
        this._resource.viewport.scale = newScale < this._resource.minScale ? this._resource.minScale : newScale;
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.rotateLeft = /**
     * @return {?}
     */
    function () {
        if (!this._resource) {
            return;
        }
        var /** @type {?} */ viewport = this._resource.viewport;
        viewport.rotation = viewport.rotation === 0 ? 270 : viewport.rotation - 90;
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.rotateRight = /**
     * @return {?}
     */
    function () {
        if (!this._resource) {
            return;
        }
        var /** @type {?} */ viewport = this._resource.viewport;
        viewport.rotation = viewport.rotation === 270 ? 0 : viewport.rotation + 90;
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.resetImage = /**
     * @return {?}
     */
    function () {
        if (!this._resource) {
            return;
        }
        this._resource.resetViewport(this._canvas);
        this._dirty = true;
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.updateCanvas = /**
     * @return {?}
     */
    function () {
        this.resetImage();
        // start new render loop
        this.render();
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.render = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ vm = this;
        // only re-render if dirty
        if (this._dirty && this._resource) {
            this._dirty = false;
            var /** @type {?} */ ctx_1 = this._context;
            ctx_1.save();
            this._resource.draw(ctx_1, this.config, this._canvas, function () {
                ctx_1.restore();
                if (vm._resource.loaded) {
                    // draw buttons
                    // draw buttons
                    _this.drawButtons(ctx_1);
                    // draw paginator
                    if (_this._resource.showItemsQuantity) {
                        _this.drawPaginator(ctx_1);
                    }
                }
            });
        }
        requestAnimationFrame(function () { return _this.render(); });
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    ImageViewerComponent.prototype.drawButtons = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var /** @type {?} */ padding = this.config.tooltips.padding;
        var /** @type {?} */ radius = this.config.tooltips.radius;
        var /** @type {?} */ gap = 2 * radius + padding;
        var /** @type {?} */ x = this._canvas.width - radius - padding;
        var /** @type {?} */ y = this._canvas.height - radius - padding;
        // draw buttons
        for (var /** @type {?} */ i = 0; i < this._buttons.length; i++) {
            this._buttons[i].draw(ctx, x, y - gap * i, radius);
        }
        // draw tooltip
        if (this._currentTooltip !== null && this._canvas.width > MIN_TOOLTIP_WIDTH_SPACE) {
            ctx.save();
            var /** @type {?} */ fontSize = radius;
            ctx.font = fontSize + 'px sans-serif';
            // calculate position
            var /** @type {?} */ textSize = ctx.measureText(this._currentTooltip).width, /** @type {?} */ rectWidth = textSize + padding, /** @type {?} */ rectHeight = fontSize * 0.70 + padding, /** @type {?} */ rectX = this._canvas.width
                - (2 * radius + 2 * padding) // buttons
                - rectWidth, /** @type {?} */ rectY = this._canvas.height - rectHeight - padding, /** @type {?} */ textX = rectX + 0.5 * padding, /** @type {?} */ textY = this._canvas.height - 1.5 * padding;
            ctx.globalAlpha = this.config.tooltips.bgAlpha;
            ctx.fillStyle = this.config.tooltips.bgStyle;
            this.drawRoundRectangle(ctx, rectX, rectY, rectWidth, rectHeight, 8, true, false);
            ctx.globalAlpha = this.config.tooltips.textAlpha;
            ctx.fillStyle = this.config.tooltips.textStyle;
            ctx.fillText(this._currentTooltip, textX, textY);
            ctx.restore();
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    ImageViewerComponent.prototype.drawPaginator = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var /** @type {?} */ padding = this.config.tooltips.padding;
        var /** @type {?} */ radius = this.config.tooltips.radius;
        var /** @type {?} */ labelWidth = 50;
        var /** @type {?} */ x1 = (this._canvas.width - labelWidth) / 2 - radius - padding; // PrevPageButton
        var /** @type {?} */ x2 = this._canvas.width / 2; // Label
        var /** @type {?} */ x3 = (this._canvas.width + labelWidth) / 2 + radius + padding; // NextPageButton
        var /** @type {?} */ y = this._canvas.height - radius - padding;
        var /** @type {?} */ label = this._resource.currentItem + '/' + this._resource.totalItem;
        var /** @type {?} */ fontSize = 25;
        ctx.save();
        this._beforePageButton.draw(ctx, x1, y, radius);
        this._nextPageButton.draw(ctx, x3, y, radius);
        ctx.restore();
        ctx.save();
        ctx.font = fontSize + 'px Verdana';
        ctx.textAlign = 'center';
        ctx.fillText(label, x2, this._canvas.height - padding - fontSize / 2, labelWidth);
        ctx.restore();
    };
    /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?} radius
     * @param {?} fill
     * @param {?} stroke
     * @return {?}
     */
    ImageViewerComponent.prototype.drawRoundRectangle = /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?} radius
     * @param {?} fill
     * @param {?} stroke
     * @return {?}
     */
    function (ctx, x, y, width, height, radius, fill, stroke) {
        radius = (typeof radius === 'number') ? radius : 5;
        fill = (typeof fill === 'boolean') ? fill : true; // fill = default
        stroke = (typeof stroke === 'boolean') ? stroke : false;
        // draw round rectangle
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        if (fill) {
            ctx.fill();
        }
        if (stroke) {
            ctx.stroke();
        }
    };
    /**
     * @param {?} cfg
     * @return {?}
     */
    ImageViewerComponent.prototype.extendsDefaultConfig = /**
     * @param {?} cfg
     * @return {?}
     */
    function (cfg) {
        var /** @type {?} */ defaultCfg = IMAGEVIEWER_CONFIG_DEFAULT;
        var /** @type {?} */ localCfg = Object.assign({}, defaultCfg, cfg);
        if (cfg.buttonStyle) {
            localCfg.buttonStyle = Object.assign(defaultCfg.buttonStyle, cfg.buttonStyle);
        }
        if (cfg.tooltips) {
            localCfg.tooltips = Object.assign(defaultCfg.tooltips, cfg.tooltips);
        }
        if (cfg.nextPageButton) {
            localCfg.nextPageButton = Object.assign(defaultCfg.nextPageButton, cfg.nextPageButton);
        }
        if (cfg.beforePageButton) {
            localCfg.beforePageButton = Object.assign(defaultCfg.beforePageButton, cfg.beforePageButton);
        }
        if (cfg.zoomOutButton) {
            localCfg.zoomOutButton = Object.assign(defaultCfg.zoomOutButton, cfg.zoomOutButton);
        }
        if (cfg.zoomOutButton) {
            localCfg.zoomOutButton = Object.assign(defaultCfg.zoomOutButton, cfg.zoomOutButton);
        }
        if (cfg.zoomInButton) {
            localCfg.zoomInButton = Object.assign(defaultCfg.zoomInButton, cfg.zoomInButton);
        }
        if (cfg.rotateLeftButton) {
            localCfg.rotateLeftButton = Object.assign(defaultCfg.rotateLeftButton, cfg.rotateLeftButton);
        }
        if (cfg.rotateRightButton) {
            localCfg.rotateRightButton = Object.assign(defaultCfg.rotateRightButton, cfg.rotateRightButton);
        }
        if (cfg.resetButton) {
            localCfg.resetButton = Object.assign(defaultCfg.resetButton, cfg.resetButton);
        }
        return localCfg;
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    ImageViewerComponent.prototype.screenToCanvasCentre = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        var /** @type {?} */ rect = this._canvas.getBoundingClientRect();
        return { x: pos.x - rect.left, y: pos.y - rect.top };
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.getUIElements = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ hoverElements = this._buttons.slice();
        hoverElements.push(this._nextPageButton);
        hoverElements.push(this._beforePageButton);
        return hoverElements;
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    ImageViewerComponent.prototype.getUIElement = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        var /** @type {?} */ activeUIElement = this.getUIElements().filter(function (uiElement) {
            return uiElement.isWithinBounds(pos.x, pos.y);
        });
        return (activeUIElement.length > 0) ? activeUIElement[0] : null;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ImageViewerComponent.prototype.isImage = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (this._filetype && this._filetype.toLowerCase() === 'image') {
            return true;
        }
        return testFile(file, '\\.(png|jpg|jpeg|gif)|image/png');
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ImageViewerComponent.prototype.isPdf = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (this._filetype && this._filetype.toLowerCase() === 'pdf') {
            return true;
        }
        return testFile(file, '\\.(pdf)|application/pdf');
    };
    //#endregion
    /** @nocollapse */
    ImageViewerComponent.ctorParameters = function () { return [
        { type: DomSanitizer, },
        { type: Renderer2, },
        { type: ImageCacheService, },
        { type: ImageViewerConfig, decorators: [{ type: Inject, args: [IMAGEVIEWER_CONFIG,] },] },
    ]; };
    ImageViewerComponent.propDecorators = {
        "src": [{ type: Input, args: ['src',] },],
        "filetype": [{ type: Input, args: ['filetype',] },],
        "width": [{ type: Input, args: ['width',] },],
        "height": [{ type: Input, args: ['height',] },],
        "canvasRef": [{ type: ViewChild, args: ['imageContainer',] },],
    };
ImageViewerComponent.ɵfac = function ImageViewerComponent_Factory(t) { return new (t || ImageViewerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ImageCacheService), ɵngcc0.ɵɵdirectiveInject(IMAGEVIEWER_CONFIG)); };
ImageViewerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ImageViewerComponent, selectors: [["ngx-imageviewer"]], viewQuery: function ImageViewerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);
    } }, inputs: { src: "src", filetype: "filetype", width: "width", height: "height" }, decls: 2, vars: 2, consts: [[3, "width", "height", "tap", "pinchin", "pinchout", "panmove", "panend", "rotatemove", "rotateend"], ["imageContainer", ""]], template: function ImageViewerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "canvas", 0, 1);
        ɵngcc0.ɵɵlistener("tap", function ImageViewerComponent_Template_canvas_tap_0_listener($event) { return ctx.onTap($event); })("pinchin", function ImageViewerComponent_Template_canvas_pinchin_0_listener($event) { return ctx.processTouchEvent($event); })("pinchout", function ImageViewerComponent_Template_canvas_pinchout_0_listener($event) { return ctx.processTouchEvent($event); })("panmove", function ImageViewerComponent_Template_canvas_panmove_0_listener($event) { return ctx.processTouchEvent($event); })("panend", function ImageViewerComponent_Template_canvas_panend_0_listener() { return ctx.onTouchEnd(); })("rotatemove", function ImageViewerComponent_Template_canvas_rotatemove_0_listener($event) { return ctx.processTouchEvent($event); })("rotateend", function ImageViewerComponent_Template_canvas_rotateend_0_listener() { return ctx.onTouchEnd(); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("width", ctx.width)("height", ctx.height);
    } }, styles: ["[_nghost-%COMP%] { display: block }\n    [_nghost-%COMP%]   canvas[_ngcontent-%COMP%] { margin: 0 auto; display: block }\n    [hidden][_ngcontent-%COMP%] { display: none !important }"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageViewerComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-imageviewer',
                template: "\n    <canvas #imageContainer [width]=\"width\" [height]=\"height\"\n      (tap)=\"onTap($event)\" (pinchin)=\"processTouchEvent($event)\" (pinchout)=\"processTouchEvent($event)\"\n      (panmove)=\"processTouchEvent($event)\" (panend)=\"onTouchEnd()\" (rotatemove)=\"processTouchEvent($event)\"\n        (rotateend)=\"onTouchEnd()\">\n    </canvas>\n  ",
                styles: ["\n    :host { display: block }\n    :host canvas { margin: 0 auto; display: block }\n    [hidden] { display: none !important }\n  "]
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.ImageCacheService }, { type: ɵngcc3.ImageViewerConfig, decorators: [{
                type: Inject,
                args: [IMAGEVIEWER_CONFIG]
            }] }]; }, { src: [{
            type: Input,
            args: ['src']
        }], filetype: [{
            type: Input,
            args: ['filetype']
        }], width: [{
            type: Input,
            args: ['width']
        }], height: [{
            type: Input,
            args: ['height']
        }], canvasRef: [{
            type: ViewChild,
            args: ['imageContainer']
        }] }); })();
    return ImageViewerComponent;
}());
export { ImageViewerComponent };
function ImageViewerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageViewerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageViewerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ImageViewerComponent.propDecorators;
    /** @type {?} */
    ImageViewerComponent.prototype._src;
    /** @type {?} */
    ImageViewerComponent.prototype._filetype;
    /** @type {?} */
    ImageViewerComponent.prototype._width;
    /** @type {?} */
    ImageViewerComponent.prototype._height;
    /** @type {?} */
    ImageViewerComponent.prototype.canvasRef;
    /** @type {?} */
    ImageViewerComponent.prototype._canvas;
    /** @type {?} */
    ImageViewerComponent.prototype._context;
    /** @type {?} */
    ImageViewerComponent.prototype._dirty;
    /** @type {?} */
    ImageViewerComponent.prototype._nextPageButton;
    /** @type {?} */
    ImageViewerComponent.prototype._beforePageButton;
    /** @type {?} */
    ImageViewerComponent.prototype._zoomOutButton;
    /** @type {?} */
    ImageViewerComponent.prototype._zoomInButton;
    /** @type {?} */
    ImageViewerComponent.prototype._rotateLeftButton;
    /** @type {?} */
    ImageViewerComponent.prototype._rotateRightButton;
    /** @type {?} */
    ImageViewerComponent.prototype._resetButton;
    /** @type {?} */
    ImageViewerComponent.prototype._buttons;
    /** @type {?} */
    ImageViewerComponent.prototype._currentTooltip;
    /** @type {?} */
    ImageViewerComponent.prototype._touchStartState;
    /** @type {?} */
    ImageViewerComponent.prototype._listenDestroyList;
    /** @type {?} */
    ImageViewerComponent.prototype._resource;
    /** @type {?} */
    ImageViewerComponent.prototype._resourceChangeSub;
    /** @type {?} */
    ImageViewerComponent.prototype._imageResource;
    /** @type {?} */
    ImageViewerComponent.prototype._pdfResource;
    /** @type {?} */
    ImageViewerComponent.prototype._sanitizer;
    /** @type {?} */
    ImageViewerComponent.prototype._renderer;
    /** @type {?} */
    ImageViewerComponent.prototype._imageCache;
    /** @type {?} */
    ImageViewerComponent.prototype.config;
}
/**
 * @param {?} file
 * @param {?} regexTest
 * @return {?}
 */
function testFile(file, regexTest) {
    if (!file) {
        return false;
    }
    var /** @type {?} */ name = file instanceof File ? file.name : file;
    return name.toLowerCase().match(regexTest) !== null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,