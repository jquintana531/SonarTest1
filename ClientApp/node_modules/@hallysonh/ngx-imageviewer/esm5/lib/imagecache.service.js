/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function CacheDef() { }
function CacheDef_tsickle_Closure_declarations() {
    /** @type {?} */
    CacheDef.prototype.url;
    /** @type {?} */
    CacheDef.prototype.page;
    /** @type {?} */
    CacheDef.prototype.image;
}
var ImageCacheService = /** @class */ (function () {
    function ImageCacheService() {
        this._cache = [];
    }
    Object.defineProperty(ImageCacheService.prototype, "cache", {
        get: /**
         * @return {?}
         */
        function () {
            return this._cache;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    ImageCacheService.prototype.getCache = /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    function (url, page) {
        return this.cache.find(function (i) { return i.url === url && i.page === page; });
    };
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    ImageCacheService.prototype.getImage = /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    function (url, page) {
        var /** @type {?} */ c = this.getCache(url, page);
        return c ? c.image : null;
    };
    /**
     * @param {?} url
     * @param {?} page
     * @param {?} image
     * @return {?}
     */
    ImageCacheService.prototype.saveImage = /**
     * @param {?} url
     * @param {?} page
     * @param {?} image
     * @return {?}
     */
    function (url, page, image) {
        var /** @type {?} */ cache = this.getCache(url, page);
        if (cache) {
            cache.image = image;
        }
        else {
            this.cache.push({ url: url, page: page, image: image });
        }
    };
    /**
     * @return {?}
     */
    ImageCacheService.prototype.disposeCache = /**
     * @return {?}
     */
    function () {
        this.cache.forEach(function (i) { return URL.revokeObjectURL(i.image.src); });
        this._cache = [];
    };
    /** @nocollapse */
    ImageCacheService.ctorParameters = function () { return []; };
    /** @nocollapse */ ImageCacheService.ngInjectableDef = i0.defineInjectable({ factory: function ImageCacheService_Factory() { return new ImageCacheService(); }, token: ImageCacheService, providedIn: "root" });
ImageCacheService.ɵfac = function ImageCacheService_Factory(t) { return new (t || ImageCacheService)(); };
ImageCacheService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImageCacheService, factory: function (t) { return ImageCacheService.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageCacheService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return ImageCacheService;
}());
export { ImageCacheService };
function ImageCacheService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageCacheService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageCacheService.ctorParameters;
    /** @type {?} */
    ImageCacheService.prototype._cache;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VjYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJAaGFsbHlzb25oL25neC1pbWFnZXZpZXdlci9saWIvaW1hZ2VjYWNoZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDO0FBRU87QUFBSztBQUNKOztBQUFLO0FBSUw7QUFDZTtBQUVkO0FBRVQ7QUFFQTtBQUNDO0FBQXNCO0FBR0Q7QUFBRztBQUNhLElBUHBDO0FBRVUsc0JBSm1CLEVBQUU7QUFDakMsS0FDa0I7QUFDbEIsSUFDRSxzQkFBSSxvQ0FBSztBQUFLO0FBQ1g7QUFDRDtBQUVNLFFBSlI7QUFBZSxZQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLFNBQUc7QUFDRjtBQUN5QjtBQUNiLE9BSFY7QUFDSDtBQUNPO0FBQXVCO0FBQ2pCO0FBQW9CO0FBQVMsSUFEeEMsb0NBQVE7QUFBUTtBQUNsQjtBQUF3QjtBQUFvQjtBQUFTLElBRG5ELFVBQVMsR0FBVyxFQUFFLElBQVk7QUFDcEMsUUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2xFLEtBQUc7QUFDRjtBQUNPO0FBQXVCO0FBQ2pCO0FBQW9CO0FBQ2hDLElBRkEsb0NBQVE7QUFBUTtBQUNsQjtBQUF3QjtBQUNyQjtBQUFTLElBRlYsVUFBUyxHQUFXLEVBQUUsSUFBWTtBQUNwQyxRQUFJLHFCQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2QyxRQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM5QixLQUFHO0FBQ0Y7QUFDTztBQUF1QjtBQUM5QjtBQUF5QjtBQUN6QjtBQUFTLElBRlIscUNBQVM7QUFBUTtBQUF1QjtBQUM5QjtBQUF5QjtBQUN6QjtBQUNULElBSEQsVUFBVSxHQUFXLEVBQUUsSUFBWSxFQUFFLEtBQVU7QUFDakQsUUFBSSxxQkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0MsUUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFlBQU0sS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDMUIsU0FBSztBQUFFLFFBQUQsSUFBSSxDQUFDLENBQUM7QUFDWixZQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLFNBQUs7QUFDTCxLQUFHO0FBQ0Y7QUFDTztBQUNBO0FBQVMsSUFEZix3Q0FBWTtBQUNaO0FBQW9CO0FBQVMsSUFEN0I7QUFBZSxRQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUM7QUFDOUQsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNyQixLQUFHLENBL0JPO0FBQUU7OEJBRFgsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLC9EQUcxQjtDQUhnQyxFQUFFLEhBTzFCOzs7Ozs7Z0RBU047QUFBRSw0QkF4Qko7QUFBRztBQUFPLFNBU0csaUJBQWlCO0FBQzdCO0FBS0Q7QUFJYztBQUNOO0FBQVM7QUFBb0I7QUFLeEI7QUFBUztBQUdBO0FBQXNCOzs7QUE1QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWFBLEFBRkEsQUFBQSxBQUVBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFoQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBU0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVEZWYge1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIHBhZ2U6IG51bWJlcjtcclxuICBpbWFnZTogYW55O1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgSW1hZ2VDYWNoZVNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIF9jYWNoZTogQ2FjaGVEZWZbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIGdldCBjYWNoZSgpOiBDYWNoZURlZltdIHtcclxuICAgIHJldHVybiB0aGlzLl9jYWNoZTtcclxuICB9XHJcblxyXG4gIGdldENhY2hlKHVybDogc3RyaW5nLCBwYWdlOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmNhY2hlLmZpbmQoaSA9PiBpLnVybCA9PT0gdXJsICYmIGkucGFnZSA9PT0gcGFnZSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbWFnZSh1cmw6IHN0cmluZywgcGFnZTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBjID0gdGhpcy5nZXRDYWNoZSh1cmwsIHBhZ2UpO1xyXG4gICAgcmV0dXJuIGMgPyBjLmltYWdlIDogbnVsbDtcclxuICB9XHJcblxyXG4gIHNhdmVJbWFnZSh1cmw6IHN0cmluZywgcGFnZTogbnVtYmVyLCBpbWFnZTogYW55KSB7XHJcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuZ2V0Q2FjaGUodXJsLCBwYWdlKTtcclxuICAgIGlmIChjYWNoZSkge1xyXG4gICAgICBjYWNoZS5pbWFnZSA9IGltYWdlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jYWNoZS5wdXNoKHsgdXJsLCBwYWdlLCBpbWFnZSB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2VDYWNoZSgpIHtcclxuICAgIHRoaXMuY2FjaGUuZm9yRWFjaChpID0+IFVSTC5yZXZva2VPYmplY3RVUkwoaS5pbWFnZS5zcmMpKTtcclxuICAgIHRoaXMuX2NhY2hlID0gW107XHJcbiAgfVxyXG59XHJcbiJdfQ==