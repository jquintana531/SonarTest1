/**
 * unix-timestamp-date-time-adapter.class
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { DateTimeAdapter, OWL_DATE_TIME_LOCALE } from '../date-time-adapter.class';
import { Platform } from '@angular/cdk/platform';
import { range } from '../../../utils/array.utils';
import { createDate, getNumDaysInMonth } from '../../../utils/date.utils';
import { DEFAULT_DATE_NAMES, DEFAULT_DAY_OF_WEEK_NAMES, DEFAULT_MONTH_NAMES, SUPPORTS_INTL_API } from '../../../utils/constants';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/platform';
export class UnixTimestampDateTimeAdapter extends DateTimeAdapter {
    constructor(owlDateTimeLocale, platform) {
        super();
        this.owlDateTimeLocale = owlDateTimeLocale;
        super.setLocale(owlDateTimeLocale);
        // IE does its own time zone correction, so we disable this on IE.
        this.useUtcForDisplay = !platform.TRIDENT;
        this._clampDate = platform.TRIDENT || platform.EDGE;
    }
    static stripDirectionalityCharacters(str) {
        return str.replace(UnixTimestampDateTimeAdapter.search_ltr_rtl_pattern, '');
    }
    /**
     * When converting Date object to string, javascript built-in functions may return wrong
     * results because it applies its internal DST rules. The DST rules around the world change
     * very frequently, and the current valid rule is not always valid in previous years though.
     * We work around this problem building a new Date object which has its internal UTC
     * representation with the local date and time.
     */
    static _format(dtf, date) {
        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
        return dtf.format(d);
    }
    addCalendarDays(date, amount) {
        const result = new Date(date);
        amount = Number(amount);
        result.setDate(result.getDate() + amount);
        return result.getTime();
    }
    addCalendarMonths(date, amount) {
        const result = new Date(date);
        amount = Number(amount);
        const desiredMonth = result.getMonth() + amount;
        const dateWithDesiredMonth = new Date(0);
        dateWithDesiredMonth.setFullYear(result.getFullYear(), desiredMonth, 1);
        dateWithDesiredMonth.setHours(0, 0, 0, 0);
        const daysInMonth = this.getNumDaysInMonth(dateWithDesiredMonth.getTime());
        // Set the last day of the new month
        // if the original date was the last day of the longer month
        result.setMonth(desiredMonth, Math.min(daysInMonth, result.getDate()));
        return result.getTime();
    }
    addCalendarYears(date, amount) {
        return this.addCalendarMonths(date, amount * 12);
    }
    clone(date) {
        return date;
    }
    createDate(year, month, date, hours = 0, minutes = 0, seconds = 0) {
        return createDate(year, month, date, hours, minutes, seconds).getTime();
    }
    differenceInCalendarDays(dateLeft, dateRight) {
        if (this.isValid(dateLeft) && this.isValid(dateRight)) {
            const dateLeftStartOfDay = this.createDate(this.getYear(dateLeft), this.getMonth(dateLeft), this.getDate(dateLeft));
            const dateRightStartOfDay = this.createDate(this.getYear(dateRight), this.getMonth(dateRight), this.getDate(dateRight));
            const timeStampLeft = this.getTime(dateLeftStartOfDay) -
                new Date(dateLeftStartOfDay).getTimezoneOffset() *
                    this.milliseondsInMinute;
            const timeStampRight = this.getTime(dateRightStartOfDay) -
                new Date(dateRightStartOfDay).getTimezoneOffset() *
                    this.milliseondsInMinute;
            return Math.round((timeStampLeft - timeStampRight) / this.millisecondsInDay);
        }
        else {
            return null;
        }
    }
    format(date, displayFormat) {
        if (!this.isValid(date)) {
            throw Error('JSNativeDate: Cannot format invalid date.');
        }
        const jsDate = new Date(date);
        if (SUPPORTS_INTL_API) {
            if (this._clampDate &&
                (jsDate.getFullYear() < 1 || jsDate.getFullYear() > 9999)) {
                jsDate.setFullYear(Math.max(1, Math.min(9999, jsDate.getFullYear())));
            }
            displayFormat = Object.assign(Object.assign({}, displayFormat), { timeZone: 'utc' });
            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
            return UnixTimestampDateTimeAdapter.stripDirectionalityCharacters(UnixTimestampDateTimeAdapter._format(dtf, jsDate));
        }
        return UnixTimestampDateTimeAdapter.stripDirectionalityCharacters(jsDate.toDateString());
    }
    getDate(date) {
        return new Date(date).getDate();
    }
    getDateNames() {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                day: 'numeric',
                timeZone: 'utc'
            });
            return range(31, i => UnixTimestampDateTimeAdapter.stripDirectionalityCharacters(UnixTimestampDateTimeAdapter._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DATE_NAMES;
    }
    getDay(date) {
        return new Date(date).getDay();
    }
    getDayOfWeekNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                weekday: style,
                timeZone: 'utc'
            });
            return range(7, i => UnixTimestampDateTimeAdapter.stripDirectionalityCharacters(UnixTimestampDateTimeAdapter._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DAY_OF_WEEK_NAMES[style];
    }
    getHours(date) {
        return new Date(date).getHours();
    }
    getMinutes(date) {
        return new Date(date).getMinutes();
    }
    getMonth(date) {
        return new Date(date).getMonth();
    }
    getMonthNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                month: style,
                timeZone: 'utc'
            });
            return range(12, i => UnixTimestampDateTimeAdapter.stripDirectionalityCharacters(UnixTimestampDateTimeAdapter._format(dtf, new Date(2017, i, 1))));
        }
        return DEFAULT_MONTH_NAMES[style];
    }
    getNumDaysInMonth(date) {
        return getNumDaysInMonth(new Date(date));
    }
    getSeconds(date) {
        return new Date(date).getSeconds();
    }
    getTime(date) {
        return date;
    }
    getYear(date) {
        return new Date(date).getFullYear();
    }
    getYearName(date) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                year: 'numeric',
                timeZone: 'utc'
            });
            return UnixTimestampDateTimeAdapter.stripDirectionalityCharacters(UnixTimestampDateTimeAdapter._format(dtf, new Date(date)));
        }
        return String(this.getYear(date));
    }
    invalid() {
        return NaN;
    }
    isDateInstance(obj) {
        return typeof obj === 'number';
    }
    isEqual(dateLeft, dateRight) {
        if (this.isValid(dateLeft) && this.isValid(dateRight)) {
            return dateLeft === dateRight;
        }
        else {
            return false;
        }
    }
    isSameDay(dateLeft, dateRight) {
        if (this.isValid(dateLeft) && this.isValid(dateRight)) {
            const dateLeftStartOfDay = new Date(dateLeft);
            const dateRightStartOfDay = new Date(dateRight);
            dateLeftStartOfDay.setHours(0, 0, 0, 0);
            dateRightStartOfDay.setHours(0, 0, 0, 0);
            return (dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime());
        }
        else {
            return false;
        }
    }
    isValid(date) {
        return (date || date === 0) && !isNaN(date);
    }
    now() {
        return new Date().getTime();
    }
    parse(value, parseFormat) {
        // There is no way using the native JS Date to set the parse format or locale
        if (typeof value === 'number') {
            return value;
        }
        return value ? new Date(Date.parse(value)).getTime() : null;
    }
    setHours(date, amount) {
        const result = new Date(date);
        result.setHours(amount);
        return result.getTime();
    }
    setMinutes(date, amount) {
        const result = new Date(date);
        result.setMinutes(amount);
        return result.getTime();
    }
    setSeconds(date, amount) {
        const result = new Date(date);
        result.setSeconds(amount);
        return result.getTime();
    }
    toIso8601(date) {
        return new Date(date).toISOString();
    }
}
UnixTimestampDateTimeAdapter.ɵfac = function UnixTimestampDateTimeAdapter_Factory(t) { return new (t || UnixTimestampDateTimeAdapter)(ɵngcc0.ɵɵinject(OWL_DATE_TIME_LOCALE, 8), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };
UnixTimestampDateTimeAdapter.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: UnixTimestampDateTimeAdapter, factory: UnixTimestampDateTimeAdapter.ɵfac });
/**
 * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
 * other browsers do not. We remove them to make output consistent and because they interfere with
 * date parsing.
 */
UnixTimestampDateTimeAdapter.search_ltr_rtl_pattern = '/[\u200e\u200f]/g';
UnixTimestampDateTimeAdapter.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [OWL_DATE_TIME_LOCALE,] }] },
    { type: Platform }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UnixTimestampDateTimeAdapter, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [OWL_DATE_TIME_LOCALE]
            }] }, { type: ɵngcc1.Platform }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,